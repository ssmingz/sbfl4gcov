        -:    0:Source:/usr/include/openssl/ssl.h
        -:    0:Graph:viossl.cc.gcno
        -:    0:Data:viossl.cc.gcda
        -:    0:Runs:4
        -:    0:Programs:2
        -:    1:/*
        -:    2: * Copyright 1995-2018 The OpenSSL Project Authors. All Rights Reserved.
        -:    3: * Copyright (c) 2002, Oracle and/or its affiliates. All rights reserved
        -:    4: * Copyright 2005 Nokia. All rights reserved.
        -:    5: *
        -:    6: * Licensed under the OpenSSL license (the "License").  You may not use
        -:    7: * this file except in compliance with the License.  You can obtain a copy
        -:    8: * in the file LICENSE in the source distribution or at
        -:    9: * https://www.openssl.org/source/license.html
        -:   10: */
        -:   11:
        -:   12:#ifndef HEADER_SSL_H
        -:   13:# define HEADER_SSL_H
        -:   14:
        -:   15:# include <openssl/e_os2.h>
        -:   16:# include <openssl/opensslconf.h>
        -:   17:# include <openssl/comp.h>
        -:   18:# include <openssl/bio.h>
        -:   19:# if OPENSSL_API_COMPAT < 0x10100000L
        -:   20:#  include <openssl/x509.h>
        -:   21:#  include <openssl/crypto.h>
        -:   22:#  include <openssl/buffer.h>
        -:   23:# endif
        -:   24:# include <openssl/lhash.h>
        -:   25:# include <openssl/pem.h>
        -:   26:# include <openssl/hmac.h>
        -:   27:# include <openssl/async.h>
        -:   28:
        -:   29:# include <openssl/safestack.h>
        -:   30:# include <openssl/symhacks.h>
        -:   31:# include <openssl/ct.h>
        -:   32:# include <openssl/sslerr.h>
        -:   33:
        -:   34:#ifdef  __cplusplus
        -:   35:extern "C" {
        -:   36:#endif
        -:   37:
        -:   38:/* OpenSSL version number for ASN.1 encoding of the session information */
        -:   39:/*-
        -:   40: * Version 0 - initial version
        -:   41: * Version 1 - added the optional peer certificate
        -:   42: */
        -:   43:# define SSL_SESSION_ASN1_VERSION 0x0001
        -:   44:
        -:   45:# define SSL_MAX_SSL_SESSION_ID_LENGTH           32
        -:   46:# define SSL_MAX_SID_CTX_LENGTH                  32
        -:   47:
        -:   48:# define SSL_MIN_RSA_MODULUS_LENGTH_IN_BYTES     (512/8)
        -:   49:# define SSL_MAX_KEY_ARG_LENGTH                  8
        -:   50:# define SSL_MAX_MASTER_KEY_LENGTH               48
        -:   51:
        -:   52:/* The maximum number of encrypt/decrypt pipelines we can support */
        -:   53:# define SSL_MAX_PIPELINES  32
        -:   54:
        -:   55:/* text strings for the ciphers */
        -:   56:
        -:   57:/* These are used to specify which ciphers to use and not to use */
        -:   58:
        -:   59:# define SSL_TXT_LOW             "LOW"
        -:   60:# define SSL_TXT_MEDIUM          "MEDIUM"
        -:   61:# define SSL_TXT_HIGH            "HIGH"
        -:   62:# define SSL_TXT_FIPS            "FIPS"
        -:   63:
        -:   64:# define SSL_TXT_aNULL           "aNULL"
        -:   65:# define SSL_TXT_eNULL           "eNULL"
        -:   66:# define SSL_TXT_NULL            "NULL"
        -:   67:
        -:   68:# define SSL_TXT_kRSA            "kRSA"
        -:   69:# define SSL_TXT_kDHr            "kDHr"/* this cipher class has been removed */
        -:   70:# define SSL_TXT_kDHd            "kDHd"/* this cipher class has been removed */
        -:   71:# define SSL_TXT_kDH             "kDH"/* this cipher class has been removed */
        -:   72:# define SSL_TXT_kEDH            "kEDH"/* alias for kDHE */
        -:   73:# define SSL_TXT_kDHE            "kDHE"
        -:   74:# define SSL_TXT_kECDHr          "kECDHr"/* this cipher class has been removed */
        -:   75:# define SSL_TXT_kECDHe          "kECDHe"/* this cipher class has been removed */
        -:   76:# define SSL_TXT_kECDH           "kECDH"/* this cipher class has been removed */
        -:   77:# define SSL_TXT_kEECDH          "kEECDH"/* alias for kECDHE */
        -:   78:# define SSL_TXT_kECDHE          "kECDHE"
        -:   79:# define SSL_TXT_kPSK            "kPSK"
        -:   80:# define SSL_TXT_kRSAPSK         "kRSAPSK"
        -:   81:# define SSL_TXT_kECDHEPSK       "kECDHEPSK"
        -:   82:# define SSL_TXT_kDHEPSK         "kDHEPSK"
        -:   83:# define SSL_TXT_kGOST           "kGOST"
        -:   84:# define SSL_TXT_kSRP            "kSRP"
        -:   85:
        -:   86:# define SSL_TXT_aRSA            "aRSA"
        -:   87:# define SSL_TXT_aDSS            "aDSS"
        -:   88:# define SSL_TXT_aDH             "aDH"/* this cipher class has been removed */
        -:   89:# define SSL_TXT_aECDH           "aECDH"/* this cipher class has been removed */
        -:   90:# define SSL_TXT_aECDSA          "aECDSA"
        -:   91:# define SSL_TXT_aPSK            "aPSK"
        -:   92:# define SSL_TXT_aGOST94         "aGOST94"
        -:   93:# define SSL_TXT_aGOST01         "aGOST01"
        -:   94:# define SSL_TXT_aGOST12         "aGOST12"
        -:   95:# define SSL_TXT_aGOST           "aGOST"
        -:   96:# define SSL_TXT_aSRP            "aSRP"
        -:   97:
        -:   98:# define SSL_TXT_DSS             "DSS"
        -:   99:# define SSL_TXT_DH              "DH"
        -:  100:# define SSL_TXT_DHE             "DHE"/* same as "kDHE:-ADH" */
        -:  101:# define SSL_TXT_EDH             "EDH"/* alias for DHE */
        -:  102:# define SSL_TXT_ADH             "ADH"
        -:  103:# define SSL_TXT_RSA             "RSA"
        -:  104:# define SSL_TXT_ECDH            "ECDH"
        -:  105:# define SSL_TXT_EECDH           "EECDH"/* alias for ECDHE" */
        -:  106:# define SSL_TXT_ECDHE           "ECDHE"/* same as "kECDHE:-AECDH" */
        -:  107:# define SSL_TXT_AECDH           "AECDH"
        -:  108:# define SSL_TXT_ECDSA           "ECDSA"
        -:  109:# define SSL_TXT_PSK             "PSK"
        -:  110:# define SSL_TXT_SRP             "SRP"
        -:  111:
        -:  112:# define SSL_TXT_DES             "DES"
        -:  113:# define SSL_TXT_3DES            "3DES"
        -:  114:# define SSL_TXT_RC4             "RC4"
        -:  115:# define SSL_TXT_RC2             "RC2"
        -:  116:# define SSL_TXT_IDEA            "IDEA"
        -:  117:# define SSL_TXT_SEED            "SEED"
        -:  118:# define SSL_TXT_AES128          "AES128"
        -:  119:# define SSL_TXT_AES256          "AES256"
        -:  120:# define SSL_TXT_AES             "AES"
        -:  121:# define SSL_TXT_AES_GCM         "AESGCM"
        -:  122:# define SSL_TXT_AES_CCM         "AESCCM"
        -:  123:# define SSL_TXT_AES_CCM_8       "AESCCM8"
        -:  124:# define SSL_TXT_CAMELLIA128     "CAMELLIA128"
        -:  125:# define SSL_TXT_CAMELLIA256     "CAMELLIA256"
        -:  126:# define SSL_TXT_CAMELLIA        "CAMELLIA"
        -:  127:# define SSL_TXT_CHACHA20        "CHACHA20"
        -:  128:# define SSL_TXT_GOST            "GOST89"
        -:  129:# define SSL_TXT_ARIA            "ARIA"
        -:  130:# define SSL_TXT_ARIA_GCM        "ARIAGCM"
        -:  131:# define SSL_TXT_ARIA128         "ARIA128"
        -:  132:# define SSL_TXT_ARIA256         "ARIA256"
        -:  133:
        -:  134:# define SSL_TXT_MD5             "MD5"
        -:  135:# define SSL_TXT_SHA1            "SHA1"
        -:  136:# define SSL_TXT_SHA             "SHA"/* same as "SHA1" */
        -:  137:# define SSL_TXT_GOST94          "GOST94"
        -:  138:# define SSL_TXT_GOST89MAC       "GOST89MAC"
        -:  139:# define SSL_TXT_GOST12          "GOST12"
        -:  140:# define SSL_TXT_GOST89MAC12     "GOST89MAC12"
        -:  141:# define SSL_TXT_SHA256          "SHA256"
        -:  142:# define SSL_TXT_SHA384          "SHA384"
        -:  143:
        -:  144:# define SSL_TXT_SSLV3           "SSLv3"
        -:  145:# define SSL_TXT_TLSV1           "TLSv1"
        -:  146:# define SSL_TXT_TLSV1_1         "TLSv1.1"
        -:  147:# define SSL_TXT_TLSV1_2         "TLSv1.2"
        -:  148:
        -:  149:# define SSL_TXT_ALL             "ALL"
        -:  150:
        -:  151:/*-
        -:  152: * COMPLEMENTOF* definitions. These identifiers are used to (de-select)
        -:  153: * ciphers normally not being used.
        -:  154: * Example: "RC4" will activate all ciphers using RC4 including ciphers
        -:  155: * without authentication, which would normally disabled by DEFAULT (due
        -:  156: * the "!ADH" being part of default). Therefore "RC4:!COMPLEMENTOFDEFAULT"
        -:  157: * will make sure that it is also disabled in the specific selection.
        -:  158: * COMPLEMENTOF* identifiers are portable between version, as adjustments
        -:  159: * to the default cipher setup will also be included here.
        -:  160: *
        -:  161: * COMPLEMENTOFDEFAULT does not experience the same special treatment that
        -:  162: * DEFAULT gets, as only selection is being done and no sorting as needed
        -:  163: * for DEFAULT.
        -:  164: */
        -:  165:# define SSL_TXT_CMPALL          "COMPLEMENTOFALL"
        -:  166:# define SSL_TXT_CMPDEF          "COMPLEMENTOFDEFAULT"
        -:  167:
        -:  168:/*
        -:  169: * The following cipher list is used by default. It also is substituted when
        -:  170: * an application-defined cipher list string starts with 'DEFAULT'.
        -:  171: * This applies to ciphersuites for TLSv1.2 and below.
        -:  172: */
        -:  173:# define SSL_DEFAULT_CIPHER_LIST "ALL:!COMPLEMENTOFDEFAULT:!eNULL"
        -:  174:/* This is the default set of TLSv1.3 ciphersuites */
        -:  175:# if !defined(OPENSSL_NO_CHACHA) && !defined(OPENSSL_NO_POLY1305)
        -:  176:#  define TLS_DEFAULT_CIPHERSUITES "TLS_AES_256_GCM_SHA384:" \
        -:  177:                                   "TLS_CHACHA20_POLY1305_SHA256:" \
        -:  178:                                   "TLS_AES_128_GCM_SHA256"
        -:  179:# else
        -:  180:#  define TLS_DEFAULT_CIPHERSUITES "TLS_AES_256_GCM_SHA384:" \
        -:  181:                                   "TLS_AES_128_GCM_SHA256"
        -:  182:#endif
        -:  183:/*
        -:  184: * As of OpenSSL 1.0.0, ssl_create_cipher_list() in ssl/ssl_ciph.c always
        -:  185: * starts with a reasonable order, and all we have to do for DEFAULT is
        -:  186: * throwing out anonymous and unencrypted ciphersuites! (The latter are not
        -:  187: * actually enabled by ALL, but "ALL:RSA" would enable some of them.)
        -:  188: */
        -:  189:
        -:  190:/* Used in SSL_set_shutdown()/SSL_get_shutdown(); */
        -:  191:# define SSL_SENT_SHUTDOWN       1
        -:  192:# define SSL_RECEIVED_SHUTDOWN   2
        -:  193:
        -:  194:#ifdef __cplusplus
        -:  195:}
        -:  196:#endif
        -:  197:
        -:  198:#ifdef  __cplusplus
        -:  199:extern "C" {
        -:  200:#endif
        -:  201:
        -:  202:# define SSL_FILETYPE_ASN1       X509_FILETYPE_ASN1
        -:  203:# define SSL_FILETYPE_PEM        X509_FILETYPE_PEM
        -:  204:
        -:  205:/*
        -:  206: * This is needed to stop compilers complaining about the 'struct ssl_st *'
        -:  207: * function parameters used to prototype callbacks in SSL_CTX.
        -:  208: */
        -:  209:typedef struct ssl_st *ssl_crock_st;
        -:  210:typedef struct tls_session_ticket_ext_st TLS_SESSION_TICKET_EXT;
        -:  211:typedef struct ssl_method_st SSL_METHOD;
        -:  212:typedef struct ssl_cipher_st SSL_CIPHER;
        -:  213:typedef struct ssl_session_st SSL_SESSION;
        -:  214:typedef struct tls_sigalgs_st TLS_SIGALGS;
        -:  215:typedef struct ssl_conf_ctx_st SSL_CONF_CTX;
        -:  216:typedef struct ssl_comp_st SSL_COMP;
        -:  217:
        -:  218:STACK_OF(SSL_CIPHER);
        -:  219:STACK_OF(SSL_COMP);
        -:  220:
        -:  221:/* SRTP protection profiles for use with the use_srtp extension (RFC 5764)*/
        -:  222:typedef struct srtp_protection_profile_st {
        -:  223:    const char *name;
        -:  224:    unsigned long id;
        -:  225:} SRTP_PROTECTION_PROFILE;
        -:  226:
        -:  227:DEFINE_STACK_OF(SRTP_PROTECTION_PROFILE)
        -:  228:
        -:  229:typedef int (*tls_session_ticket_ext_cb_fn)(SSL *s, const unsigned char *data,
        -:  230:                                            int len, void *arg);
        -:  231:typedef int (*tls_session_secret_cb_fn)(SSL *s, void *secret, int *secret_len,
        -:  232:                                        STACK_OF(SSL_CIPHER) *peer_ciphers,
        -:  233:                                        const SSL_CIPHER **cipher, void *arg);
        -:  234:
        -:  235:/* Extension context codes */
        -:  236:/* This extension is only allowed in TLS */
        -:  237:#define SSL_EXT_TLS_ONLY                        0x0001
        -:  238:/* This extension is only allowed in DTLS */
        -:  239:#define SSL_EXT_DTLS_ONLY                       0x0002
        -:  240:/* Some extensions may be allowed in DTLS but we don't implement them for it */
        -:  241:#define SSL_EXT_TLS_IMPLEMENTATION_ONLY         0x0004
        -:  242:/* Most extensions are not defined for SSLv3 but EXT_TYPE_renegotiate is */
        -:  243:#define SSL_EXT_SSL3_ALLOWED                    0x0008
        -:  244:/* Extension is only defined for TLS1.2 and below */
        -:  245:#define SSL_EXT_TLS1_2_AND_BELOW_ONLY           0x0010
        -:  246:/* Extension is only defined for TLS1.3 and above */
        -:  247:#define SSL_EXT_TLS1_3_ONLY                     0x0020
        -:  248:/* Ignore this extension during parsing if we are resuming */
        -:  249:#define SSL_EXT_IGNORE_ON_RESUMPTION            0x0040
        -:  250:#define SSL_EXT_CLIENT_HELLO                    0x0080
        -:  251:/* Really means TLS1.2 or below */
        -:  252:#define SSL_EXT_TLS1_2_SERVER_HELLO             0x0100
        -:  253:#define SSL_EXT_TLS1_3_SERVER_HELLO             0x0200
        -:  254:#define SSL_EXT_TLS1_3_ENCRYPTED_EXTENSIONS     0x0400
        -:  255:#define SSL_EXT_TLS1_3_HELLO_RETRY_REQUEST      0x0800
        -:  256:#define SSL_EXT_TLS1_3_CERTIFICATE              0x1000
        -:  257:#define SSL_EXT_TLS1_3_NEW_SESSION_TICKET       0x2000
        -:  258:#define SSL_EXT_TLS1_3_CERTIFICATE_REQUEST      0x4000
        -:  259:
        -:  260:/* Typedefs for handling custom extensions */
        -:  261:
        -:  262:typedef int (*custom_ext_add_cb)(SSL *s, unsigned int ext_type,
        -:  263:                                 const unsigned char **out, size_t *outlen,
        -:  264:                                 int *al, void *add_arg);
        -:  265:
        -:  266:typedef void (*custom_ext_free_cb)(SSL *s, unsigned int ext_type,
        -:  267:                                   const unsigned char *out, void *add_arg);
        -:  268:
        -:  269:typedef int (*custom_ext_parse_cb)(SSL *s, unsigned int ext_type,
        -:  270:                                   const unsigned char *in, size_t inlen,
        -:  271:                                   int *al, void *parse_arg);
        -:  272:
        -:  273:
        -:  274:typedef int (*SSL_custom_ext_add_cb_ex)(SSL *s, unsigned int ext_type,
        -:  275:                                        unsigned int context,
        -:  276:                                        const unsigned char **out,
        -:  277:                                        size_t *outlen, X509 *x,
        -:  278:                                        size_t chainidx,
        -:  279:                                        int *al, void *add_arg);
        -:  280:
        -:  281:typedef void (*SSL_custom_ext_free_cb_ex)(SSL *s, unsigned int ext_type,
        -:  282:                                          unsigned int context,
        -:  283:                                          const unsigned char *out,
        -:  284:                                          void *add_arg);
        -:  285:
        -:  286:typedef int (*SSL_custom_ext_parse_cb_ex)(SSL *s, unsigned int ext_type,
        -:  287:                                          unsigned int context,
        -:  288:                                          const unsigned char *in,
        -:  289:                                          size_t inlen, X509 *x,
        -:  290:                                          size_t chainidx,
        -:  291:                                          int *al, void *parse_arg);
        -:  292:
        -:  293:/* Typedef for verification callback */
        -:  294:typedef int (*SSL_verify_cb)(int preverify_ok, X509_STORE_CTX *x509_ctx);
        -:  295:
        -:  296:/*
        -:  297: * Some values are reserved until OpenSSL 1.2.0 because they were previously
        -:  298: * included in SSL_OP_ALL in a 1.1.x release.
        -:  299: *
        -:  300: * Reserved value (until OpenSSL 1.2.0)                  0x00000001U
        -:  301: * Reserved value (until OpenSSL 1.2.0)                  0x00000002U
        -:  302: */
        -:  303:/* Allow initial connection to servers that don't support RI */
        -:  304:# define SSL_OP_LEGACY_SERVER_CONNECT                    0x00000004U
        -:  305:
        -:  306:/* Reserved value (until OpenSSL 1.2.0)                  0x00000008U */
        -:  307:# define SSL_OP_TLSEXT_PADDING                           0x00000010U
        -:  308:/* Reserved value (until OpenSSL 1.2.0)                  0x00000020U */
        -:  309:# define SSL_OP_SAFARI_ECDHE_ECDSA_BUG                   0x00000040U
        -:  310:/*
        -:  311: * Reserved value (until OpenSSL 1.2.0)                  0x00000080U
        -:  312: * Reserved value (until OpenSSL 1.2.0)                  0x00000100U
        -:  313: * Reserved value (until OpenSSL 1.2.0)                  0x00000200U
        -:  314: */
        -:  315:
        -:  316:/* In TLSv1.3 allow a non-(ec)dhe based kex_mode */
        -:  317:# define SSL_OP_ALLOW_NO_DHE_KEX                         0x00000400U
        -:  318:
        -:  319:/*
        -:  320: * Disable SSL 3.0/TLS 1.0 CBC vulnerability workaround that was added in
        -:  321: * OpenSSL 0.9.6d.  Usually (depending on the application protocol) the
        -:  322: * workaround is not needed.  Unfortunately some broken SSL/TLS
        -:  323: * implementations cannot handle it at all, which is why we include it in
        -:  324: * SSL_OP_ALL. Added in 0.9.6e
        -:  325: */
        -:  326:# define SSL_OP_DONT_INSERT_EMPTY_FRAGMENTS              0x00000800U
        -:  327:
        -:  328:/* DTLS options */
        -:  329:# define SSL_OP_NO_QUERY_MTU                             0x00001000U
        -:  330:/* Turn on Cookie Exchange (on relevant for servers) */
        -:  331:# define SSL_OP_COOKIE_EXCHANGE                          0x00002000U
        -:  332:/* Don't use RFC4507 ticket extension */
        -:  333:# define SSL_OP_NO_TICKET                                0x00004000U
        -:  334:# ifndef OPENSSL_NO_DTLS1_METHOD
        -:  335:/* Use Cisco's "speshul" version of DTLS_BAD_VER
        -:  336: * (only with deprecated DTLSv1_client_method())  */
        -:  337:#  define SSL_OP_CISCO_ANYCONNECT                        0x00008000U
        -:  338:# endif
        -:  339:
        -:  340:/* As server, disallow session resumption on renegotiation */
        -:  341:# define SSL_OP_NO_SESSION_RESUMPTION_ON_RENEGOTIATION   0x00010000U
        -:  342:/* Don't use compression even if supported */
        -:  343:# define SSL_OP_NO_COMPRESSION                           0x00020000U
        -:  344:/* Permit unsafe legacy renegotiation */
        -:  345:# define SSL_OP_ALLOW_UNSAFE_LEGACY_RENEGOTIATION        0x00040000U
        -:  346:/* Disable encrypt-then-mac */
        -:  347:# define SSL_OP_NO_ENCRYPT_THEN_MAC                      0x00080000U
        -:  348:
        -:  349:/*
        -:  350: * Enable TLSv1.3 Compatibility mode. This is on by default. A future version
        -:  351: * of OpenSSL may have this disabled by default.
        -:  352: */
        -:  353:# define SSL_OP_ENABLE_MIDDLEBOX_COMPAT                  0x00100000U
        -:  354:
        -:  355:/* Prioritize Chacha20Poly1305 when client does.
        -:  356: * Modifies SSL_OP_CIPHER_SERVER_PREFERENCE */
        -:  357:# define SSL_OP_PRIORITIZE_CHACHA                        0x00200000U
        -:  358:
        -:  359:/*
        -:  360: * Set on servers to choose the cipher according to the server's preferences
        -:  361: */
        -:  362:# define SSL_OP_CIPHER_SERVER_PREFERENCE                 0x00400000U
        -:  363:/*
        -:  364: * If set, a server will allow a client to issue a SSLv3.0 version number as
        -:  365: * latest version supported in the premaster secret, even when TLSv1.0
        -:  366: * (version 3.1) was announced in the client hello. Normally this is
        -:  367: * forbidden to prevent version rollback attacks.
        -:  368: */
        -:  369:# define SSL_OP_TLS_ROLLBACK_BUG                         0x00800000U
        -:  370:
        -:  371:/*
        -:  372: * Switches off automatic TLSv1.3 anti-replay protection for early data. This
        -:  373: * is a server-side option only (no effect on the client).
        -:  374: */
        -:  375:# define SSL_OP_NO_ANTI_REPLAY                           0x01000000U
        -:  376:
        -:  377:# define SSL_OP_NO_SSLv3                                 0x02000000U
        -:  378:# define SSL_OP_NO_TLSv1                                 0x04000000U
        -:  379:# define SSL_OP_NO_TLSv1_2                               0x08000000U
        -:  380:# define SSL_OP_NO_TLSv1_1                               0x10000000U
        -:  381:# define SSL_OP_NO_TLSv1_3                               0x20000000U
        -:  382:
        -:  383:# define SSL_OP_NO_DTLSv1                                0x04000000U
        -:  384:# define SSL_OP_NO_DTLSv1_2                              0x08000000U
        -:  385:
        -:  386:# define SSL_OP_NO_SSL_MASK (SSL_OP_NO_SSLv3|\
        -:  387:        SSL_OP_NO_TLSv1|SSL_OP_NO_TLSv1_1|SSL_OP_NO_TLSv1_2|SSL_OP_NO_TLSv1_3)
        -:  388:# define SSL_OP_NO_DTLS_MASK (SSL_OP_NO_DTLSv1|SSL_OP_NO_DTLSv1_2)
        -:  389:
        -:  390:/* Disallow all renegotiation */
        -:  391:# define SSL_OP_NO_RENEGOTIATION                         0x40000000U
        -:  392:
        -:  393:/*
        -:  394: * Make server add server-hello extension from early version of cryptopro
        -:  395: * draft, when GOST ciphersuite is negotiated. Required for interoperability
        -:  396: * with CryptoPro CSP 3.x
        -:  397: */
        -:  398:# define SSL_OP_CRYPTOPRO_TLSEXT_BUG                     0x80000000U
        -:  399:
        -:  400:/*
        -:  401: * SSL_OP_ALL: various bug workarounds that should be rather harmless.
        -:  402: * This used to be 0x000FFFFFL before 0.9.7.
        -:  403: * This used to be 0x80000BFFU before 1.1.1.
        -:  404: */
        -:  405:# define SSL_OP_ALL        (SSL_OP_CRYPTOPRO_TLSEXT_BUG|\
        -:  406:                            SSL_OP_DONT_INSERT_EMPTY_FRAGMENTS|\
        -:  407:                            SSL_OP_LEGACY_SERVER_CONNECT|\
        -:  408:                            SSL_OP_TLSEXT_PADDING|\
        -:  409:                            SSL_OP_SAFARI_ECDHE_ECDSA_BUG)
        -:  410:
        -:  411:/* OBSOLETE OPTIONS: retained for compatibility */
        -:  412:
        -:  413:/* Removed from OpenSSL 1.1.0. Was 0x00000001L */
        -:  414:/* Related to removed SSLv2. */
        -:  415:# define SSL_OP_MICROSOFT_SESS_ID_BUG                    0x0
        -:  416:/* Removed from OpenSSL 1.1.0. Was 0x00000002L */
        -:  417:/* Related to removed SSLv2. */
        -:  418:# define SSL_OP_NETSCAPE_CHALLENGE_BUG                   0x0
        -:  419:/* Removed from OpenSSL 0.9.8q and 1.0.0c. Was 0x00000008L */
        -:  420:/* Dead forever, see CVE-2010-4180 */
        -:  421:# define SSL_OP_NETSCAPE_REUSE_CIPHER_CHANGE_BUG         0x0
        -:  422:/* Removed from OpenSSL 1.0.1h and 1.0.2. Was 0x00000010L */
        -:  423:/* Refers to ancient SSLREF and SSLv2. */
        -:  424:# define SSL_OP_SSLREF2_REUSE_CERT_TYPE_BUG              0x0
        -:  425:/* Removed from OpenSSL 1.1.0. Was 0x00000020 */
        -:  426:# define SSL_OP_MICROSOFT_BIG_SSLV3_BUFFER               0x0
        -:  427:/* Removed from OpenSSL 0.9.7h and 0.9.8b. Was 0x00000040L */
        -:  428:# define SSL_OP_MSIE_SSLV2_RSA_PADDING                   0x0
        -:  429:/* Removed from OpenSSL 1.1.0. Was 0x00000080 */
        -:  430:/* Ancient SSLeay version. */
        -:  431:# define SSL_OP_SSLEAY_080_CLIENT_DH_BUG                 0x0
        -:  432:/* Removed from OpenSSL 1.1.0. Was 0x00000100L */
        -:  433:# define SSL_OP_TLS_D5_BUG                               0x0
        -:  434:/* Removed from OpenSSL 1.1.0. Was 0x00000200L */
        -:  435:# define SSL_OP_TLS_BLOCK_PADDING_BUG                    0x0
        -:  436:/* Removed from OpenSSL 1.1.0. Was 0x00080000L */
        -:  437:# define SSL_OP_SINGLE_ECDH_USE                          0x0
        -:  438:/* Removed from OpenSSL 1.1.0. Was 0x00100000L */
        -:  439:# define SSL_OP_SINGLE_DH_USE                            0x0
        -:  440:/* Removed from OpenSSL 1.0.1k and 1.0.2. Was 0x00200000L */
        -:  441:# define SSL_OP_EPHEMERAL_RSA                            0x0
        -:  442:/* Removed from OpenSSL 1.1.0. Was 0x01000000L */
        -:  443:# define SSL_OP_NO_SSLv2                                 0x0
        -:  444:/* Removed from OpenSSL 1.0.1. Was 0x08000000L */
        -:  445:# define SSL_OP_PKCS1_CHECK_1                            0x0
        -:  446:/* Removed from OpenSSL 1.0.1. Was 0x10000000L */
        -:  447:# define SSL_OP_PKCS1_CHECK_2                            0x0
        -:  448:/* Removed from OpenSSL 1.1.0. Was 0x20000000L */
        -:  449:# define SSL_OP_NETSCAPE_CA_DN_BUG                       0x0
        -:  450:/* Removed from OpenSSL 1.1.0. Was 0x40000000L */
        -:  451:# define SSL_OP_NETSCAPE_DEMO_CIPHER_CHANGE_BUG          0x0
        -:  452:
        -:  453:/*
        -:  454: * Allow SSL_write(..., n) to return r with 0 < r < n (i.e. report success
        -:  455: * when just a single record has been written):
        -:  456: */
        -:  457:# define SSL_MODE_ENABLE_PARTIAL_WRITE       0x00000001U
        -:  458:/*
        -:  459: * Make it possible to retry SSL_write() with changed buffer location (buffer
        -:  460: * contents must stay the same!); this is not the default to avoid the
        -:  461: * misconception that non-blocking SSL_write() behaves like non-blocking
        -:  462: * write():
        -:  463: */
        -:  464:# define SSL_MODE_ACCEPT_MOVING_WRITE_BUFFER 0x00000002U
        -:  465:/*
        -:  466: * Never bother the application with retries if the transport is blocking:
        -:  467: */
        -:  468:# define SSL_MODE_AUTO_RETRY 0x00000004U
        -:  469:/* Don't attempt to automatically build certificate chain */
        -:  470:# define SSL_MODE_NO_AUTO_CHAIN 0x00000008U
        -:  471:/*
        -:  472: * Save RAM by releasing read and write buffers when they're empty. (SSL3 and
        -:  473: * TLS only.) Released buffers are freed.
        -:  474: */
        -:  475:# define SSL_MODE_RELEASE_BUFFERS 0x00000010U
        -:  476:/*
        -:  477: * Send the current time in the Random fields of the ClientHello and
        -:  478: * ServerHello records for compatibility with hypothetical implementations
        -:  479: * that require it.
        -:  480: */
        -:  481:# define SSL_MODE_SEND_CLIENTHELLO_TIME 0x00000020U
        -:  482:# define SSL_MODE_SEND_SERVERHELLO_TIME 0x00000040U
        -:  483:/*
        -:  484: * Send TLS_FALLBACK_SCSV in the ClientHello. To be set only by applications
        -:  485: * that reconnect with a downgraded protocol version; see
        -:  486: * draft-ietf-tls-downgrade-scsv-00 for details. DO NOT ENABLE THIS if your
        -:  487: * application attempts a normal handshake. Only use this in explicit
        -:  488: * fallback retries, following the guidance in
        -:  489: * draft-ietf-tls-downgrade-scsv-00.
        -:  490: */
        -:  491:# define SSL_MODE_SEND_FALLBACK_SCSV 0x00000080U
        -:  492:/*
        -:  493: * Support Asynchronous operation
        -:  494: */
        -:  495:# define SSL_MODE_ASYNC 0x00000100U
        -:  496:
        -:  497:/* Cert related flags */
        -:  498:/*
        -:  499: * Many implementations ignore some aspects of the TLS standards such as
        -:  500: * enforcing certificate chain algorithms. When this is set we enforce them.
        -:  501: */
        -:  502:# define SSL_CERT_FLAG_TLS_STRICT                0x00000001U
        -:  503:
        -:  504:/* Suite B modes, takes same values as certificate verify flags */
        -:  505:# define SSL_CERT_FLAG_SUITEB_128_LOS_ONLY       0x10000
        -:  506:/* Suite B 192 bit only mode */
        -:  507:# define SSL_CERT_FLAG_SUITEB_192_LOS            0x20000
        -:  508:/* Suite B 128 bit mode allowing 192 bit algorithms */
        -:  509:# define SSL_CERT_FLAG_SUITEB_128_LOS            0x30000
        -:  510:
        -:  511:/* Perform all sorts of protocol violations for testing purposes */
        -:  512:# define SSL_CERT_FLAG_BROKEN_PROTOCOL           0x10000000
        -:  513:
        -:  514:/* Flags for building certificate chains */
        -:  515:/* Treat any existing certificates as untrusted CAs */
        -:  516:# define SSL_BUILD_CHAIN_FLAG_UNTRUSTED          0x1
        -:  517:/* Don't include root CA in chain */
        -:  518:# define SSL_BUILD_CHAIN_FLAG_NO_ROOT            0x2
        -:  519:/* Just check certificates already there */
        -:  520:# define SSL_BUILD_CHAIN_FLAG_CHECK              0x4
        -:  521:/* Ignore verification errors */
        -:  522:# define SSL_BUILD_CHAIN_FLAG_IGNORE_ERROR       0x8
        -:  523:/* Clear verification errors from queue */
        -:  524:# define SSL_BUILD_CHAIN_FLAG_CLEAR_ERROR        0x10
        -:  525:
        -:  526:/* Flags returned by SSL_check_chain */
        -:  527:/* Certificate can be used with this session */
        -:  528:# define CERT_PKEY_VALID         0x1
        -:  529:/* Certificate can also be used for signing */
        -:  530:# define CERT_PKEY_SIGN          0x2
        -:  531:/* EE certificate signing algorithm OK */
        -:  532:# define CERT_PKEY_EE_SIGNATURE  0x10
        -:  533:/* CA signature algorithms OK */
        -:  534:# define CERT_PKEY_CA_SIGNATURE  0x20
        -:  535:/* EE certificate parameters OK */
        -:  536:# define CERT_PKEY_EE_PARAM      0x40
        -:  537:/* CA certificate parameters OK */
        -:  538:# define CERT_PKEY_CA_PARAM      0x80
        -:  539:/* Signing explicitly allowed as opposed to SHA1 fallback */
        -:  540:# define CERT_PKEY_EXPLICIT_SIGN 0x100
        -:  541:/* Client CA issuer names match (always set for server cert) */
        -:  542:# define CERT_PKEY_ISSUER_NAME   0x200
        -:  543:/* Cert type matches client types (always set for server cert) */
        -:  544:# define CERT_PKEY_CERT_TYPE     0x400
        -:  545:/* Cert chain suitable to Suite B */
        -:  546:# define CERT_PKEY_SUITEB        0x800
        -:  547:
        -:  548:# define SSL_CONF_FLAG_CMDLINE           0x1
        -:  549:# define SSL_CONF_FLAG_FILE              0x2
        -:  550:# define SSL_CONF_FLAG_CLIENT            0x4
        -:  551:# define SSL_CONF_FLAG_SERVER            0x8
        -:  552:# define SSL_CONF_FLAG_SHOW_ERRORS       0x10
        -:  553:# define SSL_CONF_FLAG_CERTIFICATE       0x20
        -:  554:# define SSL_CONF_FLAG_REQUIRE_PRIVATE   0x40
        -:  555:/* Configuration value types */
        -:  556:# define SSL_CONF_TYPE_UNKNOWN           0x0
        -:  557:# define SSL_CONF_TYPE_STRING            0x1
        -:  558:# define SSL_CONF_TYPE_FILE              0x2
        -:  559:# define SSL_CONF_TYPE_DIR               0x3
        -:  560:# define SSL_CONF_TYPE_NONE              0x4
        -:  561:
        -:  562:/* Maximum length of the application-controlled segment of a a TLSv1.3 cookie */
        -:  563:# define SSL_COOKIE_LENGTH                       4096
        -:  564:
        -:  565:/*
        -:  566: * Note: SSL[_CTX]_set_{options,mode} use |= op on the previous value, they
        -:  567: * cannot be used to clear bits.
        -:  568: */
        -:  569:
        -:  570:unsigned long SSL_CTX_get_options(const SSL_CTX *ctx);
        -:  571:unsigned long SSL_get_options(const SSL *s);
        -:  572:unsigned long SSL_CTX_clear_options(SSL_CTX *ctx, unsigned long op);
        -:  573:unsigned long SSL_clear_options(SSL *s, unsigned long op);
        -:  574:unsigned long SSL_CTX_set_options(SSL_CTX *ctx, unsigned long op);
        -:  575:unsigned long SSL_set_options(SSL *s, unsigned long op);
        -:  576:
        -:  577:# define SSL_CTX_set_mode(ctx,op) \
        -:  578:        SSL_CTX_ctrl((ctx),SSL_CTRL_MODE,(op),NULL)
        -:  579:# define SSL_CTX_clear_mode(ctx,op) \
        -:  580:        SSL_CTX_ctrl((ctx),SSL_CTRL_CLEAR_MODE,(op),NULL)
        -:  581:# define SSL_CTX_get_mode(ctx) \
        -:  582:        SSL_CTX_ctrl((ctx),SSL_CTRL_MODE,0,NULL)
        -:  583:# define SSL_clear_mode(ssl,op) \
        -:  584:        SSL_ctrl((ssl),SSL_CTRL_CLEAR_MODE,(op),NULL)
        -:  585:# define SSL_set_mode(ssl,op) \
        -:  586:        SSL_ctrl((ssl),SSL_CTRL_MODE,(op),NULL)
        -:  587:# define SSL_get_mode(ssl) \
        -:  588:        SSL_ctrl((ssl),SSL_CTRL_MODE,0,NULL)
        -:  589:# define SSL_set_mtu(ssl, mtu) \
        -:  590:        SSL_ctrl((ssl),SSL_CTRL_SET_MTU,(mtu),NULL)
        -:  591:# define DTLS_set_link_mtu(ssl, mtu) \
        -:  592:        SSL_ctrl((ssl),DTLS_CTRL_SET_LINK_MTU,(mtu),NULL)
        -:  593:# define DTLS_get_link_min_mtu(ssl) \
        -:  594:        SSL_ctrl((ssl),DTLS_CTRL_GET_LINK_MIN_MTU,0,NULL)
        -:  595:
        -:  596:# define SSL_get_secure_renegotiation_support(ssl) \
        -:  597:        SSL_ctrl((ssl), SSL_CTRL_GET_RI_SUPPORT, 0, NULL)
        -:  598:
        -:  599:# ifndef OPENSSL_NO_HEARTBEATS
        -:  600:#  define SSL_heartbeat(ssl) \
        -:  601:        SSL_ctrl((ssl),SSL_CTRL_DTLS_EXT_SEND_HEARTBEAT,0,NULL)
        -:  602:# endif
        -:  603:
        -:  604:# define SSL_CTX_set_cert_flags(ctx,op) \
        -:  605:        SSL_CTX_ctrl((ctx),SSL_CTRL_CERT_FLAGS,(op),NULL)
        -:  606:# define SSL_set_cert_flags(s,op) \
        -:  607:        SSL_ctrl((s),SSL_CTRL_CERT_FLAGS,(op),NULL)
        -:  608:# define SSL_CTX_clear_cert_flags(ctx,op) \
        -:  609:        SSL_CTX_ctrl((ctx),SSL_CTRL_CLEAR_CERT_FLAGS,(op),NULL)
        -:  610:# define SSL_clear_cert_flags(s,op) \
        -:  611:        SSL_ctrl((s),SSL_CTRL_CLEAR_CERT_FLAGS,(op),NULL)
        -:  612:
        -:  613:void SSL_CTX_set_msg_callback(SSL_CTX *ctx,
        -:  614:                              void (*cb) (int write_p, int version,
        -:  615:                                          int content_type, const void *buf,
        -:  616:                                          size_t len, SSL *ssl, void *arg));
        -:  617:void SSL_set_msg_callback(SSL *ssl,
        -:  618:                          void (*cb) (int write_p, int version,
        -:  619:                                      int content_type, const void *buf,
        -:  620:                                      size_t len, SSL *ssl, void *arg));
        -:  621:# define SSL_CTX_set_msg_callback_arg(ctx, arg) SSL_CTX_ctrl((ctx), SSL_CTRL_SET_MSG_CALLBACK_ARG, 0, (arg))
        -:  622:# define SSL_set_msg_callback_arg(ssl, arg) SSL_ctrl((ssl), SSL_CTRL_SET_MSG_CALLBACK_ARG, 0, (arg))
        -:  623:
        -:  624:# define SSL_get_extms_support(s) \
        -:  625:        SSL_ctrl((s),SSL_CTRL_GET_EXTMS_SUPPORT,0,NULL)
        -:  626:
        -:  627:# ifndef OPENSSL_NO_SRP
        -:  628:
        -:  629:/* see tls_srp.c */
        -:  630:__owur int SSL_SRP_CTX_init(SSL *s);
        -:  631:__owur int SSL_CTX_SRP_CTX_init(SSL_CTX *ctx);
        -:  632:int SSL_SRP_CTX_free(SSL *ctx);
        -:  633:int SSL_CTX_SRP_CTX_free(SSL_CTX *ctx);
        -:  634:__owur int SSL_srp_server_param_with_username(SSL *s, int *ad);
        -:  635:__owur int SRP_Calc_A_param(SSL *s);
        -:  636:
        -:  637:# endif
        -:  638:
        -:  639:/* 100k max cert list */
        -:  640:# define SSL_MAX_CERT_LIST_DEFAULT 1024*100
        -:  641:
        -:  642:# define SSL_SESSION_CACHE_MAX_SIZE_DEFAULT      (1024*20)
        -:  643:
        -:  644:/*
        -:  645: * This callback type is used inside SSL_CTX, SSL, and in the functions that
        -:  646: * set them. It is used to override the generation of SSL/TLS session IDs in
        -:  647: * a server. Return value should be zero on an error, non-zero to proceed.
        -:  648: * Also, callbacks should themselves check if the id they generate is unique
        -:  649: * otherwise the SSL handshake will fail with an error - callbacks can do
        -:  650: * this using the 'ssl' value they're passed by;
        -:  651: * SSL_has_matching_session_id(ssl, id, *id_len) The length value passed in
        -:  652: * is set at the maximum size the session ID can be. In SSLv3/TLSv1 it is 32
        -:  653: * bytes. The callback can alter this length to be less if desired. It is
        -:  654: * also an error for the callback to set the size to zero.
        -:  655: */
        -:  656:typedef int (*GEN_SESSION_CB) (SSL *ssl, unsigned char *id,
        -:  657:                               unsigned int *id_len);
        -:  658:
        -:  659:# define SSL_SESS_CACHE_OFF                      0x0000
        -:  660:# define SSL_SESS_CACHE_CLIENT                   0x0001
        -:  661:# define SSL_SESS_CACHE_SERVER                   0x0002
        -:  662:# define SSL_SESS_CACHE_BOTH     (SSL_SESS_CACHE_CLIENT|SSL_SESS_CACHE_SERVER)
        -:  663:# define SSL_SESS_CACHE_NO_AUTO_CLEAR            0x0080
        -:  664:/* enough comments already ... see SSL_CTX_set_session_cache_mode(3) */
        -:  665:# define SSL_SESS_CACHE_NO_INTERNAL_LOOKUP       0x0100
        -:  666:# define SSL_SESS_CACHE_NO_INTERNAL_STORE        0x0200
        -:  667:# define SSL_SESS_CACHE_NO_INTERNAL \
        -:  668:        (SSL_SESS_CACHE_NO_INTERNAL_LOOKUP|SSL_SESS_CACHE_NO_INTERNAL_STORE)
        -:  669:
        -:  670:LHASH_OF(SSL_SESSION) *SSL_CTX_sessions(SSL_CTX *ctx);
        -:  671:# define SSL_CTX_sess_number(ctx) \
        -:  672:        SSL_CTX_ctrl(ctx,SSL_CTRL_SESS_NUMBER,0,NULL)
        -:  673:# define SSL_CTX_sess_connect(ctx) \
        -:  674:        SSL_CTX_ctrl(ctx,SSL_CTRL_SESS_CONNECT,0,NULL)
        -:  675:# define SSL_CTX_sess_connect_good(ctx) \
        -:  676:        SSL_CTX_ctrl(ctx,SSL_CTRL_SESS_CONNECT_GOOD,0,NULL)
        -:  677:# define SSL_CTX_sess_connect_renegotiate(ctx) \
        -:  678:        SSL_CTX_ctrl(ctx,SSL_CTRL_SESS_CONNECT_RENEGOTIATE,0,NULL)
        -:  679:# define SSL_CTX_sess_accept(ctx) \
        -:  680:        SSL_CTX_ctrl(ctx,SSL_CTRL_SESS_ACCEPT,0,NULL)
        -:  681:# define SSL_CTX_sess_accept_renegotiate(ctx) \
        -:  682:        SSL_CTX_ctrl(ctx,SSL_CTRL_SESS_ACCEPT_RENEGOTIATE,0,NULL)
        -:  683:# define SSL_CTX_sess_accept_good(ctx) \
        -:  684:        SSL_CTX_ctrl(ctx,SSL_CTRL_SESS_ACCEPT_GOOD,0,NULL)
        -:  685:# define SSL_CTX_sess_hits(ctx) \
        -:  686:        SSL_CTX_ctrl(ctx,SSL_CTRL_SESS_HIT,0,NULL)
        -:  687:# define SSL_CTX_sess_cb_hits(ctx) \
        -:  688:        SSL_CTX_ctrl(ctx,SSL_CTRL_SESS_CB_HIT,0,NULL)
        -:  689:# define SSL_CTX_sess_misses(ctx) \
        -:  690:        SSL_CTX_ctrl(ctx,SSL_CTRL_SESS_MISSES,0,NULL)
        -:  691:# define SSL_CTX_sess_timeouts(ctx) \
        -:  692:        SSL_CTX_ctrl(ctx,SSL_CTRL_SESS_TIMEOUTS,0,NULL)
        -:  693:# define SSL_CTX_sess_cache_full(ctx) \
        -:  694:        SSL_CTX_ctrl(ctx,SSL_CTRL_SESS_CACHE_FULL,0,NULL)
        -:  695:
        -:  696:void SSL_CTX_sess_set_new_cb(SSL_CTX *ctx,
        -:  697:                             int (*new_session_cb) (struct ssl_st *ssl,
        -:  698:                                                    SSL_SESSION *sess));
        -:  699:int (*SSL_CTX_sess_get_new_cb(SSL_CTX *ctx)) (struct ssl_st *ssl,
        -:  700:                                              SSL_SESSION *sess);
        -:  701:void SSL_CTX_sess_set_remove_cb(SSL_CTX *ctx,
        -:  702:                                void (*remove_session_cb) (struct ssl_ctx_st
        -:  703:                                                           *ctx,
        -:  704:                                                           SSL_SESSION *sess));
        -:  705:void (*SSL_CTX_sess_get_remove_cb(SSL_CTX *ctx)) (struct ssl_ctx_st *ctx,
        -:  706:                                                  SSL_SESSION *sess);
        -:  707:void SSL_CTX_sess_set_get_cb(SSL_CTX *ctx,
        -:  708:                             SSL_SESSION *(*get_session_cb) (struct ssl_st
        -:  709:                                                             *ssl,
        -:  710:                                                             const unsigned char
        -:  711:                                                             *data, int len,
        -:  712:                                                             int *copy));
        -:  713:SSL_SESSION *(*SSL_CTX_sess_get_get_cb(SSL_CTX *ctx)) (struct ssl_st *ssl,
        -:  714:                                                       const unsigned char *data,
        -:  715:                                                       int len, int *copy);
        -:  716:void SSL_CTX_set_info_callback(SSL_CTX *ctx,
        -:  717:                               void (*cb) (const SSL *ssl, int type, int val));
        -:  718:void (*SSL_CTX_get_info_callback(SSL_CTX *ctx)) (const SSL *ssl, int type,
        -:  719:                                                 int val);
        -:  720:void SSL_CTX_set_client_cert_cb(SSL_CTX *ctx,
        -:  721:                                int (*client_cert_cb) (SSL *ssl, X509 **x509,
        -:  722:                                                       EVP_PKEY **pkey));
        -:  723:int (*SSL_CTX_get_client_cert_cb(SSL_CTX *ctx)) (SSL *ssl, X509 **x509,
        -:  724:                                                 EVP_PKEY **pkey);
        -:  725:# ifndef OPENSSL_NO_ENGINE
        -:  726:__owur int SSL_CTX_set_client_cert_engine(SSL_CTX *ctx, ENGINE *e);
        -:  727:# endif
        -:  728:void SSL_CTX_set_cookie_generate_cb(SSL_CTX *ctx,
        -:  729:                                    int (*app_gen_cookie_cb) (SSL *ssl,
        -:  730:                                                              unsigned char
        -:  731:                                                              *cookie,
        -:  732:                                                              unsigned int
        -:  733:                                                              *cookie_len));
        -:  734:void SSL_CTX_set_cookie_verify_cb(SSL_CTX *ctx,
        -:  735:                                  int (*app_verify_cookie_cb) (SSL *ssl,
        -:  736:                                                               const unsigned
        -:  737:                                                               char *cookie,
        -:  738:                                                               unsigned int
        -:  739:                                                               cookie_len));
        -:  740:
        -:  741:void SSL_CTX_set_stateless_cookie_generate_cb(
        -:  742:    SSL_CTX *ctx,
        -:  743:    int (*gen_stateless_cookie_cb) (SSL *ssl,
        -:  744:                                    unsigned char *cookie,
        -:  745:                                    size_t *cookie_len));
        -:  746:void SSL_CTX_set_stateless_cookie_verify_cb(
        -:  747:    SSL_CTX *ctx,
        -:  748:    int (*verify_stateless_cookie_cb) (SSL *ssl,
        -:  749:                                       const unsigned char *cookie,
        -:  750:                                       size_t cookie_len));
        -:  751:# ifndef OPENSSL_NO_NEXTPROTONEG
        -:  752:
        -:  753:typedef int (*SSL_CTX_npn_advertised_cb_func)(SSL *ssl,
        -:  754:                                              const unsigned char **out,
        -:  755:                                              unsigned int *outlen,
        -:  756:                                              void *arg);
        -:  757:void SSL_CTX_set_next_protos_advertised_cb(SSL_CTX *s,
        -:  758:                                           SSL_CTX_npn_advertised_cb_func cb,
        -:  759:                                           void *arg);
        -:  760:#  define SSL_CTX_set_npn_advertised_cb SSL_CTX_set_next_protos_advertised_cb
        -:  761:
        -:  762:typedef int (*SSL_CTX_npn_select_cb_func)(SSL *s,
        -:  763:                                          unsigned char **out,
        -:  764:                                          unsigned char *outlen,
        -:  765:                                          const unsigned char *in,
        -:  766:                                          unsigned int inlen,
        -:  767:                                          void *arg);
        -:  768:void SSL_CTX_set_next_proto_select_cb(SSL_CTX *s,
        -:  769:                                      SSL_CTX_npn_select_cb_func cb,
        -:  770:                                      void *arg);
        -:  771:#  define SSL_CTX_set_npn_select_cb SSL_CTX_set_next_proto_select_cb
        -:  772:
        -:  773:void SSL_get0_next_proto_negotiated(const SSL *s, const unsigned char **data,
        -:  774:                                    unsigned *len);
        -:  775:#  define SSL_get0_npn_negotiated SSL_get0_next_proto_negotiated
        -:  776:# endif
        -:  777:
        -:  778:__owur int SSL_select_next_proto(unsigned char **out, unsigned char *outlen,
        -:  779:                                 const unsigned char *in, unsigned int inlen,
        -:  780:                                 const unsigned char *client,
        -:  781:                                 unsigned int client_len);
        -:  782:
        -:  783:# define OPENSSL_NPN_UNSUPPORTED 0
        -:  784:# define OPENSSL_NPN_NEGOTIATED  1
        -:  785:# define OPENSSL_NPN_NO_OVERLAP  2
        -:  786:
        -:  787:__owur int SSL_CTX_set_alpn_protos(SSL_CTX *ctx, const unsigned char *protos,
        -:  788:                                   unsigned int protos_len);
        -:  789:__owur int SSL_set_alpn_protos(SSL *ssl, const unsigned char *protos,
        -:  790:                               unsigned int protos_len);
        -:  791:typedef int (*SSL_CTX_alpn_select_cb_func)(SSL *ssl,
        -:  792:                                           const unsigned char **out,
        -:  793:                                           unsigned char *outlen,
        -:  794:                                           const unsigned char *in,
        -:  795:                                           unsigned int inlen,
        -:  796:                                           void *arg);
        -:  797:void SSL_CTX_set_alpn_select_cb(SSL_CTX *ctx,
        -:  798:                                SSL_CTX_alpn_select_cb_func cb,
        -:  799:                                void *arg);
        -:  800:void SSL_get0_alpn_selected(const SSL *ssl, const unsigned char **data,
        -:  801:                            unsigned int *len);
        -:  802:
        -:  803:# ifndef OPENSSL_NO_PSK
        -:  804:/*
        -:  805: * the maximum length of the buffer given to callbacks containing the
        -:  806: * resulting identity/psk
        -:  807: */
        -:  808:#  define PSK_MAX_IDENTITY_LEN 128
        -:  809:#  define PSK_MAX_PSK_LEN 256
        -:  810:typedef unsigned int (*SSL_psk_client_cb_func)(SSL *ssl,
        -:  811:                                               const char *hint,
        -:  812:                                               char *identity,
        -:  813:                                               unsigned int max_identity_len,
        -:  814:                                               unsigned char *psk,
        -:  815:                                               unsigned int max_psk_len);
        -:  816:void SSL_CTX_set_psk_client_callback(SSL_CTX *ctx, SSL_psk_client_cb_func cb);
        -:  817:void SSL_set_psk_client_callback(SSL *ssl, SSL_psk_client_cb_func cb);
        -:  818:
        -:  819:typedef unsigned int (*SSL_psk_server_cb_func)(SSL *ssl,
        -:  820:                                               const char *identity,
        -:  821:                                               unsigned char *psk,
        -:  822:                                               unsigned int max_psk_len);
        -:  823:void SSL_CTX_set_psk_server_callback(SSL_CTX *ctx, SSL_psk_server_cb_func cb);
        -:  824:void SSL_set_psk_server_callback(SSL *ssl, SSL_psk_server_cb_func cb);
        -:  825:
        -:  826:__owur int SSL_CTX_use_psk_identity_hint(SSL_CTX *ctx, const char *identity_hint);
        -:  827:__owur int SSL_use_psk_identity_hint(SSL *s, const char *identity_hint);
        -:  828:const char *SSL_get_psk_identity_hint(const SSL *s);
        -:  829:const char *SSL_get_psk_identity(const SSL *s);
        -:  830:# endif
        -:  831:
        -:  832:typedef int (*SSL_psk_find_session_cb_func)(SSL *ssl,
        -:  833:                                            const unsigned char *identity,
        -:  834:                                            size_t identity_len,
        -:  835:                                            SSL_SESSION **sess);
        -:  836:typedef int (*SSL_psk_use_session_cb_func)(SSL *ssl, const EVP_MD *md,
        -:  837:                                           const unsigned char **id,
        -:  838:                                           size_t *idlen,
        -:  839:                                           SSL_SESSION **sess);
        -:  840:
        -:  841:void SSL_set_psk_find_session_callback(SSL *s, SSL_psk_find_session_cb_func cb);
        -:  842:void SSL_CTX_set_psk_find_session_callback(SSL_CTX *ctx,
        -:  843:                                           SSL_psk_find_session_cb_func cb);
        -:  844:void SSL_set_psk_use_session_callback(SSL *s, SSL_psk_use_session_cb_func cb);
        -:  845:void SSL_CTX_set_psk_use_session_callback(SSL_CTX *ctx,
        -:  846:                                          SSL_psk_use_session_cb_func cb);
        -:  847:
        -:  848:/* Register callbacks to handle custom TLS Extensions for client or server. */
        -:  849:
        -:  850:__owur int SSL_CTX_has_client_custom_ext(const SSL_CTX *ctx,
        -:  851:                                         unsigned int ext_type);
        -:  852:
        -:  853:__owur int SSL_CTX_add_client_custom_ext(SSL_CTX *ctx,
        -:  854:                                         unsigned int ext_type,
        -:  855:                                         custom_ext_add_cb add_cb,
        -:  856:                                         custom_ext_free_cb free_cb,
        -:  857:                                         void *add_arg,
        -:  858:                                         custom_ext_parse_cb parse_cb,
        -:  859:                                         void *parse_arg);
        -:  860:
        -:  861:__owur int SSL_CTX_add_server_custom_ext(SSL_CTX *ctx,
        -:  862:                                         unsigned int ext_type,
        -:  863:                                         custom_ext_add_cb add_cb,
        -:  864:                                         custom_ext_free_cb free_cb,
        -:  865:                                         void *add_arg,
        -:  866:                                         custom_ext_parse_cb parse_cb,
        -:  867:                                         void *parse_arg);
        -:  868:
        -:  869:__owur int SSL_CTX_add_custom_ext(SSL_CTX *ctx, unsigned int ext_type,
        -:  870:                                  unsigned int context,
        -:  871:                                  SSL_custom_ext_add_cb_ex add_cb,
        -:  872:                                  SSL_custom_ext_free_cb_ex free_cb,
        -:  873:                                  void *add_arg,
        -:  874:                                  SSL_custom_ext_parse_cb_ex parse_cb,
        -:  875:                                  void *parse_arg);
        -:  876:
        -:  877:__owur int SSL_extension_supported(unsigned int ext_type);
        -:  878:
        -:  879:# define SSL_NOTHING            1
        -:  880:# define SSL_WRITING            2
        -:  881:# define SSL_READING            3
        -:  882:# define SSL_X509_LOOKUP        4
        -:  883:# define SSL_ASYNC_PAUSED       5
        -:  884:# define SSL_ASYNC_NO_JOBS      6
        -:  885:# define SSL_CLIENT_HELLO_CB    7
        -:  886:
        -:  887:/* These will only be used when doing non-blocking IO */
        -:  888:# define SSL_want_nothing(s)         (SSL_want(s) == SSL_NOTHING)
        -:  889:# define SSL_want_read(s)            (SSL_want(s) == SSL_READING)
        -:  890:# define SSL_want_write(s)           (SSL_want(s) == SSL_WRITING)
        -:  891:# define SSL_want_x509_lookup(s)     (SSL_want(s) == SSL_X509_LOOKUP)
        -:  892:# define SSL_want_async(s)           (SSL_want(s) == SSL_ASYNC_PAUSED)
        -:  893:# define SSL_want_async_job(s)       (SSL_want(s) == SSL_ASYNC_NO_JOBS)
        -:  894:# define SSL_want_client_hello_cb(s) (SSL_want(s) == SSL_CLIENT_HELLO_CB)
        -:  895:
        -:  896:# define SSL_MAC_FLAG_READ_MAC_STREAM 1
        -:  897:# define SSL_MAC_FLAG_WRITE_MAC_STREAM 2
        -:  898:
        -:  899:/*
        -:  900: * A callback for logging out TLS key material. This callback should log out
        -:  901: * |line| followed by a newline.
        -:  902: */
        -:  903:typedef void (*SSL_CTX_keylog_cb_func)(const SSL *ssl, const char *line);
        -:  904:
        -:  905:/*
        -:  906: * SSL_CTX_set_keylog_callback configures a callback to log key material. This
        -:  907: * is intended for debugging use with tools like Wireshark. The cb function
        -:  908: * should log line followed by a newline.
        -:  909: */
        -:  910:void SSL_CTX_set_keylog_callback(SSL_CTX *ctx, SSL_CTX_keylog_cb_func cb);
        -:  911:
        -:  912:/*
        -:  913: * SSL_CTX_get_keylog_callback returns the callback configured by
        -:  914: * SSL_CTX_set_keylog_callback.
        -:  915: */
        -:  916:SSL_CTX_keylog_cb_func SSL_CTX_get_keylog_callback(const SSL_CTX *ctx);
        -:  917:
        -:  918:int SSL_CTX_set_max_early_data(SSL_CTX *ctx, uint32_t max_early_data);
        -:  919:uint32_t SSL_CTX_get_max_early_data(const SSL_CTX *ctx);
        -:  920:int SSL_set_max_early_data(SSL *s, uint32_t max_early_data);
        -:  921:uint32_t SSL_get_max_early_data(const SSL *s);
        -:  922:int SSL_CTX_set_recv_max_early_data(SSL_CTX *ctx, uint32_t recv_max_early_data);
        -:  923:uint32_t SSL_CTX_get_recv_max_early_data(const SSL_CTX *ctx);
        -:  924:int SSL_set_recv_max_early_data(SSL *s, uint32_t recv_max_early_data);
        -:  925:uint32_t SSL_get_recv_max_early_data(const SSL *s);
        -:  926:
        -:  927:#ifdef __cplusplus
        -:  928:}
        -:  929:#endif
        -:  930:
        -:  931:# include <openssl/ssl2.h>
        -:  932:# include <openssl/ssl3.h>
        -:  933:# include <openssl/tls1.h>      /* This is mostly sslv3 with a few tweaks */
        -:  934:# include <openssl/dtls1.h>     /* Datagram TLS */
        -:  935:# include <openssl/srtp.h>      /* Support for the use_srtp extension */
        -:  936:
        -:  937:#ifdef  __cplusplus
        -:  938:extern "C" {
        -:  939:#endif
        -:  940:
        -:  941:/*
        -:  942: * These need to be after the above set of includes due to a compiler bug
        -:  943: * in VisualStudio 2015
        -:  944: */
        -:  945:DEFINE_STACK_OF_CONST(SSL_CIPHER)
    #####:  946:DEFINE_STACK_OF(SSL_COMP)
------------------
sk_SSL_COMP_value:
    #####:  946:DEFINE_STACK_OF(SSL_COMP)
------------------
sk_SSL_COMP_num:
    #####:  946:DEFINE_STACK_OF(SSL_COMP)
------------------
        -:  947:
        -:  948:/* compatibility */
        -:  949:# define SSL_set_app_data(s,arg)         (SSL_set_ex_data(s,0,(char *)(arg)))
        -:  950:# define SSL_get_app_data(s)             (SSL_get_ex_data(s,0))
        -:  951:# define SSL_SESSION_set_app_data(s,a)   (SSL_SESSION_set_ex_data(s,0, \
        -:  952:                                                                  (char *)(a)))
        -:  953:# define SSL_SESSION_get_app_data(s)     (SSL_SESSION_get_ex_data(s,0))
        -:  954:# define SSL_CTX_get_app_data(ctx)       (SSL_CTX_get_ex_data(ctx,0))
        -:  955:# define SSL_CTX_set_app_data(ctx,arg)   (SSL_CTX_set_ex_data(ctx,0, \
        -:  956:                                                              (char *)(arg)))
        -:  957:DEPRECATEDIN_1_1_0(void SSL_set_debug(SSL *s, int debug))
        -:  958:
        -:  959:/* TLSv1.3 KeyUpdate message types */
        -:  960:/* -1 used so that this is an invalid value for the on-the-wire protocol */
        -:  961:#define SSL_KEY_UPDATE_NONE             -1
        -:  962:/* Values as defined for the on-the-wire protocol */
        -:  963:#define SSL_KEY_UPDATE_NOT_REQUESTED     0
        -:  964:#define SSL_KEY_UPDATE_REQUESTED         1
        -:  965:
        -:  966:/*
        -:  967: * The valid handshake states (one for each type message sent and one for each
        -:  968: * type of message received). There are also two "special" states:
        -:  969: * TLS = TLS or DTLS state
        -:  970: * DTLS = DTLS specific state
        -:  971: * CR/SR = Client Read/Server Read
        -:  972: * CW/SW = Client Write/Server Write
        -:  973: *
        -:  974: * The "special" states are:
        -:  975: * TLS_ST_BEFORE = No handshake has been initiated yet
        -:  976: * TLS_ST_OK = A handshake has been successfully completed
        -:  977: */
        -:  978:typedef enum {
        -:  979:    TLS_ST_BEFORE,
        -:  980:    TLS_ST_OK,
        -:  981:    DTLS_ST_CR_HELLO_VERIFY_REQUEST,
        -:  982:    TLS_ST_CR_SRVR_HELLO,
        -:  983:    TLS_ST_CR_CERT,
        -:  984:    TLS_ST_CR_CERT_STATUS,
        -:  985:    TLS_ST_CR_KEY_EXCH,
        -:  986:    TLS_ST_CR_CERT_REQ,
        -:  987:    TLS_ST_CR_SRVR_DONE,
        -:  988:    TLS_ST_CR_SESSION_TICKET,
        -:  989:    TLS_ST_CR_CHANGE,
        -:  990:    TLS_ST_CR_FINISHED,
        -:  991:    TLS_ST_CW_CLNT_HELLO,
        -:  992:    TLS_ST_CW_CERT,
        -:  993:    TLS_ST_CW_KEY_EXCH,
        -:  994:    TLS_ST_CW_CERT_VRFY,
        -:  995:    TLS_ST_CW_CHANGE,
        -:  996:    TLS_ST_CW_NEXT_PROTO,
        -:  997:    TLS_ST_CW_FINISHED,
        -:  998:    TLS_ST_SW_HELLO_REQ,
        -:  999:    TLS_ST_SR_CLNT_HELLO,
        -: 1000:    DTLS_ST_SW_HELLO_VERIFY_REQUEST,
        -: 1001:    TLS_ST_SW_SRVR_HELLO,
        -: 1002:    TLS_ST_SW_CERT,
        -: 1003:    TLS_ST_SW_KEY_EXCH,
        -: 1004:    TLS_ST_SW_CERT_REQ,
        -: 1005:    TLS_ST_SW_SRVR_DONE,
        -: 1006:    TLS_ST_SR_CERT,
        -: 1007:    TLS_ST_SR_KEY_EXCH,
        -: 1008:    TLS_ST_SR_CERT_VRFY,
        -: 1009:    TLS_ST_SR_NEXT_PROTO,
        -: 1010:    TLS_ST_SR_CHANGE,
        -: 1011:    TLS_ST_SR_FINISHED,
        -: 1012:    TLS_ST_SW_SESSION_TICKET,
        -: 1013:    TLS_ST_SW_CERT_STATUS,
        -: 1014:    TLS_ST_SW_CHANGE,
        -: 1015:    TLS_ST_SW_FINISHED,
        -: 1016:    TLS_ST_SW_ENCRYPTED_EXTENSIONS,
        -: 1017:    TLS_ST_CR_ENCRYPTED_EXTENSIONS,
        -: 1018:    TLS_ST_CR_CERT_VRFY,
        -: 1019:    TLS_ST_SW_CERT_VRFY,
        -: 1020:    TLS_ST_CR_HELLO_REQ,
        -: 1021:    TLS_ST_SW_KEY_UPDATE,
        -: 1022:    TLS_ST_CW_KEY_UPDATE,
        -: 1023:    TLS_ST_SR_KEY_UPDATE,
        -: 1024:    TLS_ST_CR_KEY_UPDATE,
        -: 1025:    TLS_ST_EARLY_DATA,
        -: 1026:    TLS_ST_PENDING_EARLY_DATA_END,
        -: 1027:    TLS_ST_CW_END_OF_EARLY_DATA,
        -: 1028:    TLS_ST_SR_END_OF_EARLY_DATA
        -: 1029:} OSSL_HANDSHAKE_STATE;
        -: 1030:
        -: 1031:/*
        -: 1032: * Most of the following state values are no longer used and are defined to be
        -: 1033: * the closest equivalent value in the current state machine code. Not all
        -: 1034: * defines have an equivalent and are set to a dummy value (-1). SSL_ST_CONNECT
        -: 1035: * and SSL_ST_ACCEPT are still in use in the definition of SSL_CB_ACCEPT_LOOP,
        -: 1036: * SSL_CB_ACCEPT_EXIT, SSL_CB_CONNECT_LOOP and SSL_CB_CONNECT_EXIT.
        -: 1037: */
        -: 1038:
        -: 1039:# define SSL_ST_CONNECT                  0x1000
        -: 1040:# define SSL_ST_ACCEPT                   0x2000
        -: 1041:
        -: 1042:# define SSL_ST_MASK                     0x0FFF
        -: 1043:
        -: 1044:# define SSL_CB_LOOP                     0x01
        -: 1045:# define SSL_CB_EXIT                     0x02
        -: 1046:# define SSL_CB_READ                     0x04
        -: 1047:# define SSL_CB_WRITE                    0x08
        -: 1048:# define SSL_CB_ALERT                    0x4000/* used in callback */
        -: 1049:# define SSL_CB_READ_ALERT               (SSL_CB_ALERT|SSL_CB_READ)
        -: 1050:# define SSL_CB_WRITE_ALERT              (SSL_CB_ALERT|SSL_CB_WRITE)
        -: 1051:# define SSL_CB_ACCEPT_LOOP              (SSL_ST_ACCEPT|SSL_CB_LOOP)
        -: 1052:# define SSL_CB_ACCEPT_EXIT              (SSL_ST_ACCEPT|SSL_CB_EXIT)
        -: 1053:# define SSL_CB_CONNECT_LOOP             (SSL_ST_CONNECT|SSL_CB_LOOP)
        -: 1054:# define SSL_CB_CONNECT_EXIT             (SSL_ST_CONNECT|SSL_CB_EXIT)
        -: 1055:# define SSL_CB_HANDSHAKE_START          0x10
        -: 1056:# define SSL_CB_HANDSHAKE_DONE           0x20
        -: 1057:
        -: 1058:/* Is the SSL_connection established? */
        -: 1059:# define SSL_in_connect_init(a)          (SSL_in_init(a) && !SSL_is_server(a))
        -: 1060:# define SSL_in_accept_init(a)           (SSL_in_init(a) && SSL_is_server(a))
        -: 1061:int SSL_in_init(const SSL *s);
        -: 1062:int SSL_in_before(const SSL *s);
        -: 1063:int SSL_is_init_finished(const SSL *s);
        -: 1064:
        -: 1065:/*
        -: 1066: * The following 3 states are kept in ssl->rlayer.rstate when reads fail, you
        -: 1067: * should not need these
        -: 1068: */
        -: 1069:# define SSL_ST_READ_HEADER                      0xF0
        -: 1070:# define SSL_ST_READ_BODY                        0xF1
        -: 1071:# define SSL_ST_READ_DONE                        0xF2
        -: 1072:
        -: 1073:/*-
        -: 1074: * Obtain latest Finished message
        -: 1075: *   -- that we sent (SSL_get_finished)
        -: 1076: *   -- that we expected from peer (SSL_get_peer_finished).
        -: 1077: * Returns length (0 == no Finished so far), copies up to 'count' bytes.
        -: 1078: */
        -: 1079:size_t SSL_get_finished(const SSL *s, void *buf, size_t count);
        -: 1080:size_t SSL_get_peer_finished(const SSL *s, void *buf, size_t count);
        -: 1081:
        -: 1082:/*
        -: 1083: * use either SSL_VERIFY_NONE or SSL_VERIFY_PEER, the last 3 options are
        -: 1084: * 'ored' with SSL_VERIFY_PEER if they are desired
        -: 1085: */
        -: 1086:# define SSL_VERIFY_NONE                 0x00
        -: 1087:# define SSL_VERIFY_PEER                 0x01
        -: 1088:# define SSL_VERIFY_FAIL_IF_NO_PEER_CERT 0x02
        -: 1089:# define SSL_VERIFY_CLIENT_ONCE          0x04
        -: 1090:# define SSL_VERIFY_POST_HANDSHAKE       0x08
        -: 1091:
        -: 1092:# if OPENSSL_API_COMPAT < 0x10100000L
        -: 1093:#  define OpenSSL_add_ssl_algorithms()   SSL_library_init()
        -: 1094:#  define SSLeay_add_ssl_algorithms()    SSL_library_init()
        -: 1095:# endif
        -: 1096:
        -: 1097:/* More backward compatibility */
        -: 1098:# define SSL_get_cipher(s) \
        -: 1099:                SSL_CIPHER_get_name(SSL_get_current_cipher(s))
        -: 1100:# define SSL_get_cipher_bits(s,np) \
        -: 1101:                SSL_CIPHER_get_bits(SSL_get_current_cipher(s),np)
        -: 1102:# define SSL_get_cipher_version(s) \
        -: 1103:                SSL_CIPHER_get_version(SSL_get_current_cipher(s))
        -: 1104:# define SSL_get_cipher_name(s) \
        -: 1105:                SSL_CIPHER_get_name(SSL_get_current_cipher(s))
        -: 1106:# define SSL_get_time(a)         SSL_SESSION_get_time(a)
        -: 1107:# define SSL_set_time(a,b)       SSL_SESSION_set_time((a),(b))
        -: 1108:# define SSL_get_timeout(a)      SSL_SESSION_get_timeout(a)
        -: 1109:# define SSL_set_timeout(a,b)    SSL_SESSION_set_timeout((a),(b))
        -: 1110:
        -: 1111:# define d2i_SSL_SESSION_bio(bp,s_id) ASN1_d2i_bio_of(SSL_SESSION,SSL_SESSION_new,d2i_SSL_SESSION,bp,s_id)
        -: 1112:# define i2d_SSL_SESSION_bio(bp,s_id) ASN1_i2d_bio_of(SSL_SESSION,i2d_SSL_SESSION,bp,s_id)
        -: 1113:
        -: 1114:DECLARE_PEM_rw(SSL_SESSION, SSL_SESSION)
        -: 1115:# define SSL_AD_REASON_OFFSET            1000/* offset to get SSL_R_... value
        -: 1116:                                              * from SSL_AD_... */
        -: 1117:/* These alert types are for SSLv3 and TLSv1 */
        -: 1118:# define SSL_AD_CLOSE_NOTIFY             SSL3_AD_CLOSE_NOTIFY
        -: 1119:/* fatal */
        -: 1120:# define SSL_AD_UNEXPECTED_MESSAGE       SSL3_AD_UNEXPECTED_MESSAGE
        -: 1121:/* fatal */
        -: 1122:# define SSL_AD_BAD_RECORD_MAC           SSL3_AD_BAD_RECORD_MAC
        -: 1123:# define SSL_AD_DECRYPTION_FAILED        TLS1_AD_DECRYPTION_FAILED
        -: 1124:# define SSL_AD_RECORD_OVERFLOW          TLS1_AD_RECORD_OVERFLOW
        -: 1125:/* fatal */
        -: 1126:# define SSL_AD_DECOMPRESSION_FAILURE    SSL3_AD_DECOMPRESSION_FAILURE
        -: 1127:/* fatal */
        -: 1128:# define SSL_AD_HANDSHAKE_FAILURE        SSL3_AD_HANDSHAKE_FAILURE
        -: 1129:/* Not for TLS */
        -: 1130:# define SSL_AD_NO_CERTIFICATE           SSL3_AD_NO_CERTIFICATE
        -: 1131:# define SSL_AD_BAD_CERTIFICATE          SSL3_AD_BAD_CERTIFICATE
        -: 1132:# define SSL_AD_UNSUPPORTED_CERTIFICATE  SSL3_AD_UNSUPPORTED_CERTIFICATE
        -: 1133:# define SSL_AD_CERTIFICATE_REVOKED      SSL3_AD_CERTIFICATE_REVOKED
        -: 1134:# define SSL_AD_CERTIFICATE_EXPIRED      SSL3_AD_CERTIFICATE_EXPIRED
        -: 1135:# define SSL_AD_CERTIFICATE_UNKNOWN      SSL3_AD_CERTIFICATE_UNKNOWN
        -: 1136:/* fatal */
        -: 1137:# define SSL_AD_ILLEGAL_PARAMETER        SSL3_AD_ILLEGAL_PARAMETER
        -: 1138:/* fatal */
        -: 1139:# define SSL_AD_UNKNOWN_CA               TLS1_AD_UNKNOWN_CA
        -: 1140:/* fatal */
        -: 1141:# define SSL_AD_ACCESS_DENIED            TLS1_AD_ACCESS_DENIED
        -: 1142:/* fatal */
        -: 1143:# define SSL_AD_DECODE_ERROR             TLS1_AD_DECODE_ERROR
        -: 1144:# define SSL_AD_DECRYPT_ERROR            TLS1_AD_DECRYPT_ERROR
        -: 1145:/* fatal */
        -: 1146:# define SSL_AD_EXPORT_RESTRICTION       TLS1_AD_EXPORT_RESTRICTION
        -: 1147:/* fatal */
        -: 1148:# define SSL_AD_PROTOCOL_VERSION         TLS1_AD_PROTOCOL_VERSION
        -: 1149:/* fatal */
        -: 1150:# define SSL_AD_INSUFFICIENT_SECURITY    TLS1_AD_INSUFFICIENT_SECURITY
        -: 1151:/* fatal */
        -: 1152:# define SSL_AD_INTERNAL_ERROR           TLS1_AD_INTERNAL_ERROR
        -: 1153:# define SSL_AD_USER_CANCELLED           TLS1_AD_USER_CANCELLED
        -: 1154:# define SSL_AD_NO_RENEGOTIATION         TLS1_AD_NO_RENEGOTIATION
        -: 1155:# define SSL_AD_MISSING_EXTENSION        TLS13_AD_MISSING_EXTENSION
        -: 1156:# define SSL_AD_CERTIFICATE_REQUIRED     TLS13_AD_CERTIFICATE_REQUIRED
        -: 1157:# define SSL_AD_UNSUPPORTED_EXTENSION    TLS1_AD_UNSUPPORTED_EXTENSION
        -: 1158:# define SSL_AD_CERTIFICATE_UNOBTAINABLE TLS1_AD_CERTIFICATE_UNOBTAINABLE
        -: 1159:# define SSL_AD_UNRECOGNIZED_NAME        TLS1_AD_UNRECOGNIZED_NAME
        -: 1160:# define SSL_AD_BAD_CERTIFICATE_STATUS_RESPONSE TLS1_AD_BAD_CERTIFICATE_STATUS_RESPONSE
        -: 1161:# define SSL_AD_BAD_CERTIFICATE_HASH_VALUE TLS1_AD_BAD_CERTIFICATE_HASH_VALUE
        -: 1162:/* fatal */
        -: 1163:# define SSL_AD_UNKNOWN_PSK_IDENTITY     TLS1_AD_UNKNOWN_PSK_IDENTITY
        -: 1164:/* fatal */
        -: 1165:# define SSL_AD_INAPPROPRIATE_FALLBACK   TLS1_AD_INAPPROPRIATE_FALLBACK
        -: 1166:# define SSL_AD_NO_APPLICATION_PROTOCOL  TLS1_AD_NO_APPLICATION_PROTOCOL
        -: 1167:# define SSL_ERROR_NONE                  0
        -: 1168:# define SSL_ERROR_SSL                   1
        -: 1169:# define SSL_ERROR_WANT_READ             2
        -: 1170:# define SSL_ERROR_WANT_WRITE            3
        -: 1171:# define SSL_ERROR_WANT_X509_LOOKUP      4
        -: 1172:# define SSL_ERROR_SYSCALL               5/* look at error stack/return
        -: 1173:                                           * value/errno */
        -: 1174:# define SSL_ERROR_ZERO_RETURN           6
        -: 1175:# define SSL_ERROR_WANT_CONNECT          7
        -: 1176:# define SSL_ERROR_WANT_ACCEPT           8
        -: 1177:# define SSL_ERROR_WANT_ASYNC            9
        -: 1178:# define SSL_ERROR_WANT_ASYNC_JOB       10
        -: 1179:# define SSL_ERROR_WANT_CLIENT_HELLO_CB 11
        -: 1180:# define SSL_CTRL_SET_TMP_DH                     3
        -: 1181:# define SSL_CTRL_SET_TMP_ECDH                   4
        -: 1182:# define SSL_CTRL_SET_TMP_DH_CB                  6
        -: 1183:# define SSL_CTRL_GET_CLIENT_CERT_REQUEST        9
        -: 1184:# define SSL_CTRL_GET_NUM_RENEGOTIATIONS         10
        -: 1185:# define SSL_CTRL_CLEAR_NUM_RENEGOTIATIONS       11
        -: 1186:# define SSL_CTRL_GET_TOTAL_RENEGOTIATIONS       12
        -: 1187:# define SSL_CTRL_GET_FLAGS                      13
        -: 1188:# define SSL_CTRL_EXTRA_CHAIN_CERT               14
        -: 1189:# define SSL_CTRL_SET_MSG_CALLBACK               15
        -: 1190:# define SSL_CTRL_SET_MSG_CALLBACK_ARG           16
        -: 1191:/* only applies to datagram connections */
        -: 1192:# define SSL_CTRL_SET_MTU                17
        -: 1193:/* Stats */
        -: 1194:# define SSL_CTRL_SESS_NUMBER                    20
        -: 1195:# define SSL_CTRL_SESS_CONNECT                   21
        -: 1196:# define SSL_CTRL_SESS_CONNECT_GOOD              22
        -: 1197:# define SSL_CTRL_SESS_CONNECT_RENEGOTIATE       23
        -: 1198:# define SSL_CTRL_SESS_ACCEPT                    24
        -: 1199:# define SSL_CTRL_SESS_ACCEPT_GOOD               25
        -: 1200:# define SSL_CTRL_SESS_ACCEPT_RENEGOTIATE        26
        -: 1201:# define SSL_CTRL_SESS_HIT                       27
        -: 1202:# define SSL_CTRL_SESS_CB_HIT                    28
        -: 1203:# define SSL_CTRL_SESS_MISSES                    29
        -: 1204:# define SSL_CTRL_SESS_TIMEOUTS                  30
        -: 1205:# define SSL_CTRL_SESS_CACHE_FULL                31
        -: 1206:# define SSL_CTRL_MODE                           33
        -: 1207:# define SSL_CTRL_GET_READ_AHEAD                 40
        -: 1208:# define SSL_CTRL_SET_READ_AHEAD                 41
        -: 1209:# define SSL_CTRL_SET_SESS_CACHE_SIZE            42
        -: 1210:# define SSL_CTRL_GET_SESS_CACHE_SIZE            43
        -: 1211:# define SSL_CTRL_SET_SESS_CACHE_MODE            44
        -: 1212:# define SSL_CTRL_GET_SESS_CACHE_MODE            45
        -: 1213:# define SSL_CTRL_GET_MAX_CERT_LIST              50
        -: 1214:# define SSL_CTRL_SET_MAX_CERT_LIST              51
        -: 1215:# define SSL_CTRL_SET_MAX_SEND_FRAGMENT          52
        -: 1216:/* see tls1.h for macros based on these */
        -: 1217:# define SSL_CTRL_SET_TLSEXT_SERVERNAME_CB       53
        -: 1218:# define SSL_CTRL_SET_TLSEXT_SERVERNAME_ARG      54
        -: 1219:# define SSL_CTRL_SET_TLSEXT_HOSTNAME            55
        -: 1220:# define SSL_CTRL_SET_TLSEXT_DEBUG_CB            56
        -: 1221:# define SSL_CTRL_SET_TLSEXT_DEBUG_ARG           57
        -: 1222:# define SSL_CTRL_GET_TLSEXT_TICKET_KEYS         58
        -: 1223:# define SSL_CTRL_SET_TLSEXT_TICKET_KEYS         59
        -: 1224:/*# define SSL_CTRL_SET_TLSEXT_OPAQUE_PRF_INPUT    60 */
        -: 1225:/*# define SSL_CTRL_SET_TLSEXT_OPAQUE_PRF_INPUT_CB 61 */
        -: 1226:/*# define SSL_CTRL_SET_TLSEXT_OPAQUE_PRF_INPUT_CB_ARG 62 */
        -: 1227:# define SSL_CTRL_SET_TLSEXT_STATUS_REQ_CB       63
        -: 1228:# define SSL_CTRL_SET_TLSEXT_STATUS_REQ_CB_ARG   64
        -: 1229:# define SSL_CTRL_SET_TLSEXT_STATUS_REQ_TYPE     65
        -: 1230:# define SSL_CTRL_GET_TLSEXT_STATUS_REQ_EXTS     66
        -: 1231:# define SSL_CTRL_SET_TLSEXT_STATUS_REQ_EXTS     67
        -: 1232:# define SSL_CTRL_GET_TLSEXT_STATUS_REQ_IDS      68
        -: 1233:# define SSL_CTRL_SET_TLSEXT_STATUS_REQ_IDS      69
        -: 1234:# define SSL_CTRL_GET_TLSEXT_STATUS_REQ_OCSP_RESP        70
        -: 1235:# define SSL_CTRL_SET_TLSEXT_STATUS_REQ_OCSP_RESP        71
        -: 1236:# define SSL_CTRL_SET_TLSEXT_TICKET_KEY_CB       72
        -: 1237:# define SSL_CTRL_SET_TLS_EXT_SRP_USERNAME_CB    75
        -: 1238:# define SSL_CTRL_SET_SRP_VERIFY_PARAM_CB                76
        -: 1239:# define SSL_CTRL_SET_SRP_GIVE_CLIENT_PWD_CB             77
        -: 1240:# define SSL_CTRL_SET_SRP_ARG            78
        -: 1241:# define SSL_CTRL_SET_TLS_EXT_SRP_USERNAME               79
        -: 1242:# define SSL_CTRL_SET_TLS_EXT_SRP_STRENGTH               80
        -: 1243:# define SSL_CTRL_SET_TLS_EXT_SRP_PASSWORD               81
        -: 1244:# ifndef OPENSSL_NO_HEARTBEATS
        -: 1245:#  define SSL_CTRL_DTLS_EXT_SEND_HEARTBEAT               85
        -: 1246:#  define SSL_CTRL_GET_DTLS_EXT_HEARTBEAT_PENDING        86
        -: 1247:#  define SSL_CTRL_SET_DTLS_EXT_HEARTBEAT_NO_REQUESTS    87
        -: 1248:# endif
        -: 1249:# define DTLS_CTRL_GET_TIMEOUT           73
        -: 1250:# define DTLS_CTRL_HANDLE_TIMEOUT        74
        -: 1251:# define SSL_CTRL_GET_RI_SUPPORT                 76
        -: 1252:# define SSL_CTRL_CLEAR_MODE                     78
        -: 1253:# define SSL_CTRL_SET_NOT_RESUMABLE_SESS_CB      79
        -: 1254:# define SSL_CTRL_GET_EXTRA_CHAIN_CERTS          82
        -: 1255:# define SSL_CTRL_CLEAR_EXTRA_CHAIN_CERTS        83
        -: 1256:# define SSL_CTRL_CHAIN                          88
        -: 1257:# define SSL_CTRL_CHAIN_CERT                     89
        -: 1258:# define SSL_CTRL_GET_GROUPS                     90
        -: 1259:# define SSL_CTRL_SET_GROUPS                     91
        -: 1260:# define SSL_CTRL_SET_GROUPS_LIST                92
        -: 1261:# define SSL_CTRL_GET_SHARED_GROUP               93
        -: 1262:# define SSL_CTRL_SET_SIGALGS                    97
        -: 1263:# define SSL_CTRL_SET_SIGALGS_LIST               98
        -: 1264:# define SSL_CTRL_CERT_FLAGS                     99
        -: 1265:# define SSL_CTRL_CLEAR_CERT_FLAGS               100
        -: 1266:# define SSL_CTRL_SET_CLIENT_SIGALGS             101
        -: 1267:# define SSL_CTRL_SET_CLIENT_SIGALGS_LIST        102
        -: 1268:# define SSL_CTRL_GET_CLIENT_CERT_TYPES          103
        -: 1269:# define SSL_CTRL_SET_CLIENT_CERT_TYPES          104
        -: 1270:# define SSL_CTRL_BUILD_CERT_CHAIN               105
        -: 1271:# define SSL_CTRL_SET_VERIFY_CERT_STORE          106
        -: 1272:# define SSL_CTRL_SET_CHAIN_CERT_STORE           107
        -: 1273:# define SSL_CTRL_GET_PEER_SIGNATURE_NID         108
        -: 1274:# define SSL_CTRL_GET_SERVER_TMP_KEY             109
        -: 1275:# define SSL_CTRL_GET_RAW_CIPHERLIST             110
        -: 1276:# define SSL_CTRL_GET_EC_POINT_FORMATS           111
        -: 1277:# define SSL_CTRL_GET_CHAIN_CERTS                115
        -: 1278:# define SSL_CTRL_SELECT_CURRENT_CERT            116
        -: 1279:# define SSL_CTRL_SET_CURRENT_CERT               117
        -: 1280:# define SSL_CTRL_SET_DH_AUTO                    118
        -: 1281:# define DTLS_CTRL_SET_LINK_MTU                  120
        -: 1282:# define DTLS_CTRL_GET_LINK_MIN_MTU              121
        -: 1283:# define SSL_CTRL_GET_EXTMS_SUPPORT              122
        -: 1284:# define SSL_CTRL_SET_MIN_PROTO_VERSION          123
        -: 1285:# define SSL_CTRL_SET_MAX_PROTO_VERSION          124
        -: 1286:# define SSL_CTRL_SET_SPLIT_SEND_FRAGMENT        125
        -: 1287:# define SSL_CTRL_SET_MAX_PIPELINES              126
        -: 1288:# define SSL_CTRL_GET_TLSEXT_STATUS_REQ_TYPE     127
        -: 1289:# define SSL_CTRL_GET_TLSEXT_STATUS_REQ_CB       128
        -: 1290:# define SSL_CTRL_GET_TLSEXT_STATUS_REQ_CB_ARG   129
        -: 1291:# define SSL_CTRL_GET_MIN_PROTO_VERSION          130
        -: 1292:# define SSL_CTRL_GET_MAX_PROTO_VERSION          131
        -: 1293:# define SSL_CERT_SET_FIRST                      1
        -: 1294:# define SSL_CERT_SET_NEXT                       2
        -: 1295:# define SSL_CERT_SET_SERVER                     3
        -: 1296:# define DTLSv1_get_timeout(ssl, arg) \
        -: 1297:        SSL_ctrl(ssl,DTLS_CTRL_GET_TIMEOUT,0, (void *)(arg))
        -: 1298:# define DTLSv1_handle_timeout(ssl) \
        -: 1299:        SSL_ctrl(ssl,DTLS_CTRL_HANDLE_TIMEOUT,0, NULL)
        -: 1300:# define SSL_num_renegotiations(ssl) \
        -: 1301:        SSL_ctrl((ssl),SSL_CTRL_GET_NUM_RENEGOTIATIONS,0,NULL)
        -: 1302:# define SSL_clear_num_renegotiations(ssl) \
        -: 1303:        SSL_ctrl((ssl),SSL_CTRL_CLEAR_NUM_RENEGOTIATIONS,0,NULL)
        -: 1304:# define SSL_total_renegotiations(ssl) \
        -: 1305:        SSL_ctrl((ssl),SSL_CTRL_GET_TOTAL_RENEGOTIATIONS,0,NULL)
        -: 1306:# define SSL_CTX_set_tmp_dh(ctx,dh) \
        -: 1307:        SSL_CTX_ctrl(ctx,SSL_CTRL_SET_TMP_DH,0,(char *)(dh))
        -: 1308:# define SSL_CTX_set_tmp_ecdh(ctx,ecdh) \
        -: 1309:        SSL_CTX_ctrl(ctx,SSL_CTRL_SET_TMP_ECDH,0,(char *)(ecdh))
        -: 1310:# define SSL_CTX_set_dh_auto(ctx, onoff) \
        -: 1311:        SSL_CTX_ctrl(ctx,SSL_CTRL_SET_DH_AUTO,onoff,NULL)
        -: 1312:# define SSL_set_dh_auto(s, onoff) \
        -: 1313:        SSL_ctrl(s,SSL_CTRL_SET_DH_AUTO,onoff,NULL)
        -: 1314:# define SSL_set_tmp_dh(ssl,dh) \
        -: 1315:        SSL_ctrl(ssl,SSL_CTRL_SET_TMP_DH,0,(char *)(dh))
        -: 1316:# define SSL_set_tmp_ecdh(ssl,ecdh) \
        -: 1317:        SSL_ctrl(ssl,SSL_CTRL_SET_TMP_ECDH,0,(char *)(ecdh))
        -: 1318:# define SSL_CTX_add_extra_chain_cert(ctx,x509) \
        -: 1319:        SSL_CTX_ctrl(ctx,SSL_CTRL_EXTRA_CHAIN_CERT,0,(char *)(x509))
        -: 1320:# define SSL_CTX_get_extra_chain_certs(ctx,px509) \
        -: 1321:        SSL_CTX_ctrl(ctx,SSL_CTRL_GET_EXTRA_CHAIN_CERTS,0,px509)
        -: 1322:# define SSL_CTX_get_extra_chain_certs_only(ctx,px509) \
        -: 1323:        SSL_CTX_ctrl(ctx,SSL_CTRL_GET_EXTRA_CHAIN_CERTS,1,px509)
        -: 1324:# define SSL_CTX_clear_extra_chain_certs(ctx) \
        -: 1325:        SSL_CTX_ctrl(ctx,SSL_CTRL_CLEAR_EXTRA_CHAIN_CERTS,0,NULL)
        -: 1326:# define SSL_CTX_set0_chain(ctx,sk) \
        -: 1327:        SSL_CTX_ctrl(ctx,SSL_CTRL_CHAIN,0,(char *)(sk))
        -: 1328:# define SSL_CTX_set1_chain(ctx,sk) \
        -: 1329:        SSL_CTX_ctrl(ctx,SSL_CTRL_CHAIN,1,(char *)(sk))
        -: 1330:# define SSL_CTX_add0_chain_cert(ctx,x509) \
        -: 1331:        SSL_CTX_ctrl(ctx,SSL_CTRL_CHAIN_CERT,0,(char *)(x509))
        -: 1332:# define SSL_CTX_add1_chain_cert(ctx,x509) \
        -: 1333:        SSL_CTX_ctrl(ctx,SSL_CTRL_CHAIN_CERT,1,(char *)(x509))
        -: 1334:# define SSL_CTX_get0_chain_certs(ctx,px509) \
        -: 1335:        SSL_CTX_ctrl(ctx,SSL_CTRL_GET_CHAIN_CERTS,0,px509)
        -: 1336:# define SSL_CTX_clear_chain_certs(ctx) \
        -: 1337:        SSL_CTX_set0_chain(ctx,NULL)
        -: 1338:# define SSL_CTX_build_cert_chain(ctx, flags) \
        -: 1339:        SSL_CTX_ctrl(ctx,SSL_CTRL_BUILD_CERT_CHAIN, flags, NULL)
        -: 1340:# define SSL_CTX_select_current_cert(ctx,x509) \
        -: 1341:        SSL_CTX_ctrl(ctx,SSL_CTRL_SELECT_CURRENT_CERT,0,(char *)(x509))
        -: 1342:# define SSL_CTX_set_current_cert(ctx, op) \
        -: 1343:        SSL_CTX_ctrl(ctx,SSL_CTRL_SET_CURRENT_CERT, op, NULL)
        -: 1344:# define SSL_CTX_set0_verify_cert_store(ctx,st) \
        -: 1345:        SSL_CTX_ctrl(ctx,SSL_CTRL_SET_VERIFY_CERT_STORE,0,(char *)(st))
        -: 1346:# define SSL_CTX_set1_verify_cert_store(ctx,st) \
        -: 1347:        SSL_CTX_ctrl(ctx,SSL_CTRL_SET_VERIFY_CERT_STORE,1,(char *)(st))
        -: 1348:# define SSL_CTX_set0_chain_cert_store(ctx,st) \
        -: 1349:        SSL_CTX_ctrl(ctx,SSL_CTRL_SET_CHAIN_CERT_STORE,0,(char *)(st))
        -: 1350:# define SSL_CTX_set1_chain_cert_store(ctx,st) \
        -: 1351:        SSL_CTX_ctrl(ctx,SSL_CTRL_SET_CHAIN_CERT_STORE,1,(char *)(st))
        -: 1352:# define SSL_set0_chain(ctx,sk) \
        -: 1353:        SSL_ctrl(ctx,SSL_CTRL_CHAIN,0,(char *)(sk))
        -: 1354:# define SSL_set1_chain(ctx,sk) \
        -: 1355:        SSL_ctrl(ctx,SSL_CTRL_CHAIN,1,(char *)(sk))
        -: 1356:# define SSL_add0_chain_cert(ctx,x509) \
        -: 1357:        SSL_ctrl(ctx,SSL_CTRL_CHAIN_CERT,0,(char *)(x509))
        -: 1358:# define SSL_add1_chain_cert(ctx,x509) \
        -: 1359:        SSL_ctrl(ctx,SSL_CTRL_CHAIN_CERT,1,(char *)(x509))
        -: 1360:# define SSL_get0_chain_certs(ctx,px509) \
        -: 1361:        SSL_ctrl(ctx,SSL_CTRL_GET_CHAIN_CERTS,0,px509)
        -: 1362:# define SSL_clear_chain_certs(ctx) \
        -: 1363:        SSL_set0_chain(ctx,NULL)
        -: 1364:# define SSL_build_cert_chain(s, flags) \
        -: 1365:        SSL_ctrl(s,SSL_CTRL_BUILD_CERT_CHAIN, flags, NULL)
        -: 1366:# define SSL_select_current_cert(ctx,x509) \
        -: 1367:        SSL_ctrl(ctx,SSL_CTRL_SELECT_CURRENT_CERT,0,(char *)(x509))
        -: 1368:# define SSL_set_current_cert(ctx,op) \
        -: 1369:        SSL_ctrl(ctx,SSL_CTRL_SET_CURRENT_CERT, op, NULL)
        -: 1370:# define SSL_set0_verify_cert_store(s,st) \
        -: 1371:        SSL_ctrl(s,SSL_CTRL_SET_VERIFY_CERT_STORE,0,(char *)(st))
        -: 1372:# define SSL_set1_verify_cert_store(s,st) \
        -: 1373:        SSL_ctrl(s,SSL_CTRL_SET_VERIFY_CERT_STORE,1,(char *)(st))
        -: 1374:# define SSL_set0_chain_cert_store(s,st) \
        -: 1375:        SSL_ctrl(s,SSL_CTRL_SET_CHAIN_CERT_STORE,0,(char *)(st))
        -: 1376:# define SSL_set1_chain_cert_store(s,st) \
        -: 1377:        SSL_ctrl(s,SSL_CTRL_SET_CHAIN_CERT_STORE,1,(char *)(st))
        -: 1378:# define SSL_get1_groups(ctx, s) \
        -: 1379:        SSL_ctrl(ctx,SSL_CTRL_GET_GROUPS,0,(char *)(s))
        -: 1380:# define SSL_CTX_set1_groups(ctx, glist, glistlen) \
        -: 1381:        SSL_CTX_ctrl(ctx,SSL_CTRL_SET_GROUPS,glistlen,(char *)(glist))
        -: 1382:# define SSL_CTX_set1_groups_list(ctx, s) \
        -: 1383:        SSL_CTX_ctrl(ctx,SSL_CTRL_SET_GROUPS_LIST,0,(char *)(s))
        -: 1384:# define SSL_set1_groups(ctx, glist, glistlen) \
        -: 1385:        SSL_ctrl(ctx,SSL_CTRL_SET_GROUPS,glistlen,(char *)(glist))
        -: 1386:# define SSL_set1_groups_list(ctx, s) \
        -: 1387:        SSL_ctrl(ctx,SSL_CTRL_SET_GROUPS_LIST,0,(char *)(s))
        -: 1388:# define SSL_get_shared_group(s, n) \
        -: 1389:        SSL_ctrl(s,SSL_CTRL_GET_SHARED_GROUP,n,NULL)
        -: 1390:# define SSL_CTX_set1_sigalgs(ctx, slist, slistlen) \
        -: 1391:        SSL_CTX_ctrl(ctx,SSL_CTRL_SET_SIGALGS,slistlen,(int *)(slist))
        -: 1392:# define SSL_CTX_set1_sigalgs_list(ctx, s) \
        -: 1393:        SSL_CTX_ctrl(ctx,SSL_CTRL_SET_SIGALGS_LIST,0,(char *)(s))
        -: 1394:# define SSL_set1_sigalgs(ctx, slist, slistlen) \
        -: 1395:        SSL_ctrl(ctx,SSL_CTRL_SET_SIGALGS,slistlen,(int *)(slist))
        -: 1396:# define SSL_set1_sigalgs_list(ctx, s) \
        -: 1397:        SSL_ctrl(ctx,SSL_CTRL_SET_SIGALGS_LIST,0,(char *)(s))
        -: 1398:# define SSL_CTX_set1_client_sigalgs(ctx, slist, slistlen) \
        -: 1399:        SSL_CTX_ctrl(ctx,SSL_CTRL_SET_CLIENT_SIGALGS,slistlen,(int *)(slist))
        -: 1400:# define SSL_CTX_set1_client_sigalgs_list(ctx, s) \
        -: 1401:        SSL_CTX_ctrl(ctx,SSL_CTRL_SET_CLIENT_SIGALGS_LIST,0,(char *)(s))
        -: 1402:# define SSL_set1_client_sigalgs(ctx, slist, slistlen) \
        -: 1403:        SSL_ctrl(ctx,SSL_CTRL_SET_CLIENT_SIGALGS,clistlen,(int *)(slist))
        -: 1404:# define SSL_set1_client_sigalgs_list(ctx, s) \
        -: 1405:        SSL_ctrl(ctx,SSL_CTRL_SET_CLIENT_SIGALGS_LIST,0,(char *)(s))
        -: 1406:# define SSL_get0_certificate_types(s, clist) \
        -: 1407:        SSL_ctrl(s, SSL_CTRL_GET_CLIENT_CERT_TYPES, 0, (char *)(clist))
        -: 1408:# define SSL_CTX_set1_client_certificate_types(ctx, clist, clistlen) \
        -: 1409:        SSL_CTX_ctrl(ctx,SSL_CTRL_SET_CLIENT_CERT_TYPES,clistlen, \
        -: 1410:                     (char *)(clist))
        -: 1411:# define SSL_set1_client_certificate_types(s, clist, clistlen) \
        -: 1412:        SSL_ctrl(s,SSL_CTRL_SET_CLIENT_CERT_TYPES,clistlen,(char *)(clist))
        -: 1413:# define SSL_get_peer_signature_nid(s, pn) \
        -: 1414:        SSL_ctrl(s,SSL_CTRL_GET_PEER_SIGNATURE_NID,0,pn)
        -: 1415:# define SSL_get_server_tmp_key(s, pk) \
        -: 1416:        SSL_ctrl(s,SSL_CTRL_GET_SERVER_TMP_KEY,0,pk)
        -: 1417:# define SSL_get0_raw_cipherlist(s, plst) \
        -: 1418:        SSL_ctrl(s,SSL_CTRL_GET_RAW_CIPHERLIST,0,plst)
        -: 1419:# define SSL_get0_ec_point_formats(s, plst) \
        -: 1420:        SSL_ctrl(s,SSL_CTRL_GET_EC_POINT_FORMATS,0,plst)
        -: 1421:# define SSL_CTX_set_min_proto_version(ctx, version) \
        -: 1422:        SSL_CTX_ctrl(ctx, SSL_CTRL_SET_MIN_PROTO_VERSION, version, NULL)
        -: 1423:# define SSL_CTX_set_max_proto_version(ctx, version) \
        -: 1424:        SSL_CTX_ctrl(ctx, SSL_CTRL_SET_MAX_PROTO_VERSION, version, NULL)
        -: 1425:# define SSL_CTX_get_min_proto_version(ctx) \
        -: 1426:        SSL_CTX_ctrl(ctx, SSL_CTRL_GET_MIN_PROTO_VERSION, 0, NULL)
        -: 1427:# define SSL_CTX_get_max_proto_version(ctx) \
        -: 1428:        SSL_CTX_ctrl(ctx, SSL_CTRL_GET_MAX_PROTO_VERSION, 0, NULL)
        -: 1429:# define SSL_set_min_proto_version(s, version) \
        -: 1430:        SSL_ctrl(s, SSL_CTRL_SET_MIN_PROTO_VERSION, version, NULL)
        -: 1431:# define SSL_set_max_proto_version(s, version) \
        -: 1432:        SSL_ctrl(s, SSL_CTRL_SET_MAX_PROTO_VERSION, version, NULL)
        -: 1433:# define SSL_get_min_proto_version(s) \
        -: 1434:        SSL_ctrl(s, SSL_CTRL_GET_MIN_PROTO_VERSION, 0, NULL)
        -: 1435:# define SSL_get_max_proto_version(s) \
        -: 1436:        SSL_ctrl(s, SSL_CTRL_GET_MAX_PROTO_VERSION, 0, NULL)
        -: 1437:
        -: 1438:/*
        -: 1439: * The following symbol names are old and obsolete. They are kept
        -: 1440: * for compatibility reasons only and should not be used anymore.
        -: 1441: */
        -: 1442:# define SSL_CTRL_GET_CURVES           SSL_CTRL_GET_GROUPS
        -: 1443:# define SSL_CTRL_SET_CURVES           SSL_CTRL_SET_GROUPS
        -: 1444:# define SSL_CTRL_SET_CURVES_LIST      SSL_CTRL_SET_GROUPS_LIST
        -: 1445:# define SSL_CTRL_GET_SHARED_CURVE     SSL_CTRL_GET_SHARED_GROUP
        -: 1446:
        -: 1447:# define SSL_get1_curves               SSL_get1_groups
        -: 1448:# define SSL_CTX_set1_curves           SSL_CTX_set1_groups
        -: 1449:# define SSL_CTX_set1_curves_list      SSL_CTX_set1_groups_list
        -: 1450:# define SSL_set1_curves               SSL_set1_groups
        -: 1451:# define SSL_set1_curves_list          SSL_set1_groups_list
        -: 1452:# define SSL_get_shared_curve          SSL_get_shared_group
        -: 1453:
        -: 1454:
        -: 1455:# if OPENSSL_API_COMPAT < 0x10100000L
        -: 1456:/* Provide some compatibility macros for removed functionality. */
        -: 1457:#  define SSL_CTX_need_tmp_RSA(ctx)                0
        -: 1458:#  define SSL_CTX_set_tmp_rsa(ctx,rsa)             1
        -: 1459:#  define SSL_need_tmp_RSA(ssl)                    0
        -: 1460:#  define SSL_set_tmp_rsa(ssl,rsa)                 1
        -: 1461:#  define SSL_CTX_set_ecdh_auto(dummy, onoff)      ((onoff) != 0)
        -: 1462:#  define SSL_set_ecdh_auto(dummy, onoff)          ((onoff) != 0)
        -: 1463:/*
        -: 1464: * We "pretend" to call the callback to avoid warnings about unused static
        -: 1465: * functions.
        -: 1466: */
        -: 1467:#  define SSL_CTX_set_tmp_rsa_callback(ctx, cb)    while(0) (cb)(NULL, 0, 0)
        -: 1468:#  define SSL_set_tmp_rsa_callback(ssl, cb)        while(0) (cb)(NULL, 0, 0)
        -: 1469:# endif
        -: 1470:__owur const BIO_METHOD *BIO_f_ssl(void);
        -: 1471:__owur BIO *BIO_new_ssl(SSL_CTX *ctx, int client);
        -: 1472:__owur BIO *BIO_new_ssl_connect(SSL_CTX *ctx);
        -: 1473:__owur BIO *BIO_new_buffer_ssl_connect(SSL_CTX *ctx);
        -: 1474:__owur int BIO_ssl_copy_session_id(BIO *to, BIO *from);
        -: 1475:void BIO_ssl_shutdown(BIO *ssl_bio);
        -: 1476:
        -: 1477:__owur int SSL_CTX_set_cipher_list(SSL_CTX *, const char *str);
        -: 1478:__owur SSL_CTX *SSL_CTX_new(const SSL_METHOD *meth);
        -: 1479:int SSL_CTX_up_ref(SSL_CTX *ctx);
        -: 1480:void SSL_CTX_free(SSL_CTX *);
        -: 1481:__owur long SSL_CTX_set_timeout(SSL_CTX *ctx, long t);
        -: 1482:__owur long SSL_CTX_get_timeout(const SSL_CTX *ctx);
        -: 1483:__owur X509_STORE *SSL_CTX_get_cert_store(const SSL_CTX *);
        -: 1484:void SSL_CTX_set_cert_store(SSL_CTX *, X509_STORE *);
        -: 1485:void SSL_CTX_set1_cert_store(SSL_CTX *, X509_STORE *);
        -: 1486:__owur int SSL_want(const SSL *s);
        -: 1487:__owur int SSL_clear(SSL *s);
        -: 1488:
        -: 1489:void SSL_CTX_flush_sessions(SSL_CTX *ctx, long tm);
        -: 1490:
        -: 1491:__owur const SSL_CIPHER *SSL_get_current_cipher(const SSL *s);
        -: 1492:__owur const SSL_CIPHER *SSL_get_pending_cipher(const SSL *s);
        -: 1493:__owur int SSL_CIPHER_get_bits(const SSL_CIPHER *c, int *alg_bits);
        -: 1494:__owur const char *SSL_CIPHER_get_version(const SSL_CIPHER *c);
        -: 1495:__owur const char *SSL_CIPHER_get_name(const SSL_CIPHER *c);
        -: 1496:__owur const char *SSL_CIPHER_standard_name(const SSL_CIPHER *c);
        -: 1497:__owur const char *OPENSSL_cipher_name(const char *rfc_name);
        -: 1498:__owur uint32_t SSL_CIPHER_get_id(const SSL_CIPHER *c);
        -: 1499:__owur uint16_t SSL_CIPHER_get_protocol_id(const SSL_CIPHER *c);
        -: 1500:__owur int SSL_CIPHER_get_kx_nid(const SSL_CIPHER *c);
        -: 1501:__owur int SSL_CIPHER_get_auth_nid(const SSL_CIPHER *c);
        -: 1502:__owur const EVP_MD *SSL_CIPHER_get_handshake_digest(const SSL_CIPHER *c);
        -: 1503:__owur int SSL_CIPHER_is_aead(const SSL_CIPHER *c);
        -: 1504:
        -: 1505:__owur int SSL_get_fd(const SSL *s);
        -: 1506:__owur int SSL_get_rfd(const SSL *s);
        -: 1507:__owur int SSL_get_wfd(const SSL *s);
        -: 1508:__owur const char *SSL_get_cipher_list(const SSL *s, int n);
        -: 1509:__owur char *SSL_get_shared_ciphers(const SSL *s, char *buf, int size);
        -: 1510:__owur int SSL_get_read_ahead(const SSL *s);
        -: 1511:__owur int SSL_pending(const SSL *s);
        -: 1512:__owur int SSL_has_pending(const SSL *s);
        -: 1513:# ifndef OPENSSL_NO_SOCK
        -: 1514:__owur int SSL_set_fd(SSL *s, int fd);
        -: 1515:__owur int SSL_set_rfd(SSL *s, int fd);
        -: 1516:__owur int SSL_set_wfd(SSL *s, int fd);
        -: 1517:# endif
        -: 1518:void SSL_set0_rbio(SSL *s, BIO *rbio);
        -: 1519:void SSL_set0_wbio(SSL *s, BIO *wbio);
        -: 1520:void SSL_set_bio(SSL *s, BIO *rbio, BIO *wbio);
        -: 1521:__owur BIO *SSL_get_rbio(const SSL *s);
        -: 1522:__owur BIO *SSL_get_wbio(const SSL *s);
        -: 1523:__owur int SSL_set_cipher_list(SSL *s, const char *str);
        -: 1524:__owur int SSL_CTX_set_ciphersuites(SSL_CTX *ctx, const char *str);
        -: 1525:__owur int SSL_set_ciphersuites(SSL *s, const char *str);
        -: 1526:void SSL_set_read_ahead(SSL *s, int yes);
        -: 1527:__owur int SSL_get_verify_mode(const SSL *s);
        -: 1528:__owur int SSL_get_verify_depth(const SSL *s);
        -: 1529:__owur SSL_verify_cb SSL_get_verify_callback(const SSL *s);
        -: 1530:void SSL_set_verify(SSL *s, int mode, SSL_verify_cb callback);
        -: 1531:void SSL_set_verify_depth(SSL *s, int depth);
        -: 1532:void SSL_set_cert_cb(SSL *s, int (*cb) (SSL *ssl, void *arg), void *arg);
        -: 1533:# ifndef OPENSSL_NO_RSA
        -: 1534:__owur int SSL_use_RSAPrivateKey(SSL *ssl, RSA *rsa);
        -: 1535:__owur int SSL_use_RSAPrivateKey_ASN1(SSL *ssl, const unsigned char *d,
        -: 1536:                                      long len);
        -: 1537:# endif
        -: 1538:__owur int SSL_use_PrivateKey(SSL *ssl, EVP_PKEY *pkey);
        -: 1539:__owur int SSL_use_PrivateKey_ASN1(int pk, SSL *ssl, const unsigned char *d,
        -: 1540:                                   long len);
        -: 1541:__owur int SSL_use_certificate(SSL *ssl, X509 *x);
        -: 1542:__owur int SSL_use_certificate_ASN1(SSL *ssl, const unsigned char *d, int len);
        -: 1543:__owur int SSL_use_cert_and_key(SSL *ssl, X509 *x509, EVP_PKEY *privatekey,
        -: 1544:                                STACK_OF(X509) *chain, int override);
        -: 1545:
        -: 1546:
        -: 1547:/* serverinfo file format versions */
        -: 1548:# define SSL_SERVERINFOV1   1
        -: 1549:# define SSL_SERVERINFOV2   2
        -: 1550:
        -: 1551:/* Set serverinfo data for the current active cert. */
        -: 1552:__owur int SSL_CTX_use_serverinfo(SSL_CTX *ctx, const unsigned char *serverinfo,
        -: 1553:                                  size_t serverinfo_length);
        -: 1554:__owur int SSL_CTX_use_serverinfo_ex(SSL_CTX *ctx, unsigned int version,
        -: 1555:                                     const unsigned char *serverinfo,
        -: 1556:                                     size_t serverinfo_length);
        -: 1557:__owur int SSL_CTX_use_serverinfo_file(SSL_CTX *ctx, const char *file);
        -: 1558:
        -: 1559:#ifndef OPENSSL_NO_RSA
        -: 1560:__owur int SSL_use_RSAPrivateKey_file(SSL *ssl, const char *file, int type);
        -: 1561:#endif
        -: 1562:
        -: 1563:__owur int SSL_use_PrivateKey_file(SSL *ssl, const char *file, int type);
        -: 1564:__owur int SSL_use_certificate_file(SSL *ssl, const char *file, int type);
        -: 1565:
        -: 1566:#ifndef OPENSSL_NO_RSA
        -: 1567:__owur int SSL_CTX_use_RSAPrivateKey_file(SSL_CTX *ctx, const char *file,
        -: 1568:                                          int type);
        -: 1569:#endif
        -: 1570:__owur int SSL_CTX_use_PrivateKey_file(SSL_CTX *ctx, const char *file,
        -: 1571:                                       int type);
        -: 1572:__owur int SSL_CTX_use_certificate_file(SSL_CTX *ctx, const char *file,
        -: 1573:                                        int type);
        -: 1574:/* PEM type */
        -: 1575:__owur int SSL_CTX_use_certificate_chain_file(SSL_CTX *ctx, const char *file);
        -: 1576:__owur int SSL_use_certificate_chain_file(SSL *ssl, const char *file);
        -: 1577:__owur STACK_OF(X509_NAME) *SSL_load_client_CA_file(const char *file);
        -: 1578:__owur int SSL_add_file_cert_subjects_to_stack(STACK_OF(X509_NAME) *stackCAs,
        -: 1579:                                               const char *file);
        -: 1580:int SSL_add_dir_cert_subjects_to_stack(STACK_OF(X509_NAME) *stackCAs,
        -: 1581:                                       const char *dir);
        -: 1582:
        -: 1583:# if OPENSSL_API_COMPAT < 0x10100000L
        -: 1584:#  define SSL_load_error_strings() \
        -: 1585:    OPENSSL_init_ssl(OPENSSL_INIT_LOAD_SSL_STRINGS \
        -: 1586:                     | OPENSSL_INIT_LOAD_CRYPTO_STRINGS, NULL)
        -: 1587:# endif
        -: 1588:
        -: 1589:__owur const char *SSL_state_string(const SSL *s);
        -: 1590:__owur const char *SSL_rstate_string(const SSL *s);
        -: 1591:__owur const char *SSL_state_string_long(const SSL *s);
        -: 1592:__owur const char *SSL_rstate_string_long(const SSL *s);
        -: 1593:__owur long SSL_SESSION_get_time(const SSL_SESSION *s);
        -: 1594:__owur long SSL_SESSION_set_time(SSL_SESSION *s, long t);
        -: 1595:__owur long SSL_SESSION_get_timeout(const SSL_SESSION *s);
        -: 1596:__owur long SSL_SESSION_set_timeout(SSL_SESSION *s, long t);
        -: 1597:__owur int SSL_SESSION_get_protocol_version(const SSL_SESSION *s);
        -: 1598:__owur int SSL_SESSION_set_protocol_version(SSL_SESSION *s, int version);
        -: 1599:
        -: 1600:__owur const char *SSL_SESSION_get0_hostname(const SSL_SESSION *s);
        -: 1601:__owur int SSL_SESSION_set1_hostname(SSL_SESSION *s, const char *hostname);
        -: 1602:void SSL_SESSION_get0_alpn_selected(const SSL_SESSION *s,
        -: 1603:                                    const unsigned char **alpn,
        -: 1604:                                    size_t *len);
        -: 1605:__owur int SSL_SESSION_set1_alpn_selected(SSL_SESSION *s,
        -: 1606:                                          const unsigned char *alpn,
        -: 1607:                                          size_t len);
        -: 1608:__owur const SSL_CIPHER *SSL_SESSION_get0_cipher(const SSL_SESSION *s);
        -: 1609:__owur int SSL_SESSION_set_cipher(SSL_SESSION *s, const SSL_CIPHER *cipher);
        -: 1610:__owur int SSL_SESSION_has_ticket(const SSL_SESSION *s);
        -: 1611:__owur unsigned long SSL_SESSION_get_ticket_lifetime_hint(const SSL_SESSION *s);
        -: 1612:void SSL_SESSION_get0_ticket(const SSL_SESSION *s, const unsigned char **tick,
        -: 1613:                             size_t *len);
        -: 1614:__owur uint32_t SSL_SESSION_get_max_early_data(const SSL_SESSION *s);
        -: 1615:__owur int SSL_SESSION_set_max_early_data(SSL_SESSION *s,
        -: 1616:                                          uint32_t max_early_data);
        -: 1617:__owur int SSL_copy_session_id(SSL *to, const SSL *from);
        -: 1618:__owur X509 *SSL_SESSION_get0_peer(SSL_SESSION *s);
        -: 1619:__owur int SSL_SESSION_set1_id_context(SSL_SESSION *s,
        -: 1620:                                       const unsigned char *sid_ctx,
        -: 1621:                                       unsigned int sid_ctx_len);
        -: 1622:__owur int SSL_SESSION_set1_id(SSL_SESSION *s, const unsigned char *sid,
        -: 1623:                               unsigned int sid_len);
        -: 1624:__owur int SSL_SESSION_is_resumable(const SSL_SESSION *s);
        -: 1625:
        -: 1626:__owur SSL_SESSION *SSL_SESSION_new(void);
        -: 1627:__owur SSL_SESSION *SSL_SESSION_dup(SSL_SESSION *src);
        -: 1628:const unsigned char *SSL_SESSION_get_id(const SSL_SESSION *s,
        -: 1629:                                        unsigned int *len);
        -: 1630:const unsigned char *SSL_SESSION_get0_id_context(const SSL_SESSION *s,
        -: 1631:                                                 unsigned int *len);
        -: 1632:__owur unsigned int SSL_SESSION_get_compress_id(const SSL_SESSION *s);
        -: 1633:# ifndef OPENSSL_NO_STDIO
        -: 1634:int SSL_SESSION_print_fp(FILE *fp, const SSL_SESSION *ses);
        -: 1635:# endif
        -: 1636:int SSL_SESSION_print(BIO *fp, const SSL_SESSION *ses);
        -: 1637:int SSL_SESSION_print_keylog(BIO *bp, const SSL_SESSION *x);
        -: 1638:int SSL_SESSION_up_ref(SSL_SESSION *ses);
        -: 1639:void SSL_SESSION_free(SSL_SESSION *ses);
        -: 1640:__owur int i2d_SSL_SESSION(SSL_SESSION *in, unsigned char **pp);
        -: 1641:__owur int SSL_set_session(SSL *to, SSL_SESSION *session);
        -: 1642:int SSL_CTX_add_session(SSL_CTX *ctx, SSL_SESSION *session);
        -: 1643:int SSL_CTX_remove_session(SSL_CTX *ctx, SSL_SESSION *session);
        -: 1644:__owur int SSL_CTX_set_generate_session_id(SSL_CTX *ctx, GEN_SESSION_CB cb);
        -: 1645:__owur int SSL_set_generate_session_id(SSL *s, GEN_SESSION_CB cb);
        -: 1646:__owur int SSL_has_matching_session_id(const SSL *s,
        -: 1647:                                       const unsigned char *id,
        -: 1648:                                       unsigned int id_len);
        -: 1649:SSL_SESSION *d2i_SSL_SESSION(SSL_SESSION **a, const unsigned char **pp,
        -: 1650:                             long length);
        -: 1651:
        -: 1652:# ifdef HEADER_X509_H
        -: 1653:__owur X509 *SSL_get_peer_certificate(const SSL *s);
        -: 1654:# endif
        -: 1655:
        -: 1656:__owur STACK_OF(X509) *SSL_get_peer_cert_chain(const SSL *s);
        -: 1657:
        -: 1658:__owur int SSL_CTX_get_verify_mode(const SSL_CTX *ctx);
        -: 1659:__owur int SSL_CTX_get_verify_depth(const SSL_CTX *ctx);
        -: 1660:__owur SSL_verify_cb SSL_CTX_get_verify_callback(const SSL_CTX *ctx);
        -: 1661:void SSL_CTX_set_verify(SSL_CTX *ctx, int mode, SSL_verify_cb callback);
        -: 1662:void SSL_CTX_set_verify_depth(SSL_CTX *ctx, int depth);
        -: 1663:void SSL_CTX_set_cert_verify_callback(SSL_CTX *ctx,
        -: 1664:                                      int (*cb) (X509_STORE_CTX *, void *),
        -: 1665:                                      void *arg);
        -: 1666:void SSL_CTX_set_cert_cb(SSL_CTX *c, int (*cb) (SSL *ssl, void *arg),
        -: 1667:                         void *arg);
        -: 1668:# ifndef OPENSSL_NO_RSA
        -: 1669:__owur int SSL_CTX_use_RSAPrivateKey(SSL_CTX *ctx, RSA *rsa);
        -: 1670:__owur int SSL_CTX_use_RSAPrivateKey_ASN1(SSL_CTX *ctx, const unsigned char *d,
        -: 1671:                                          long len);
        -: 1672:# endif
        -: 1673:__owur int SSL_CTX_use_PrivateKey(SSL_CTX *ctx, EVP_PKEY *pkey);
        -: 1674:__owur int SSL_CTX_use_PrivateKey_ASN1(int pk, SSL_CTX *ctx,
        -: 1675:                                       const unsigned char *d, long len);
        -: 1676:__owur int SSL_CTX_use_certificate(SSL_CTX *ctx, X509 *x);
        -: 1677:__owur int SSL_CTX_use_certificate_ASN1(SSL_CTX *ctx, int len,
        -: 1678:                                        const unsigned char *d);
        -: 1679:__owur int SSL_CTX_use_cert_and_key(SSL_CTX *ctx, X509 *x509, EVP_PKEY *privatekey,
        -: 1680:                                    STACK_OF(X509) *chain, int override);
        -: 1681:
        -: 1682:void SSL_CTX_set_default_passwd_cb(SSL_CTX *ctx, pem_password_cb *cb);
        -: 1683:void SSL_CTX_set_default_passwd_cb_userdata(SSL_CTX *ctx, void *u);
        -: 1684:pem_password_cb *SSL_CTX_get_default_passwd_cb(SSL_CTX *ctx);
        -: 1685:void *SSL_CTX_get_default_passwd_cb_userdata(SSL_CTX *ctx);
        -: 1686:void SSL_set_default_passwd_cb(SSL *s, pem_password_cb *cb);
        -: 1687:void SSL_set_default_passwd_cb_userdata(SSL *s, void *u);
        -: 1688:pem_password_cb *SSL_get_default_passwd_cb(SSL *s);
        -: 1689:void *SSL_get_default_passwd_cb_userdata(SSL *s);
        -: 1690:
        -: 1691:__owur int SSL_CTX_check_private_key(const SSL_CTX *ctx);
        -: 1692:__owur int SSL_check_private_key(const SSL *ctx);
        -: 1693:
        -: 1694:__owur int SSL_CTX_set_session_id_context(SSL_CTX *ctx,
        -: 1695:                                          const unsigned char *sid_ctx,
        -: 1696:                                          unsigned int sid_ctx_len);
        -: 1697:
        -: 1698:SSL *SSL_new(SSL_CTX *ctx);
        -: 1699:int SSL_up_ref(SSL *s);
        -: 1700:int SSL_is_dtls(const SSL *s);
        -: 1701:__owur int SSL_set_session_id_context(SSL *ssl, const unsigned char *sid_ctx,
        -: 1702:                                      unsigned int sid_ctx_len);
        -: 1703:
        -: 1704:__owur int SSL_CTX_set_purpose(SSL_CTX *ctx, int purpose);
        -: 1705:__owur int SSL_set_purpose(SSL *ssl, int purpose);
        -: 1706:__owur int SSL_CTX_set_trust(SSL_CTX *ctx, int trust);
        -: 1707:__owur int SSL_set_trust(SSL *ssl, int trust);
        -: 1708:
        -: 1709:__owur int SSL_set1_host(SSL *s, const char *hostname);
        -: 1710:__owur int SSL_add1_host(SSL *s, const char *hostname);
        -: 1711:__owur const char *SSL_get0_peername(SSL *s);
        -: 1712:void SSL_set_hostflags(SSL *s, unsigned int flags);
        -: 1713:
        -: 1714:__owur int SSL_CTX_dane_enable(SSL_CTX *ctx);
        -: 1715:__owur int SSL_CTX_dane_mtype_set(SSL_CTX *ctx, const EVP_MD *md,
        -: 1716:                                  uint8_t mtype, uint8_t ord);
        -: 1717:__owur int SSL_dane_enable(SSL *s, const char *basedomain);
        -: 1718:__owur int SSL_dane_tlsa_add(SSL *s, uint8_t usage, uint8_t selector,
        -: 1719:                             uint8_t mtype, unsigned const char *data, size_t dlen);
        -: 1720:__owur int SSL_get0_dane_authority(SSL *s, X509 **mcert, EVP_PKEY **mspki);
        -: 1721:__owur int SSL_get0_dane_tlsa(SSL *s, uint8_t *usage, uint8_t *selector,
        -: 1722:                              uint8_t *mtype, unsigned const char **data,
        -: 1723:                              size_t *dlen);
        -: 1724:/*
        -: 1725: * Bridge opacity barrier between libcrypt and libssl, also needed to support
        -: 1726: * offline testing in test/danetest.c
        -: 1727: */
        -: 1728:SSL_DANE *SSL_get0_dane(SSL *ssl);
        -: 1729:/*
        -: 1730: * DANE flags
        -: 1731: */
        -: 1732:unsigned long SSL_CTX_dane_set_flags(SSL_CTX *ctx, unsigned long flags);
        -: 1733:unsigned long SSL_CTX_dane_clear_flags(SSL_CTX *ctx, unsigned long flags);
        -: 1734:unsigned long SSL_dane_set_flags(SSL *ssl, unsigned long flags);
        -: 1735:unsigned long SSL_dane_clear_flags(SSL *ssl, unsigned long flags);
        -: 1736:
        -: 1737:__owur int SSL_CTX_set1_param(SSL_CTX *ctx, X509_VERIFY_PARAM *vpm);
        -: 1738:__owur int SSL_set1_param(SSL *ssl, X509_VERIFY_PARAM *vpm);
        -: 1739:
        -: 1740:__owur X509_VERIFY_PARAM *SSL_CTX_get0_param(SSL_CTX *ctx);
        -: 1741:__owur X509_VERIFY_PARAM *SSL_get0_param(SSL *ssl);
        -: 1742:
        -: 1743:# ifndef OPENSSL_NO_SRP
        -: 1744:int SSL_CTX_set_srp_username(SSL_CTX *ctx, char *name);
        -: 1745:int SSL_CTX_set_srp_password(SSL_CTX *ctx, char *password);
        -: 1746:int SSL_CTX_set_srp_strength(SSL_CTX *ctx, int strength);
        -: 1747:int SSL_CTX_set_srp_client_pwd_callback(SSL_CTX *ctx,
        -: 1748:                                        char *(*cb) (SSL *, void *));
        -: 1749:int SSL_CTX_set_srp_verify_param_callback(SSL_CTX *ctx,
        -: 1750:                                          int (*cb) (SSL *, void *));
        -: 1751:int SSL_CTX_set_srp_username_callback(SSL_CTX *ctx,
        -: 1752:                                      int (*cb) (SSL *, int *, void *));
        -: 1753:int SSL_CTX_set_srp_cb_arg(SSL_CTX *ctx, void *arg);
        -: 1754:
        -: 1755:int SSL_set_srp_server_param(SSL *s, const BIGNUM *N, const BIGNUM *g,
        -: 1756:                             BIGNUM *sa, BIGNUM *v, char *info);
        -: 1757:int SSL_set_srp_server_param_pw(SSL *s, const char *user, const char *pass,
        -: 1758:                                const char *grp);
        -: 1759:
        -: 1760:__owur BIGNUM *SSL_get_srp_g(SSL *s);
        -: 1761:__owur BIGNUM *SSL_get_srp_N(SSL *s);
        -: 1762:
        -: 1763:__owur char *SSL_get_srp_username(SSL *s);
        -: 1764:__owur char *SSL_get_srp_userinfo(SSL *s);
        -: 1765:# endif
        -: 1766:
        -: 1767:/*
        -: 1768: * ClientHello callback and helpers.
        -: 1769: */
        -: 1770:
        -: 1771:# define SSL_CLIENT_HELLO_SUCCESS 1
        -: 1772:# define SSL_CLIENT_HELLO_ERROR   0
        -: 1773:# define SSL_CLIENT_HELLO_RETRY   (-1)
        -: 1774:
        -: 1775:typedef int (*SSL_client_hello_cb_fn) (SSL *s, int *al, void *arg);
        -: 1776:void SSL_CTX_set_client_hello_cb(SSL_CTX *c, SSL_client_hello_cb_fn cb,
        -: 1777:                                 void *arg);
        -: 1778:int SSL_client_hello_isv2(SSL *s);
        -: 1779:unsigned int SSL_client_hello_get0_legacy_version(SSL *s);
        -: 1780:size_t SSL_client_hello_get0_random(SSL *s, const unsigned char **out);
        -: 1781:size_t SSL_client_hello_get0_session_id(SSL *s, const unsigned char **out);
        -: 1782:size_t SSL_client_hello_get0_ciphers(SSL *s, const unsigned char **out);
        -: 1783:size_t SSL_client_hello_get0_compression_methods(SSL *s,
        -: 1784:                                                 const unsigned char **out);
        -: 1785:int SSL_client_hello_get1_extensions_present(SSL *s, int **out, size_t *outlen);
        -: 1786:int SSL_client_hello_get0_ext(SSL *s, unsigned int type,
        -: 1787:                              const unsigned char **out, size_t *outlen);
        -: 1788:
        -: 1789:void SSL_certs_clear(SSL *s);
        -: 1790:void SSL_free(SSL *ssl);
        -: 1791:# ifdef OSSL_ASYNC_FD
        -: 1792:/*
        -: 1793: * Windows application developer has to include windows.h to use these.
        -: 1794: */
        -: 1795:__owur int SSL_waiting_for_async(SSL *s);
        -: 1796:__owur int SSL_get_all_async_fds(SSL *s, OSSL_ASYNC_FD *fds, size_t *numfds);
        -: 1797:__owur int SSL_get_changed_async_fds(SSL *s, OSSL_ASYNC_FD *addfd,
        -: 1798:                                     size_t *numaddfds, OSSL_ASYNC_FD *delfd,
        -: 1799:                                     size_t *numdelfds);
        -: 1800:# endif
        -: 1801:__owur int SSL_accept(SSL *ssl);
        -: 1802:__owur int SSL_stateless(SSL *s);
        -: 1803:__owur int SSL_connect(SSL *ssl);
        -: 1804:__owur int SSL_read(SSL *ssl, void *buf, int num);
        -: 1805:__owur int SSL_read_ex(SSL *ssl, void *buf, size_t num, size_t *readbytes);
        -: 1806:
        -: 1807:# define SSL_READ_EARLY_DATA_ERROR   0
        -: 1808:# define SSL_READ_EARLY_DATA_SUCCESS 1
        -: 1809:# define SSL_READ_EARLY_DATA_FINISH  2
        -: 1810:
        -: 1811:__owur int SSL_read_early_data(SSL *s, void *buf, size_t num,
        -: 1812:                               size_t *readbytes);
        -: 1813:__owur int SSL_peek(SSL *ssl, void *buf, int num);
        -: 1814:__owur int SSL_peek_ex(SSL *ssl, void *buf, size_t num, size_t *readbytes);
        -: 1815:__owur int SSL_write(SSL *ssl, const void *buf, int num);
        -: 1816:__owur int SSL_write_ex(SSL *s, const void *buf, size_t num, size_t *written);
        -: 1817:__owur int SSL_write_early_data(SSL *s, const void *buf, size_t num,
        -: 1818:                                size_t *written);
        -: 1819:long SSL_ctrl(SSL *ssl, int cmd, long larg, void *parg);
        -: 1820:long SSL_callback_ctrl(SSL *, int, void (*)(void));
        -: 1821:long SSL_CTX_ctrl(SSL_CTX *ctx, int cmd, long larg, void *parg);
        -: 1822:long SSL_CTX_callback_ctrl(SSL_CTX *, int, void (*)(void));
        -: 1823:
        -: 1824:# define SSL_EARLY_DATA_NOT_SENT    0
        -: 1825:# define SSL_EARLY_DATA_REJECTED    1
        -: 1826:# define SSL_EARLY_DATA_ACCEPTED    2
        -: 1827:
        -: 1828:__owur int SSL_get_early_data_status(const SSL *s);
        -: 1829:
        -: 1830:__owur int SSL_get_error(const SSL *s, int ret_code);
        -: 1831:__owur const char *SSL_get_version(const SSL *s);
        -: 1832:
        -: 1833:/* This sets the 'default' SSL version that SSL_new() will create */
        -: 1834:__owur int SSL_CTX_set_ssl_version(SSL_CTX *ctx, const SSL_METHOD *meth);
        -: 1835:
        -: 1836:# ifndef OPENSSL_NO_SSL3_METHOD
        -: 1837:DEPRECATEDIN_1_1_0(__owur const SSL_METHOD *SSLv3_method(void)) /* SSLv3 */
        -: 1838:DEPRECATEDIN_1_1_0(__owur const SSL_METHOD *SSLv3_server_method(void))
        -: 1839:DEPRECATEDIN_1_1_0(__owur const SSL_METHOD *SSLv3_client_method(void))
        -: 1840:# endif
        -: 1841:
        -: 1842:#define SSLv23_method           TLS_method
        -: 1843:#define SSLv23_server_method    TLS_server_method
        -: 1844:#define SSLv23_client_method    TLS_client_method
        -: 1845:
        -: 1846:/* Negotiate highest available SSL/TLS version */
        -: 1847:__owur const SSL_METHOD *TLS_method(void);
        -: 1848:__owur const SSL_METHOD *TLS_server_method(void);
        -: 1849:__owur const SSL_METHOD *TLS_client_method(void);
        -: 1850:
        -: 1851:# ifndef OPENSSL_NO_TLS1_METHOD
        -: 1852:DEPRECATEDIN_1_1_0(__owur const SSL_METHOD *TLSv1_method(void)) /* TLSv1.0 */
        -: 1853:DEPRECATEDIN_1_1_0(__owur const SSL_METHOD *TLSv1_server_method(void))
        -: 1854:DEPRECATEDIN_1_1_0(__owur const SSL_METHOD *TLSv1_client_method(void))
        -: 1855:# endif
        -: 1856:
        -: 1857:# ifndef OPENSSL_NO_TLS1_1_METHOD
        -: 1858:DEPRECATEDIN_1_1_0(__owur const SSL_METHOD *TLSv1_1_method(void)) /* TLSv1.1 */
        -: 1859:DEPRECATEDIN_1_1_0(__owur const SSL_METHOD *TLSv1_1_server_method(void))
        -: 1860:DEPRECATEDIN_1_1_0(__owur const SSL_METHOD *TLSv1_1_client_method(void))
        -: 1861:# endif
        -: 1862:
        -: 1863:# ifndef OPENSSL_NO_TLS1_2_METHOD
        -: 1864:DEPRECATEDIN_1_1_0(__owur const SSL_METHOD *TLSv1_2_method(void)) /* TLSv1.2 */
        -: 1865:DEPRECATEDIN_1_1_0(__owur const SSL_METHOD *TLSv1_2_server_method(void))
        -: 1866:DEPRECATEDIN_1_1_0(__owur const SSL_METHOD *TLSv1_2_client_method(void))
        -: 1867:# endif
        -: 1868:
        -: 1869:# ifndef OPENSSL_NO_DTLS1_METHOD
        -: 1870:DEPRECATEDIN_1_1_0(__owur const SSL_METHOD *DTLSv1_method(void)) /* DTLSv1.0 */
        -: 1871:DEPRECATEDIN_1_1_0(__owur const SSL_METHOD *DTLSv1_server_method(void))
        -: 1872:DEPRECATEDIN_1_1_0(__owur const SSL_METHOD *DTLSv1_client_method(void))
        -: 1873:# endif
        -: 1874:
        -: 1875:# ifndef OPENSSL_NO_DTLS1_2_METHOD
        -: 1876:/* DTLSv1.2 */
        -: 1877:DEPRECATEDIN_1_1_0(__owur const SSL_METHOD *DTLSv1_2_method(void))
        -: 1878:DEPRECATEDIN_1_1_0(__owur const SSL_METHOD *DTLSv1_2_server_method(void))
        -: 1879:DEPRECATEDIN_1_1_0(__owur const SSL_METHOD *DTLSv1_2_client_method(void))
        -: 1880:# endif
        -: 1881:
        -: 1882:__owur const SSL_METHOD *DTLS_method(void); /* DTLS 1.0 and 1.2 */
        -: 1883:__owur const SSL_METHOD *DTLS_server_method(void); /* DTLS 1.0 and 1.2 */
        -: 1884:__owur const SSL_METHOD *DTLS_client_method(void); /* DTLS 1.0 and 1.2 */
        -: 1885:
        -: 1886:__owur size_t DTLS_get_data_mtu(const SSL *s);
        -: 1887:
        -: 1888:__owur STACK_OF(SSL_CIPHER) *SSL_get_ciphers(const SSL *s);
        -: 1889:__owur STACK_OF(SSL_CIPHER) *SSL_CTX_get_ciphers(const SSL_CTX *ctx);
        -: 1890:__owur STACK_OF(SSL_CIPHER) *SSL_get_client_ciphers(const SSL *s);
        -: 1891:__owur STACK_OF(SSL_CIPHER) *SSL_get1_supported_ciphers(SSL *s);
        -: 1892:
        -: 1893:__owur int SSL_do_handshake(SSL *s);
        -: 1894:int SSL_key_update(SSL *s, int updatetype);
        -: 1895:int SSL_get_key_update_type(SSL *s);
        -: 1896:int SSL_renegotiate(SSL *s);
        -: 1897:int SSL_renegotiate_abbreviated(SSL *s);
        -: 1898:__owur int SSL_renegotiate_pending(SSL *s);
        -: 1899:int SSL_shutdown(SSL *s);
        -: 1900:__owur int SSL_verify_client_post_handshake(SSL *s);
        -: 1901:void SSL_CTX_set_post_handshake_auth(SSL_CTX *ctx, int val);
        -: 1902:void SSL_set_post_handshake_auth(SSL *s, int val);
        -: 1903:
        -: 1904:__owur const SSL_METHOD *SSL_CTX_get_ssl_method(SSL_CTX *ctx);
        -: 1905:__owur const SSL_METHOD *SSL_get_ssl_method(SSL *s);
        -: 1906:__owur int SSL_set_ssl_method(SSL *s, const SSL_METHOD *method);
        -: 1907:__owur const char *SSL_alert_type_string_long(int value);
        -: 1908:__owur const char *SSL_alert_type_string(int value);
        -: 1909:__owur const char *SSL_alert_desc_string_long(int value);
        -: 1910:__owur const char *SSL_alert_desc_string(int value);
        -: 1911:
        -: 1912:void SSL_set0_CA_list(SSL *s, STACK_OF(X509_NAME) *name_list);
        -: 1913:void SSL_CTX_set0_CA_list(SSL_CTX *ctx, STACK_OF(X509_NAME) *name_list);
        -: 1914:__owur const STACK_OF(X509_NAME) *SSL_get0_CA_list(const SSL *s);
        -: 1915:__owur const STACK_OF(X509_NAME) *SSL_CTX_get0_CA_list(const SSL_CTX *ctx);
        -: 1916:__owur int SSL_add1_to_CA_list(SSL *ssl, const X509 *x);
        -: 1917:__owur int SSL_CTX_add1_to_CA_list(SSL_CTX *ctx, const X509 *x);
        -: 1918:__owur const STACK_OF(X509_NAME) *SSL_get0_peer_CA_list(const SSL *s);
        -: 1919:
        -: 1920:void SSL_set_client_CA_list(SSL *s, STACK_OF(X509_NAME) *name_list);
        -: 1921:void SSL_CTX_set_client_CA_list(SSL_CTX *ctx, STACK_OF(X509_NAME) *name_list);
        -: 1922:__owur STACK_OF(X509_NAME) *SSL_get_client_CA_list(const SSL *s);
        -: 1923:__owur STACK_OF(X509_NAME) *SSL_CTX_get_client_CA_list(const SSL_CTX *s);
        -: 1924:__owur int SSL_add_client_CA(SSL *ssl, X509 *x);
        -: 1925:__owur int SSL_CTX_add_client_CA(SSL_CTX *ctx, X509 *x);
        -: 1926:
        -: 1927:void SSL_set_connect_state(SSL *s);
        -: 1928:void SSL_set_accept_state(SSL *s);
        -: 1929:
        -: 1930:__owur long SSL_get_default_timeout(const SSL *s);
        -: 1931:
        -: 1932:# if OPENSSL_API_COMPAT < 0x10100000L
        -: 1933:#  define SSL_library_init() OPENSSL_init_ssl(0, NULL)
        -: 1934:# endif
        -: 1935:
        -: 1936:__owur char *SSL_CIPHER_description(const SSL_CIPHER *, char *buf, int size);
        -: 1937:__owur STACK_OF(X509_NAME) *SSL_dup_CA_list(const STACK_OF(X509_NAME) *sk);
        -: 1938:
        -: 1939:__owur SSL *SSL_dup(SSL *ssl);
        -: 1940:
        -: 1941:__owur X509 *SSL_get_certificate(const SSL *ssl);
        -: 1942:/*
        -: 1943: * EVP_PKEY
        -: 1944: */
        -: 1945:struct evp_pkey_st *SSL_get_privatekey(const SSL *ssl);
        -: 1946:
        -: 1947:__owur X509 *SSL_CTX_get0_certificate(const SSL_CTX *ctx);
        -: 1948:__owur EVP_PKEY *SSL_CTX_get0_privatekey(const SSL_CTX *ctx);
        -: 1949:
        -: 1950:void SSL_CTX_set_quiet_shutdown(SSL_CTX *ctx, int mode);
        -: 1951:__owur int SSL_CTX_get_quiet_shutdown(const SSL_CTX *ctx);
        -: 1952:void SSL_set_quiet_shutdown(SSL *ssl, int mode);
        -: 1953:__owur int SSL_get_quiet_shutdown(const SSL *ssl);
        -: 1954:void SSL_set_shutdown(SSL *ssl, int mode);
        -: 1955:__owur int SSL_get_shutdown(const SSL *ssl);
        -: 1956:__owur int SSL_version(const SSL *ssl);
        -: 1957:__owur int SSL_client_version(const SSL *s);
        -: 1958:__owur int SSL_CTX_set_default_verify_paths(SSL_CTX *ctx);
        -: 1959:__owur int SSL_CTX_set_default_verify_dir(SSL_CTX *ctx);
        -: 1960:__owur int SSL_CTX_set_default_verify_file(SSL_CTX *ctx);
        -: 1961:__owur int SSL_CTX_load_verify_locations(SSL_CTX *ctx, const char *CAfile,
        -: 1962:                                         const char *CApath);
        -: 1963:# define SSL_get0_session SSL_get_session/* just peek at pointer */
        -: 1964:__owur SSL_SESSION *SSL_get_session(const SSL *ssl);
        -: 1965:__owur SSL_SESSION *SSL_get1_session(SSL *ssl); /* obtain a reference count */
        -: 1966:__owur SSL_CTX *SSL_get_SSL_CTX(const SSL *ssl);
        -: 1967:SSL_CTX *SSL_set_SSL_CTX(SSL *ssl, SSL_CTX *ctx);
        -: 1968:void SSL_set_info_callback(SSL *ssl,
        -: 1969:                           void (*cb) (const SSL *ssl, int type, int val));
        -: 1970:void (*SSL_get_info_callback(const SSL *ssl)) (const SSL *ssl, int type,
        -: 1971:                                               int val);
        -: 1972:__owur OSSL_HANDSHAKE_STATE SSL_get_state(const SSL *ssl);
        -: 1973:
        -: 1974:void SSL_set_verify_result(SSL *ssl, long v);
        -: 1975:__owur long SSL_get_verify_result(const SSL *ssl);
        -: 1976:__owur STACK_OF(X509) *SSL_get0_verified_chain(const SSL *s);
        -: 1977:
        -: 1978:__owur size_t SSL_get_client_random(const SSL *ssl, unsigned char *out,
        -: 1979:                                    size_t outlen);
        -: 1980:__owur size_t SSL_get_server_random(const SSL *ssl, unsigned char *out,
        -: 1981:                                    size_t outlen);
        -: 1982:__owur size_t SSL_SESSION_get_master_key(const SSL_SESSION *sess,
        -: 1983:                                         unsigned char *out, size_t outlen);
        -: 1984:__owur int SSL_SESSION_set1_master_key(SSL_SESSION *sess,
        -: 1985:                                       const unsigned char *in, size_t len);
        -: 1986:uint8_t SSL_SESSION_get_max_fragment_length(const SSL_SESSION *sess);
        -: 1987:
        -: 1988:#define SSL_get_ex_new_index(l, p, newf, dupf, freef) \
        -: 1989:    CRYPTO_get_ex_new_index(CRYPTO_EX_INDEX_SSL, l, p, newf, dupf, freef)
        -: 1990:__owur int SSL_set_ex_data(SSL *ssl, int idx, void *data);
        -: 1991:void *SSL_get_ex_data(const SSL *ssl, int idx);
        -: 1992:#define SSL_SESSION_get_ex_new_index(l, p, newf, dupf, freef) \
        -: 1993:    CRYPTO_get_ex_new_index(CRYPTO_EX_INDEX_SSL_SESSION, l, p, newf, dupf, freef)
        -: 1994:__owur int SSL_SESSION_set_ex_data(SSL_SESSION *ss, int idx, void *data);
        -: 1995:void *SSL_SESSION_get_ex_data(const SSL_SESSION *ss, int idx);
        -: 1996:#define SSL_CTX_get_ex_new_index(l, p, newf, dupf, freef) \
        -: 1997:    CRYPTO_get_ex_new_index(CRYPTO_EX_INDEX_SSL_CTX, l, p, newf, dupf, freef)
        -: 1998:__owur int SSL_CTX_set_ex_data(SSL_CTX *ssl, int idx, void *data);
        -: 1999:void *SSL_CTX_get_ex_data(const SSL_CTX *ssl, int idx);
        -: 2000:
        -: 2001:__owur int SSL_get_ex_data_X509_STORE_CTX_idx(void);
        -: 2002:
        -: 2003:# define SSL_CTX_sess_set_cache_size(ctx,t) \
        -: 2004:        SSL_CTX_ctrl(ctx,SSL_CTRL_SET_SESS_CACHE_SIZE,t,NULL)
        -: 2005:# define SSL_CTX_sess_get_cache_size(ctx) \
        -: 2006:        SSL_CTX_ctrl(ctx,SSL_CTRL_GET_SESS_CACHE_SIZE,0,NULL)
        -: 2007:# define SSL_CTX_set_session_cache_mode(ctx,m) \
        -: 2008:        SSL_CTX_ctrl(ctx,SSL_CTRL_SET_SESS_CACHE_MODE,m,NULL)
        -: 2009:# define SSL_CTX_get_session_cache_mode(ctx) \
        -: 2010:        SSL_CTX_ctrl(ctx,SSL_CTRL_GET_SESS_CACHE_MODE,0,NULL)
        -: 2011:
        -: 2012:# define SSL_CTX_get_default_read_ahead(ctx) SSL_CTX_get_read_ahead(ctx)
        -: 2013:# define SSL_CTX_set_default_read_ahead(ctx,m) SSL_CTX_set_read_ahead(ctx,m)
        -: 2014:# define SSL_CTX_get_read_ahead(ctx) \
        -: 2015:        SSL_CTX_ctrl(ctx,SSL_CTRL_GET_READ_AHEAD,0,NULL)
        -: 2016:# define SSL_CTX_set_read_ahead(ctx,m) \
        -: 2017:        SSL_CTX_ctrl(ctx,SSL_CTRL_SET_READ_AHEAD,m,NULL)
        -: 2018:# define SSL_CTX_get_max_cert_list(ctx) \
        -: 2019:        SSL_CTX_ctrl(ctx,SSL_CTRL_GET_MAX_CERT_LIST,0,NULL)
        -: 2020:# define SSL_CTX_set_max_cert_list(ctx,m) \
        -: 2021:        SSL_CTX_ctrl(ctx,SSL_CTRL_SET_MAX_CERT_LIST,m,NULL)
        -: 2022:# define SSL_get_max_cert_list(ssl) \
        -: 2023:        SSL_ctrl(ssl,SSL_CTRL_GET_MAX_CERT_LIST,0,NULL)
        -: 2024:# define SSL_set_max_cert_list(ssl,m) \
        -: 2025:        SSL_ctrl(ssl,SSL_CTRL_SET_MAX_CERT_LIST,m,NULL)
        -: 2026:
        -: 2027:# define SSL_CTX_set_max_send_fragment(ctx,m) \
        -: 2028:        SSL_CTX_ctrl(ctx,SSL_CTRL_SET_MAX_SEND_FRAGMENT,m,NULL)
        -: 2029:# define SSL_set_max_send_fragment(ssl,m) \
        -: 2030:        SSL_ctrl(ssl,SSL_CTRL_SET_MAX_SEND_FRAGMENT,m,NULL)
        -: 2031:# define SSL_CTX_set_split_send_fragment(ctx,m) \
        -: 2032:        SSL_CTX_ctrl(ctx,SSL_CTRL_SET_SPLIT_SEND_FRAGMENT,m,NULL)
        -: 2033:# define SSL_set_split_send_fragment(ssl,m) \
        -: 2034:        SSL_ctrl(ssl,SSL_CTRL_SET_SPLIT_SEND_FRAGMENT,m,NULL)
        -: 2035:# define SSL_CTX_set_max_pipelines(ctx,m) \
        -: 2036:        SSL_CTX_ctrl(ctx,SSL_CTRL_SET_MAX_PIPELINES,m,NULL)
        -: 2037:# define SSL_set_max_pipelines(ssl,m) \
        -: 2038:        SSL_ctrl(ssl,SSL_CTRL_SET_MAX_PIPELINES,m,NULL)
        -: 2039:
        -: 2040:void SSL_CTX_set_default_read_buffer_len(SSL_CTX *ctx, size_t len);
        -: 2041:void SSL_set_default_read_buffer_len(SSL *s, size_t len);
        -: 2042:
        -: 2043:# ifndef OPENSSL_NO_DH
        -: 2044:/* NB: the |keylength| is only applicable when is_export is true */
        -: 2045:void SSL_CTX_set_tmp_dh_callback(SSL_CTX *ctx,
        -: 2046:                                 DH *(*dh) (SSL *ssl, int is_export,
        -: 2047:                                            int keylength));
        -: 2048:void SSL_set_tmp_dh_callback(SSL *ssl,
        -: 2049:                             DH *(*dh) (SSL *ssl, int is_export,
        -: 2050:                                        int keylength));
        -: 2051:# endif
        -: 2052:
        -: 2053:__owur const COMP_METHOD *SSL_get_current_compression(SSL *s);
        -: 2054:__owur const COMP_METHOD *SSL_get_current_expansion(SSL *s);
        -: 2055:__owur const char *SSL_COMP_get_name(const COMP_METHOD *comp);
        -: 2056:__owur const char *SSL_COMP_get0_name(const SSL_COMP *comp);
        -: 2057:__owur int SSL_COMP_get_id(const SSL_COMP *comp);
        -: 2058:STACK_OF(SSL_COMP) *SSL_COMP_get_compression_methods(void);
        -: 2059:__owur STACK_OF(SSL_COMP) *SSL_COMP_set0_compression_methods(STACK_OF(SSL_COMP)
        -: 2060:                                                             *meths);
        -: 2061:# if OPENSSL_API_COMPAT < 0x10100000L
        -: 2062:#  define SSL_COMP_free_compression_methods() while(0) continue
        -: 2063:# endif
        -: 2064:__owur int SSL_COMP_add_compression_method(int id, COMP_METHOD *cm);
        -: 2065:
        -: 2066:const SSL_CIPHER *SSL_CIPHER_find(SSL *ssl, const unsigned char *ptr);
        -: 2067:int SSL_CIPHER_get_cipher_nid(const SSL_CIPHER *c);
        -: 2068:int SSL_CIPHER_get_digest_nid(const SSL_CIPHER *c);
        -: 2069:int SSL_bytes_to_cipher_list(SSL *s, const unsigned char *bytes, size_t len,
        -: 2070:                             int isv2format, STACK_OF(SSL_CIPHER) **sk,
        -: 2071:                             STACK_OF(SSL_CIPHER) **scsvs);
        -: 2072:
        -: 2073:/* TLS extensions functions */
        -: 2074:__owur int SSL_set_session_ticket_ext(SSL *s, void *ext_data, int ext_len);
        -: 2075:
        -: 2076:__owur int SSL_set_session_ticket_ext_cb(SSL *s,
        -: 2077:                                         tls_session_ticket_ext_cb_fn cb,
        -: 2078:                                         void *arg);
        -: 2079:
        -: 2080:/* Pre-shared secret session resumption functions */
        -: 2081:__owur int SSL_set_session_secret_cb(SSL *s,
        -: 2082:                                     tls_session_secret_cb_fn session_secret_cb,
        -: 2083:                                     void *arg);
        -: 2084:
        -: 2085:void SSL_CTX_set_not_resumable_session_callback(SSL_CTX *ctx,
        -: 2086:                                                int (*cb) (SSL *ssl,
        -: 2087:                                                           int
        -: 2088:                                                           is_forward_secure));
        -: 2089:
        -: 2090:void SSL_set_not_resumable_session_callback(SSL *ssl,
        -: 2091:                                            int (*cb) (SSL *ssl,
        -: 2092:                                                       int is_forward_secure));
        -: 2093:
        -: 2094:void SSL_CTX_set_record_padding_callback(SSL_CTX *ctx,
        -: 2095:                                         size_t (*cb) (SSL *ssl, int type,
        -: 2096:                                                       size_t len, void *arg));
        -: 2097:void SSL_CTX_set_record_padding_callback_arg(SSL_CTX *ctx, void *arg);
        -: 2098:void *SSL_CTX_get_record_padding_callback_arg(SSL_CTX *ctx);
        -: 2099:int SSL_CTX_set_block_padding(SSL_CTX *ctx, size_t block_size);
        -: 2100:
        -: 2101:void SSL_set_record_padding_callback(SSL *ssl,
        -: 2102:                                    size_t (*cb) (SSL *ssl, int type,
        -: 2103:                                                  size_t len, void *arg));
        -: 2104:void SSL_set_record_padding_callback_arg(SSL *ssl, void *arg);
        -: 2105:void *SSL_get_record_padding_callback_arg(SSL *ssl);
        -: 2106:int SSL_set_block_padding(SSL *ssl, size_t block_size);
        -: 2107:
        -: 2108:int SSL_set_num_tickets(SSL *s, size_t num_tickets);
        -: 2109:size_t SSL_get_num_tickets(SSL *s);
        -: 2110:int SSL_CTX_set_num_tickets(SSL_CTX *ctx, size_t num_tickets);
        -: 2111:size_t SSL_CTX_get_num_tickets(SSL_CTX *ctx);
        -: 2112:
        -: 2113:# if OPENSSL_API_COMPAT < 0x10100000L
        -: 2114:#  define SSL_cache_hit(s) SSL_session_reused(s)
        -: 2115:# endif
        -: 2116:
        -: 2117:__owur int SSL_session_reused(SSL *s);
        -: 2118:__owur int SSL_is_server(const SSL *s);
        -: 2119:
        -: 2120:__owur __owur SSL_CONF_CTX *SSL_CONF_CTX_new(void);
        -: 2121:int SSL_CONF_CTX_finish(SSL_CONF_CTX *cctx);
        -: 2122:void SSL_CONF_CTX_free(SSL_CONF_CTX *cctx);
        -: 2123:unsigned int SSL_CONF_CTX_set_flags(SSL_CONF_CTX *cctx, unsigned int flags);
        -: 2124:__owur unsigned int SSL_CONF_CTX_clear_flags(SSL_CONF_CTX *cctx,
        -: 2125:                                             unsigned int flags);
        -: 2126:__owur int SSL_CONF_CTX_set1_prefix(SSL_CONF_CTX *cctx, const char *pre);
        -: 2127:
        -: 2128:void SSL_CONF_CTX_set_ssl(SSL_CONF_CTX *cctx, SSL *ssl);
        -: 2129:void SSL_CONF_CTX_set_ssl_ctx(SSL_CONF_CTX *cctx, SSL_CTX *ctx);
        -: 2130:
        -: 2131:__owur int SSL_CONF_cmd(SSL_CONF_CTX *cctx, const char *cmd, const char *value);
        -: 2132:__owur int SSL_CONF_cmd_argv(SSL_CONF_CTX *cctx, int *pargc, char ***pargv);
        -: 2133:__owur int SSL_CONF_cmd_value_type(SSL_CONF_CTX *cctx, const char *cmd);
        -: 2134:
        -: 2135:void SSL_add_ssl_module(void);
        -: 2136:int SSL_config(SSL *s, const char *name);
        -: 2137:int SSL_CTX_config(SSL_CTX *ctx, const char *name);
        -: 2138:
        -: 2139:# ifndef OPENSSL_NO_SSL_TRACE
        -: 2140:void SSL_trace(int write_p, int version, int content_type,
        -: 2141:               const void *buf, size_t len, SSL *ssl, void *arg);
        -: 2142:# endif
        -: 2143:
        -: 2144:# ifndef OPENSSL_NO_SOCK
        -: 2145:int DTLSv1_listen(SSL *s, BIO_ADDR *client);
        -: 2146:# endif
        -: 2147:
        -: 2148:# ifndef OPENSSL_NO_CT
        -: 2149:
        -: 2150:/*
        -: 2151: * A callback for verifying that the received SCTs are sufficient.
        -: 2152: * Expected to return 1 if they are sufficient, otherwise 0.
        -: 2153: * May return a negative integer if an error occurs.
        -: 2154: * A connection should be aborted if the SCTs are deemed insufficient.
        -: 2155: */
        -: 2156:typedef int (*ssl_ct_validation_cb)(const CT_POLICY_EVAL_CTX *ctx,
        -: 2157:                                    const STACK_OF(SCT) *scts, void *arg);
        -: 2158:
        -: 2159:/*
        -: 2160: * Sets a |callback| that is invoked upon receipt of ServerHelloDone to validate
        -: 2161: * the received SCTs.
        -: 2162: * If the callback returns a non-positive result, the connection is terminated.
        -: 2163: * Call this function before beginning a handshake.
        -: 2164: * If a NULL |callback| is provided, SCT validation is disabled.
        -: 2165: * |arg| is arbitrary userdata that will be passed to the callback whenever it
        -: 2166: * is invoked. Ownership of |arg| remains with the caller.
        -: 2167: *
        -: 2168: * NOTE: A side-effect of setting a CT callback is that an OCSP stapled response
        -: 2169: *       will be requested.
        -: 2170: */
        -: 2171:int SSL_set_ct_validation_callback(SSL *s, ssl_ct_validation_cb callback,
        -: 2172:                                   void *arg);
        -: 2173:int SSL_CTX_set_ct_validation_callback(SSL_CTX *ctx,
        -: 2174:                                       ssl_ct_validation_cb callback,
        -: 2175:                                       void *arg);
        -: 2176:#define SSL_disable_ct(s) \
        -: 2177:        ((void) SSL_set_validation_callback((s), NULL, NULL))
        -: 2178:#define SSL_CTX_disable_ct(ctx) \
        -: 2179:        ((void) SSL_CTX_set_validation_callback((ctx), NULL, NULL))
        -: 2180:
        -: 2181:/*
        -: 2182: * The validation type enumerates the available behaviours of the built-in SSL
        -: 2183: * CT validation callback selected via SSL_enable_ct() and SSL_CTX_enable_ct().
        -: 2184: * The underlying callback is a static function in libssl.
        -: 2185: */
        -: 2186:enum {
        -: 2187:    SSL_CT_VALIDATION_PERMISSIVE = 0,
        -: 2188:    SSL_CT_VALIDATION_STRICT
        -: 2189:};
        -: 2190:
        -: 2191:/*
        -: 2192: * Enable CT by setting up a callback that implements one of the built-in
        -: 2193: * validation variants.  The SSL_CT_VALIDATION_PERMISSIVE variant always
        -: 2194: * continues the handshake, the application can make appropriate decisions at
        -: 2195: * handshake completion.  The SSL_CT_VALIDATION_STRICT variant requires at
        -: 2196: * least one valid SCT, or else handshake termination will be requested.  The
        -: 2197: * handshake may continue anyway if SSL_VERIFY_NONE is in effect.
        -: 2198: */
        -: 2199:int SSL_enable_ct(SSL *s, int validation_mode);
        -: 2200:int SSL_CTX_enable_ct(SSL_CTX *ctx, int validation_mode);
        -: 2201:
        -: 2202:/*
        -: 2203: * Report whether a non-NULL callback is enabled.
        -: 2204: */
        -: 2205:int SSL_ct_is_enabled(const SSL *s);
        -: 2206:int SSL_CTX_ct_is_enabled(const SSL_CTX *ctx);
        -: 2207:
        -: 2208:/* Gets the SCTs received from a connection */
        -: 2209:const STACK_OF(SCT) *SSL_get0_peer_scts(SSL *s);
        -: 2210:
        -: 2211:/*
        -: 2212: * Loads the CT log list from the default location.
        -: 2213: * If a CTLOG_STORE has previously been set using SSL_CTX_set_ctlog_store,
        -: 2214: * the log information loaded from this file will be appended to the
        -: 2215: * CTLOG_STORE.
        -: 2216: * Returns 1 on success, 0 otherwise.
        -: 2217: */
        -: 2218:int SSL_CTX_set_default_ctlog_list_file(SSL_CTX *ctx);
        -: 2219:
        -: 2220:/*
        -: 2221: * Loads the CT log list from the specified file path.
        -: 2222: * If a CTLOG_STORE has previously been set using SSL_CTX_set_ctlog_store,
        -: 2223: * the log information loaded from this file will be appended to the
        -: 2224: * CTLOG_STORE.
        -: 2225: * Returns 1 on success, 0 otherwise.
        -: 2226: */
        -: 2227:int SSL_CTX_set_ctlog_list_file(SSL_CTX *ctx, const char *path);
        -: 2228:
        -: 2229:/*
        -: 2230: * Sets the CT log list used by all SSL connections created from this SSL_CTX.
        -: 2231: * Ownership of the CTLOG_STORE is transferred to the SSL_CTX.
        -: 2232: */
        -: 2233:void SSL_CTX_set0_ctlog_store(SSL_CTX *ctx, CTLOG_STORE *logs);
        -: 2234:
        -: 2235:/*
        -: 2236: * Gets the CT log list used by all SSL connections created from this SSL_CTX.
        -: 2237: * This will be NULL unless one of the following functions has been called:
        -: 2238: * - SSL_CTX_set_default_ctlog_list_file
        -: 2239: * - SSL_CTX_set_ctlog_list_file
        -: 2240: * - SSL_CTX_set_ctlog_store
        -: 2241: */
        -: 2242:const CTLOG_STORE *SSL_CTX_get0_ctlog_store(const SSL_CTX *ctx);
        -: 2243:
        -: 2244:# endif /* OPENSSL_NO_CT */
        -: 2245:
        -: 2246:/* What the "other" parameter contains in security callback */
        -: 2247:/* Mask for type */
        -: 2248:# define SSL_SECOP_OTHER_TYPE    0xffff0000
        -: 2249:# define SSL_SECOP_OTHER_NONE    0
        -: 2250:# define SSL_SECOP_OTHER_CIPHER  (1 << 16)
        -: 2251:# define SSL_SECOP_OTHER_CURVE   (2 << 16)
        -: 2252:# define SSL_SECOP_OTHER_DH      (3 << 16)
        -: 2253:# define SSL_SECOP_OTHER_PKEY    (4 << 16)
        -: 2254:# define SSL_SECOP_OTHER_SIGALG  (5 << 16)
        -: 2255:# define SSL_SECOP_OTHER_CERT    (6 << 16)
        -: 2256:
        -: 2257:/* Indicated operation refers to peer key or certificate */
        -: 2258:# define SSL_SECOP_PEER          0x1000
        -: 2259:
        -: 2260:/* Values for "op" parameter in security callback */
        -: 2261:
        -: 2262:/* Called to filter ciphers */
        -: 2263:/* Ciphers client supports */
        -: 2264:# define SSL_SECOP_CIPHER_SUPPORTED      (1 | SSL_SECOP_OTHER_CIPHER)
        -: 2265:/* Cipher shared by client/server */
        -: 2266:# define SSL_SECOP_CIPHER_SHARED         (2 | SSL_SECOP_OTHER_CIPHER)
        -: 2267:/* Sanity check of cipher server selects */
        -: 2268:# define SSL_SECOP_CIPHER_CHECK          (3 | SSL_SECOP_OTHER_CIPHER)
        -: 2269:/* Curves supported by client */
        -: 2270:# define SSL_SECOP_CURVE_SUPPORTED       (4 | SSL_SECOP_OTHER_CURVE)
        -: 2271:/* Curves shared by client/server */
        -: 2272:# define SSL_SECOP_CURVE_SHARED          (5 | SSL_SECOP_OTHER_CURVE)
        -: 2273:/* Sanity check of curve server selects */
        -: 2274:# define SSL_SECOP_CURVE_CHECK           (6 | SSL_SECOP_OTHER_CURVE)
        -: 2275:/* Temporary DH key */
        -: 2276:# define SSL_SECOP_TMP_DH                (7 | SSL_SECOP_OTHER_PKEY)
        -: 2277:/* SSL/TLS version */
        -: 2278:# define SSL_SECOP_VERSION               (9 | SSL_SECOP_OTHER_NONE)
        -: 2279:/* Session tickets */
        -: 2280:# define SSL_SECOP_TICKET                (10 | SSL_SECOP_OTHER_NONE)
        -: 2281:/* Supported signature algorithms sent to peer */
        -: 2282:# define SSL_SECOP_SIGALG_SUPPORTED      (11 | SSL_SECOP_OTHER_SIGALG)
        -: 2283:/* Shared signature algorithm */
        -: 2284:# define SSL_SECOP_SIGALG_SHARED         (12 | SSL_SECOP_OTHER_SIGALG)
        -: 2285:/* Sanity check signature algorithm allowed */
        -: 2286:# define SSL_SECOP_SIGALG_CHECK          (13 | SSL_SECOP_OTHER_SIGALG)
        -: 2287:/* Used to get mask of supported public key signature algorithms */
        -: 2288:# define SSL_SECOP_SIGALG_MASK           (14 | SSL_SECOP_OTHER_SIGALG)
        -: 2289:/* Use to see if compression is allowed */
        -: 2290:# define SSL_SECOP_COMPRESSION           (15 | SSL_SECOP_OTHER_NONE)
        -: 2291:/* EE key in certificate */
        -: 2292:# define SSL_SECOP_EE_KEY                (16 | SSL_SECOP_OTHER_CERT)
        -: 2293:/* CA key in certificate */
        -: 2294:# define SSL_SECOP_CA_KEY                (17 | SSL_SECOP_OTHER_CERT)
        -: 2295:/* CA digest algorithm in certificate */
        -: 2296:# define SSL_SECOP_CA_MD                 (18 | SSL_SECOP_OTHER_CERT)
        -: 2297:/* Peer EE key in certificate */
        -: 2298:# define SSL_SECOP_PEER_EE_KEY           (SSL_SECOP_EE_KEY | SSL_SECOP_PEER)
        -: 2299:/* Peer CA key in certificate */
        -: 2300:# define SSL_SECOP_PEER_CA_KEY           (SSL_SECOP_CA_KEY | SSL_SECOP_PEER)
        -: 2301:/* Peer CA digest algorithm in certificate */
        -: 2302:# define SSL_SECOP_PEER_CA_MD            (SSL_SECOP_CA_MD | SSL_SECOP_PEER)
        -: 2303:
        -: 2304:void SSL_set_security_level(SSL *s, int level);
        -: 2305:__owur int SSL_get_security_level(const SSL *s);
        -: 2306:void SSL_set_security_callback(SSL *s,
        -: 2307:                               int (*cb) (const SSL *s, const SSL_CTX *ctx,
        -: 2308:                                          int op, int bits, int nid,
        -: 2309:                                          void *other, void *ex));
        -: 2310:int (*SSL_get_security_callback(const SSL *s)) (const SSL *s,
        -: 2311:                                                const SSL_CTX *ctx, int op,
        -: 2312:                                                int bits, int nid, void *other,
        -: 2313:                                                void *ex);
        -: 2314:void SSL_set0_security_ex_data(SSL *s, void *ex);
        -: 2315:__owur void *SSL_get0_security_ex_data(const SSL *s);
        -: 2316:
        -: 2317:void SSL_CTX_set_security_level(SSL_CTX *ctx, int level);
        -: 2318:__owur int SSL_CTX_get_security_level(const SSL_CTX *ctx);
        -: 2319:void SSL_CTX_set_security_callback(SSL_CTX *ctx,
        -: 2320:                                   int (*cb) (const SSL *s, const SSL_CTX *ctx,
        -: 2321:                                              int op, int bits, int nid,
        -: 2322:                                              void *other, void *ex));
        -: 2323:int (*SSL_CTX_get_security_callback(const SSL_CTX *ctx)) (const SSL *s,
        -: 2324:                                                          const SSL_CTX *ctx,
        -: 2325:                                                          int op, int bits,
        -: 2326:                                                          int nid,
        -: 2327:                                                          void *other,
        -: 2328:                                                          void *ex);
        -: 2329:void SSL_CTX_set0_security_ex_data(SSL_CTX *ctx, void *ex);
        -: 2330:__owur void *SSL_CTX_get0_security_ex_data(const SSL_CTX *ctx);
        -: 2331:
        -: 2332:/* OPENSSL_INIT flag 0x010000 reserved for internal use */
        -: 2333:# define OPENSSL_INIT_NO_LOAD_SSL_STRINGS    0x00100000L
        -: 2334:# define OPENSSL_INIT_LOAD_SSL_STRINGS       0x00200000L
        -: 2335:
        -: 2336:# define OPENSSL_INIT_SSL_DEFAULT \
        -: 2337:        (OPENSSL_INIT_LOAD_SSL_STRINGS | OPENSSL_INIT_LOAD_CRYPTO_STRINGS)
        -: 2338:
        -: 2339:int OPENSSL_init_ssl(uint64_t opts, const OPENSSL_INIT_SETTINGS *settings);
        -: 2340:
        -: 2341:# ifndef OPENSSL_NO_UNIT_TEST
        -: 2342:__owur const struct openssl_ssl_test_functions *SSL_test_functions(void);
        -: 2343:# endif
        -: 2344:
        -: 2345:__owur int SSL_free_buffers(SSL *ssl);
        -: 2346:__owur int SSL_alloc_buffers(SSL *ssl);
        -: 2347:
        -: 2348:/* Status codes passed to the decrypt session ticket callback. Some of these
        -: 2349: * are for internal use only and are never passed to the callback. */
        -: 2350:typedef int SSL_TICKET_STATUS;
        -: 2351:
        -: 2352:/* Support for ticket appdata */
        -: 2353:/* fatal error, malloc failure */
        -: 2354:# define SSL_TICKET_FATAL_ERR_MALLOC 0
        -: 2355:/* fatal error, either from parsing or decrypting the ticket */
        -: 2356:# define SSL_TICKET_FATAL_ERR_OTHER  1
        -: 2357:/* No ticket present */
        -: 2358:# define SSL_TICKET_NONE             2
        -: 2359:/* Empty ticket present */
        -: 2360:# define SSL_TICKET_EMPTY            3
        -: 2361:/* the ticket couldn't be decrypted */
        -: 2362:# define SSL_TICKET_NO_DECRYPT       4
        -: 2363:/* a ticket was successfully decrypted */
        -: 2364:# define SSL_TICKET_SUCCESS          5
        -: 2365:/* same as above but the ticket needs to be renewed */
        -: 2366:# define SSL_TICKET_SUCCESS_RENEW    6
        -: 2367:
        -: 2368:/* Return codes for the decrypt session ticket callback */
        -: 2369:typedef int SSL_TICKET_RETURN;
        -: 2370:
        -: 2371:/* An error occurred */
        -: 2372:#define SSL_TICKET_RETURN_ABORT             0
        -: 2373:/* Do not use the ticket, do not send a renewed ticket to the client */
        -: 2374:#define SSL_TICKET_RETURN_IGNORE            1
        -: 2375:/* Do not use the ticket, send a renewed ticket to the client */
        -: 2376:#define SSL_TICKET_RETURN_IGNORE_RENEW      2
        -: 2377:/* Use the ticket, do not send a renewed ticket to the client */
        -: 2378:#define SSL_TICKET_RETURN_USE               3
        -: 2379:/* Use the ticket, send a renewed ticket to the client */
        -: 2380:#define SSL_TICKET_RETURN_USE_RENEW         4
        -: 2381:
        -: 2382:typedef int (*SSL_CTX_generate_session_ticket_fn)(SSL *s, void *arg);
        -: 2383:typedef SSL_TICKET_RETURN (*SSL_CTX_decrypt_session_ticket_fn)(SSL *s, SSL_SESSION *ss,
        -: 2384:                                                               const unsigned char *keyname,
        -: 2385:                                                               size_t keyname_length,
        -: 2386:                                                               SSL_TICKET_STATUS status,
        -: 2387:                                                               void *arg);
        -: 2388:int SSL_CTX_set_session_ticket_cb(SSL_CTX *ctx,
        -: 2389:                                  SSL_CTX_generate_session_ticket_fn gen_cb,
        -: 2390:                                  SSL_CTX_decrypt_session_ticket_fn dec_cb,
        -: 2391:                                  void *arg);
        -: 2392:int SSL_SESSION_set1_ticket_appdata(SSL_SESSION *ss, const void *data, size_t len);
        -: 2393:int SSL_SESSION_get0_ticket_appdata(SSL_SESSION *ss, void **data, size_t *len);
        -: 2394:
        -: 2395:extern const char SSL_version_str[];
        -: 2396:
        -: 2397:typedef unsigned int (*DTLS_timer_cb)(SSL *s, unsigned int timer_us);
        -: 2398:
        -: 2399:void DTLS_set_timer_cb(SSL *s, DTLS_timer_cb cb);
        -: 2400:
        -: 2401:
        -: 2402:typedef int (*SSL_allow_early_data_cb_fn)(SSL *s, void *arg);
        -: 2403:void SSL_CTX_set_allow_early_data_cb(SSL_CTX *ctx,
        -: 2404:                                     SSL_allow_early_data_cb_fn cb,
        -: 2405:                                     void *arg);
        -: 2406:void SSL_set_allow_early_data_cb(SSL *s,
        -: 2407:                                 SSL_allow_early_data_cb_fn cb,
        -: 2408:                                 void *arg);
        -: 2409:
        -: 2410:# ifdef  __cplusplus
        -: 2411:}
        -: 2412:# endif
        -: 2413:#endif
