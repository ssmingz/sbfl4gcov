        -:    0:Source:/mnt/hwshare/gcov_mysql/mysql_9_dfb4f427442f5fc4112a4847c09e1c51e420077c_pre/vio/vio.cc
        -:    0:Graph:vio.cc.gcno
        -:    0:Data:vio.cc.gcda
        -:    0:Runs:4
        -:    0:Programs:2
        -:    1:/* Copyright (c) 2000, 2021, Oracle and/or its affiliates.
        -:    2:
        -:    3:   This program is free software; you can redistribute it and/or modify
        -:    4:   it under the terms of the GNU General Public License, version 2.0,
        -:    5:   as published by the Free Software Foundation.
        -:    6:
        -:    7:   This program is also distributed with certain software (including
        -:    8:   but not limited to OpenSSL) that is licensed under separate terms,
        -:    9:   as designated in a particular file or component or in included license
        -:   10:   documentation.  The authors of MySQL hereby grant you an additional
        -:   11:   permission to link the program and your derivative works with the
        -:   12:   separately licensed software that they have included with MySQL.
        -:   13:
        -:   14:   Without limiting anything contained in the foregoing, this file,
        -:   15:   which is part of C Driver for MySQL (Connector/C), is also subject to the
        -:   16:   Universal FOSS Exception, version 1.0, a copy of which can be found at
        -:   17:   http://oss.oracle.com/licenses/universal-foss-exception.
        -:   18:
        -:   19:   This program is distributed in the hope that it will be useful,
        -:   20:   but WITHOUT ANY WARRANTY; without even the implied warranty of
        -:   21:   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
        -:   22:   GNU General Public License, version 2.0, for more details.
        -:   23:
        -:   24:   You should have received a copy of the GNU General Public License
        -:   25:   along with this program; if not, write to the Free Software
        -:   26:   Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301  USA */
        -:   27:
        -:   28:/*
        -:   29:  Note that we can't have assertion on file descriptors;  The reason for
        -:   30:  this is that during mysql shutdown, another thread can close a file
        -:   31:  we are working on.  In this case we should just return read errors from
        -:   32:  the file descriptior.
        -:   33:*/
        -:   34:
        -:   35:#include <sys/types.h>
        -:   36:#include <new>
        -:   37:
        -:   38:#include "my_compiler.h"
        -:   39:#include "my_dbug.h"
        -:   40:#include "my_inttypes.h"
        -:   41:#include "my_io.h"
        -:   42:#include "my_psi_config.h"
        -:   43:#include "mysql/psi/mysql_memory.h"
        -:   44:#include "mysql/psi/mysql_socket.h"
        -:   45:#include "mysql/psi/psi_memory.h"  // IWYU pragma: keep
        -:   46:#include "mysql/service_mysql_alloc.h"
        -:   47:#include "template_utils.h"
        -:   48:#include "vio/vio_priv.h"
        -:   49:
        -:   50:PSI_memory_key key_memory_vio_ssl_fd;
        -:   51:PSI_memory_key key_memory_vio;
        -:   52:PSI_memory_key key_memory_vio_read_buffer;
        -:   53:
        -:   54:#ifdef HAVE_PSI_INTERFACE
        -:   55:static PSI_memory_info all_vio_memory[] = {
        -:   56:    {&key_memory_vio_ssl_fd, "ssl_fd", 0, 0, PSI_DOCUMENT_ME},
        -:   57:    {&key_memory_vio, "vio", 0, 0, PSI_DOCUMENT_ME},
        -:   58:    {&key_memory_vio_read_buffer, "read_buffer", 0, 0, PSI_DOCUMENT_ME},
        -:   59:};
        -:   60:
        1:   61:void init_vio_psi_keys() {
        1:   62:  const char *category = "vio";
        -:   63:  int count;
        -:   64:
        1:   65:  count = array_elements(all_vio_memory);
        1:   66:  mysql_memory_register(category, all_vio_memory, count);
        1:   67:}
        -:   68:#endif
        -:   69:
        -:   70:Vio *internal_vio_create(uint flags);
        -:   71:void internal_vio_delete(Vio *vio);
        -:   72:
        -:   73:#ifdef _WIN32
        -:   74:
        -:   75:/**
        -:   76:  Stub io_wait method that defaults to indicate that
        -:   77:  requested I/O event is ready.
        -:   78:
        -:   79:  Used for named pipe and shared memory VIO types.
        -:   80:
        -:   81:  @param vio      Unused.
        -:   82:  @param event    Unused.
        -:   83:  @param timeout  Unused.
        -:   84:
        -:   85:  @retval 1       The requested I/O event has occurred.
        -:   86:*/
        -:   87:
        -:   88:static int no_io_wait(Vio *vio [[maybe_unused]],
        -:   89:                      enum enum_vio_io_event event [[maybe_unused]],
        -:   90:                      int timeout [[maybe_unused]]) {
        -:   91:  return 1;
        -:   92:}
        -:   93:
        -:   94:#endif
        -:   95:
        -:   96:extern "C" {
    #####:   97:static bool has_no_data(Vio *vio [[maybe_unused]]) { return false; }
        -:   98:}  // extern "C"
        -:   99:
       17:  100:Vio::Vio(uint flags) {
       17:  101:  mysql_socket = MYSQL_INVALID_SOCKET;
       17:  102:  local = sockaddr_storage();
       17:  103:  remote = sockaddr_storage();
        -:  104:#ifdef USE_PPOLL_IN_VIO
       17:  105:  sigemptyset(&signal_mask);
        -:  106:#elif defined(HAVE_KQUEUE)
        -:  107:  kq_fd = -1;
        -:  108:#endif
       17:  109:  if (flags & VIO_BUFFERED_READ)
       17:  110:    read_buffer = (char *)my_malloc(key_memory_vio_read_buffer,
        -:  111:                                    VIO_READ_BUFFER_SIZE, MYF(MY_WME));
       17:  112:}
        -:  113:
       34:  114:Vio::~Vio() {
       17:  115:  my_free(read_buffer);
       17:  116:  read_buffer = nullptr;
        -:  117:#ifdef HAVE_KQUEUE
        -:  118:  if (kq_fd != -1) close(kq_fd);
        -:  119:#endif
       17:  120:}
        -:  121:
    #####:  122:Vio &Vio::operator=(Vio &&vio) {
    #####:  123:  this->~Vio();
        -:  124:
    #####:  125:  mysql_socket = vio.mysql_socket;
    #####:  126:  localhost = vio.localhost;
    #####:  127:  type = vio.type;
    #####:  128:  read_timeout = vio.read_timeout;
    #####:  129:  write_timeout = vio.write_timeout;
    #####:  130:  retry_count = vio.retry_count;
    #####:  131:  inactive = vio.inactive;
        -:  132:
    #####:  133:  local = vio.local;
    #####:  134:  remote = vio.remote;
    #####:  135:  addrLen = vio.addrLen;
    #####:  136:  read_buffer = vio.read_buffer;
    #####:  137:  read_pos = vio.read_pos;
    #####:  138:  read_end = vio.read_end;
        -:  139:
    #####:  140:  is_blocking_flag = vio.is_blocking_flag;
        -:  141:
        -:  142:#ifdef USE_PPOLL_IN_VIO
    #####:  143:  thread_id = vio.thread_id;
    #####:  144:  signal_mask = vio.signal_mask;
    #####:  145:  if (vio.poll_shutdown_flag.test_and_set())
    #####:  146:    poll_shutdown_flag.test_and_set();
        -:  147:  else
    #####:  148:    poll_shutdown_flag.clear();
        -:  149:#elif defined(HAVE_KQUEUE)
        -:  150:  kq_fd = vio.kq_fd;
        -:  151:  if (vio.kevent_wakeup_flag.test_and_set())
        -:  152:    kevent_wakeup_flag.test_and_set();
        -:  153:  else
        -:  154:    kevent_wakeup_flag.clear();
        -:  155:#endif
        -:  156:
    #####:  157:  viodelete = vio.viodelete;
    #####:  158:  vioerrno = vio.vioerrno;
    #####:  159:  read = vio.read;
    #####:  160:  write = vio.write;
    #####:  161:  timeout = vio.timeout;
    #####:  162:  viokeepalive = vio.viokeepalive;
    #####:  163:  fastsend = vio.fastsend;
    #####:  164:  peer_addr = vio.peer_addr;
    #####:  165:  in_addr = vio.in_addr;
    #####:  166:  should_retry = vio.should_retry;
    #####:  167:  was_timeout = vio.was_timeout;
        -:  168:
    #####:  169:  vioshutdown = vio.vioshutdown;
    #####:  170:  is_connected = vio.is_connected;
    #####:  171:  has_data = vio.has_data;
    #####:  172:  io_wait = vio.io_wait;
    #####:  173:  connect = vio.connect;
        -:  174:
    #####:  175:  is_blocking = vio.is_blocking;
    #####:  176:  set_blocking = vio.set_blocking;
        -:  177:
        -:  178:#ifdef _WIN32
        -:  179:  overlapped = vio.overlapped;
        -:  180:  hPipe = vio.hPipe;
        -:  181:#endif
        -:  182:
    #####:  183:  ssl_arg = vio.ssl_arg;
        -:  184:
        -:  185:#ifdef _WIN32
        -:  186:  handle_file_map = vio.handle_file_map;
        -:  187:  handle_map = vio.handle_map;
        -:  188:  event_server_wrote = vio.event_client_wrote;
        -:  189:  event_server_read = vio.event_server_read;
        -:  190:  event_client_wrote = vio.event_client_wrote;
        -:  191:  event_client_read = vio.event_client_read;
        -:  192:  event_conn_closed = vio.event_conn_closed;
        -:  193:  shared_memory_remain = vio.shared_memory_remain;
        -:  194:  shared_memory_pos = vio.shared_memory_pos;
        -:  195:#endif
        -:  196:
        -:  197:  // These are the only elements touched by the destructor.
    #####:  198:  vio.read_buffer = nullptr;
        -:  199:#ifdef HAVE_KQUEUE
        -:  200:  vio.kq_fd = -1;
        -:  201:#endif
        -:  202:
    #####:  203:  return *this;
        -:  204:}
        -:  205:
        -:  206:/*
        -:  207: * Helper to fill most of the Vio* with defaults.
        -:  208: */
        -:  209:
       17:  210:static bool vio_init(Vio *vio, enum enum_vio_type type, my_socket sd,
        -:  211:                     uint flags) {
      17*:  212:  DBUG_PRINT("enter vio_init", ("type: %d sd: %d  flags: %d", type, sd, flags));
        -:  213:
       17:  214:  mysql_socket_setfd(&vio->mysql_socket, sd);
        -:  215:
       17:  216:  vio->localhost = flags & VIO_LOCALHOST;
       17:  217:  vio->type = type;
        -:  218:
        -:  219:#ifdef HAVE_SETNS
       17:  220:  vio->network_namespace[0] = '\0';
        -:  221:#endif
        -:  222:
       17:  223:  switch (type) {
        -:  224:#ifdef _WIN32
        -:  225:    case VIO_TYPE_NAMEDPIPE:
        -:  226:      vio->viodelete = vio_delete;
        -:  227:      vio->vioerrno = vio_errno;
        -:  228:      vio->read = vio_read_pipe;
        -:  229:      vio->write = vio_write_pipe;
        -:  230:      vio->fastsend = vio_fastsend;
        -:  231:      vio->viokeepalive = vio_keepalive;
        -:  232:      vio->should_retry = vio_should_retry;
        -:  233:      vio->was_timeout = vio_was_timeout;
        -:  234:      vio->vioshutdown = vio_shutdown_pipe;
        -:  235:      vio->peer_addr = vio_peer_addr;
        -:  236:      vio->io_wait = no_io_wait;
        -:  237:      vio->is_connected = vio_is_connected_pipe;
        -:  238:      vio->has_data = has_no_data;
        -:  239:      vio->is_blocking = vio_is_blocking;
        -:  240:      vio->set_blocking = vio_set_blocking;
        -:  241:      vio->set_blocking_flag = vio_set_blocking_flag;
        -:  242:      vio->is_blocking_flag = true;
        -:  243:      break;
        -:  244:
        -:  245:    case VIO_TYPE_SHARED_MEMORY:
        -:  246:      vio->viodelete = vio_delete_shared_memory;
        -:  247:      vio->vioerrno = vio_errno;
        -:  248:      vio->read = vio_read_shared_memory;
        -:  249:      vio->write = vio_write_shared_memory;
        -:  250:      vio->fastsend = vio_fastsend;
        -:  251:      vio->viokeepalive = vio_keepalive;
        -:  252:      vio->should_retry = vio_should_retry;
        -:  253:      vio->was_timeout = vio_was_timeout;
        -:  254:      vio->vioshutdown = vio_shutdown_shared_memory;
        -:  255:      vio->peer_addr = vio_peer_addr;
        -:  256:      vio->io_wait = no_io_wait;
        -:  257:      vio->is_connected = vio_is_connected_shared_memory;
        -:  258:      vio->has_data = has_no_data;
        -:  259:      vio->is_blocking = vio_is_blocking;
        -:  260:      vio->set_blocking = vio_set_blocking;
        -:  261:      vio->set_blocking_flag = vio_set_blocking_flag;
        -:  262:      vio->is_blocking_flag = true;
        -:  263:      break;
        -:  264:#endif /* _WIN32 */
        -:  265:
    #####:  266:    case VIO_TYPE_SSL:
    #####:  267:      vio->viodelete = vio_ssl_delete;
    #####:  268:      vio->vioerrno = vio_errno;
    #####:  269:      vio->read = vio_ssl_read;
    #####:  270:      vio->write = vio_ssl_write;
    #####:  271:      vio->fastsend = vio_fastsend;
    #####:  272:      vio->viokeepalive = vio_keepalive;
    #####:  273:      vio->should_retry = vio_should_retry;
    #####:  274:      vio->was_timeout = vio_was_timeout;
    #####:  275:      vio->vioshutdown = vio_ssl_shutdown;
    #####:  276:      vio->peer_addr = vio_peer_addr;
    #####:  277:      vio->io_wait = vio_io_wait;
    #####:  278:      vio->is_connected = vio_is_connected;
    #####:  279:      vio->has_data = vio_ssl_has_data;
    #####:  280:      vio->timeout = vio_socket_timeout;
    #####:  281:      vio->is_blocking = vio_is_blocking;
    #####:  282:      vio->set_blocking = vio_set_blocking;
    #####:  283:      vio->set_blocking_flag = vio_set_blocking_flag;
    #####:  284:      vio->is_blocking_flag = true;
    #####:  285:      break;
        -:  286:
       17:  287:    default:
       17:  288:      vio->viodelete = vio_delete;
       17:  289:      vio->vioerrno = vio_errno;
      17*:  290:      vio->read = vio->read_buffer ? vio_read_buff : vio_read;
       17:  291:      vio->write = vio_write;
       17:  292:      vio->fastsend = vio_fastsend;
       17:  293:      vio->viokeepalive = vio_keepalive;
       17:  294:      vio->should_retry = vio_should_retry;
       17:  295:      vio->was_timeout = vio_was_timeout;
       17:  296:      vio->vioshutdown = vio_shutdown;
       17:  297:      vio->peer_addr = vio_peer_addr;
       17:  298:      vio->io_wait = vio_io_wait;
       17:  299:      vio->is_connected = vio_is_connected;
       17:  300:      vio->timeout = vio_socket_timeout;
      17*:  301:      vio->has_data = vio->read_buffer ? vio_buff_has_data : has_no_data;
       17:  302:      vio->is_blocking = vio_is_blocking;
       17:  303:      vio->set_blocking = vio_set_blocking;
       17:  304:      vio->set_blocking_flag = vio_set_blocking_flag;
       17:  305:      vio->is_blocking_flag = true;
       17:  306:      break;
        -:  307:  }
        -:  308:
      17*:  309:  DBUG_EXECUTE_IF("vio_init_returns_error", { return true; });
        -:  310:
        -:  311:#ifdef HAVE_KQUEUE
        -:  312:  assert(type == VIO_TYPE_TCPIP || type == VIO_TYPE_SOCKET ||
        -:  313:         type == VIO_TYPE_SSL);
        -:  314:  vio->kq_fd = kqueue();
        -:  315:  if (vio->kq_fd == -1) {
        -:  316:    DBUG_PRINT("vio_init", ("kqueue failed with errno: %d", errno));
        -:  317:    return true;
        -:  318:  }
        -:  319:#endif
        -:  320:
       17:  321:  return false;
        -:  322:}
        -:  323:
        -:  324:/**
        -:  325:  Reinitialize an existing Vio object.
        -:  326:
        -:  327:  @remark Used to rebind an initialized socket-based Vio object
        -:  328:          to another socket-based transport type. For example,
        -:  329:          rebind a TCP/IP transport to SSL.
        -:  330:
        -:  331:  @remark If new socket handle passed to vio_reset() is not equal
        -:  332:          to the socket handle stored in Vio then socket handle will
        -:  333:          be closed before storing new value. If handles are equal
        -:  334:          then old socket is not closed. This is important for
        -:  335:          vio_reset() usage in ssl_do().
        -:  336:
        -:  337:  @remark If any error occurs then Vio members won't be altered thus
        -:  338:          preserving socket handle stored in Vio and not taking
        -:  339:          ownership over socket handle passed as parameter.
        -:  340:
        -:  341:  @param vio    A VIO object.
        -:  342:  @param type   A socket-based transport type.
        -:  343:  @param sd     The socket.
        -:  344:  @param ssl    An optional SSL structure.
        -:  345:  @param flags  Flags passed to new_vio.
        -:  346:
        -:  347:  @return Return value is zero on success.
        -:  348:*/
        -:  349:
    #####:  350:bool vio_reset(Vio *vio, enum enum_vio_type type, my_socket sd,
        -:  351:               void *ssl [[maybe_unused]], uint flags) {
    #####:  352:  int ret = false;
    #####:  353:  Vio new_vio(flags);
    #####:  354:  DBUG_TRACE;
        -:  355:
        -:  356:  /* The only supported rebind is from a socket-based transport type. */
    #####:  357:  assert(vio->type == VIO_TYPE_TCPIP || vio->type == VIO_TYPE_SOCKET);
        -:  358:
    #####:  359:  if (vio_init(&new_vio, type, sd, flags)) return true;
        -:  360:
        -:  361:  /* Preserve perfschema info for this connection */
    #####:  362:  new_vio.mysql_socket.m_psi = vio->mysql_socket.m_psi;
        -:  363:
    #####:  364:  new_vio.ssl_arg = ssl;
        -:  365:
        -:  366:  /*
        -:  367:    Propagate the timeout values. Necessary to also propagate
        -:  368:    the underlying proprieties associated with the timeout,
        -:  369:    such as the socket blocking mode.
        -:  370:  */
    #####:  371:  if (vio->read_timeout >= 0)
    #####:  372:    ret |= vio_timeout(&new_vio, 0, vio->read_timeout / 1000);
        -:  373:
    #####:  374:  if (vio->write_timeout >= 0)
    #####:  375:    ret |= vio_timeout(&new_vio, 1, vio->write_timeout / 1000);
        -:  376:
    #####:  377:  if (!ret) {
        -:  378:    /*
        -:  379:      vio_reset() succeeded
        -:  380:      free old resources and then overwrite VIO structure
        -:  381:    */
        -:  382:
        -:  383:    /*
        -:  384:      Close socket only when it is not equal to the new one.
        -:  385:    */
    #####:  386:    if (sd != mysql_socket_getfd(vio->mysql_socket)) {
    #####:  387:      if (vio->inactive == false) vio->vioshutdown(vio);
        -:  388:    }
        -:  389:#ifdef HAVE_KQUEUE
        -:  390:    else {
        -:  391:      /*
        -:  392:      Must set the fd to -1, otherwise the destructor would
        -:  393:      close it again possibly closing socket or file opened
        -:  394:      by other threads concurrently.
        -:  395:      */
        -:  396:      close(vio->kq_fd);
        -:  397:      vio->kq_fd = -1;
        -:  398:    }
        -:  399:#endif
        -:  400:    /*
        -:  401:      Overwrite existing Vio structure
        -:  402:    */
    #####:  403:    *vio = std::move(new_vio);
        -:  404:  }
        -:  405:
    #####:  406:  return ret;
        -:  407:}
        -:  408:
       17:  409:Vio *internal_vio_create(uint flags) {
       17:  410:  void *rawmem = my_malloc(key_memory_vio, sizeof(Vio), MYF(MY_WME));
      17*:  411:  if (rawmem == nullptr) return nullptr;
       17:  412:  return new (rawmem) Vio(flags);
        -:  413:}
        -:  414:
        -:  415:/* Create a new VIO for socket or TCP/IP connection. */
        -:  416:
       17:  417:Vio *mysql_socket_vio_new(MYSQL_SOCKET mysql_socket, enum_vio_type type,
        -:  418:                          uint flags) {
        -:  419:  Vio *vio;
       17:  420:  my_socket sd = mysql_socket_getfd(mysql_socket);
       34:  421:  DBUG_TRACE;
      17*:  422:  DBUG_PRINT("enter", ("sd: %d", sd));
        -:  423:
       17:  424:  if ((vio = internal_vio_create(flags))) {
       17:  425:    if (vio_init(vio, type, sd, flags)) {
    #####:  426:      internal_vio_delete(vio);
    #####:  427:      return nullptr;
        -:  428:    }
       17:  429:    vio->mysql_socket = mysql_socket;
        -:  430:  }
       17:  431:  return vio;
        -:  432:}
        -:  433:
        -:  434:/* Open the socket or TCP/IP connection and read the fnctl() status */
        -:  435:
       17:  436:Vio *vio_new(my_socket sd, enum enum_vio_type type, uint flags) {
        -:  437:  Vio *vio;
       17:  438:  MYSQL_SOCKET mysql_socket = MYSQL_INVALID_SOCKET;
       17:  439:  DBUG_TRACE;
      17*:  440:  DBUG_PRINT("enter", ("sd: %d", sd));
        -:  441:
       17:  442:  mysql_socket_setfd(&mysql_socket, sd);
       17:  443:  vio = mysql_socket_vio_new(mysql_socket, type, flags);
        -:  444:
       34:  445:  return vio;
        -:  446:}
        -:  447:
        -:  448:#ifdef _WIN32
        -:  449:
        -:  450:Vio *vio_new_win32pipe(HANDLE hPipe) {
        -:  451:  Vio *vio;
        -:  452:  DBUG_TRACE;
        -:  453:  if ((vio = internal_vio_create(VIO_LOCALHOST))) {
        -:  454:    if (vio_init(vio, VIO_TYPE_NAMEDPIPE, 0, VIO_LOCALHOST)) {
        -:  455:      internal_vio_delete(vio);
        -:  456:      return nullptr;
        -:  457:    }
        -:  458:
        -:  459:    /* Create an object for event notification. */
        -:  460:    vio->overlapped.hEvent = CreateEvent(NULL, false, false, NULL);
        -:  461:    if (vio->overlapped.hEvent == NULL) {
        -:  462:      internal_vio_delete(vio);
        -:  463:      return NULL;
        -:  464:    }
        -:  465:    vio->hPipe = hPipe;
        -:  466:  }
        -:  467:  return vio;
        -:  468:}
        -:  469:
        -:  470:Vio *vio_new_win32shared_memory(HANDLE handle_file_map, HANDLE handle_map,
        -:  471:                                HANDLE event_server_wrote,
        -:  472:                                HANDLE event_server_read,
        -:  473:                                HANDLE event_client_wrote,
        -:  474:                                HANDLE event_client_read,
        -:  475:                                HANDLE event_conn_closed) {
        -:  476:  Vio *vio;
        -:  477:  DBUG_TRACE;
        -:  478:  if ((vio = internal_vio_create(VIO_LOCALHOST))) {
        -:  479:    if (vio_init(vio, VIO_TYPE_SHARED_MEMORY, 0, VIO_LOCALHOST)) {
        -:  480:      internal_vio_delete(vio);
        -:  481:      return nullptr;
        -:  482:    }
        -:  483:    vio->handle_file_map = handle_file_map;
        -:  484:    vio->handle_map = reinterpret_cast<char *>(handle_map);
        -:  485:    vio->event_server_wrote = event_server_wrote;
        -:  486:    vio->event_server_read = event_server_read;
        -:  487:    vio->event_client_wrote = event_client_wrote;
        -:  488:    vio->event_client_read = event_client_read;
        -:  489:    vio->event_conn_closed = event_conn_closed;
        -:  490:    vio->shared_memory_remain = 0;
        -:  491:    vio->shared_memory_pos = reinterpret_cast<char *>(handle_map);
        -:  492:  }
        -:  493:  return vio;
        -:  494:}
        -:  495:#endif
        -:  496:
        -:  497:/**
        -:  498:  Set timeout for a network send or receive operation.
        -:  499:
        -:  500:  @note A non-infinite timeout causes the socket to be
        -:  501:          set to non-blocking mode. On infinite timeouts,
        -:  502:          the socket is set to blocking mode.
        -:  503:
        -:  504:  @note A negative timeout means an infinite timeout.
        -:  505:
        -:  506:  @param vio      A VIO object.
        -:  507:  @param which    Whether timeout is for send (1) or receive (0).
        -:  508:  @param timeout_sec  Timeout interval in seconds.
        -:  509:
        -:  510:  @return false on success, true otherwise.
        -:  511:*/
        -:  512:
       34:  513:int vio_timeout(Vio *vio, uint which, int timeout_sec) {
        -:  514:  int timeout_ms;
        -:  515:  bool old_mode;
        -:  516:
        -:  517:  /*
        -:  518:    Vio timeouts are measured in milliseconds. Check for a possible
        -:  519:    overflow. In case of overflow, set to infinite.
        -:  520:  */
       34:  521:  if (timeout_sec > INT_MAX / 1000)
       34:  522:    timeout_ms = -1;
        -:  523:  else
    #####:  524:    timeout_ms = (int)(timeout_sec * 1000);
        -:  525:
        -:  526:  /* Deduce the current timeout status mode. */
      34*:  527:  old_mode = vio->write_timeout < 0 && vio->read_timeout < 0;
        -:  528:
       34:  529:  if (which)
       17:  530:    vio->write_timeout = timeout_ms;
        -:  531:  else
       17:  532:    vio->read_timeout = timeout_ms;
        -:  533:
        -:  534:  /* VIO-specific timeout handling. Might change the blocking mode. */
      34*:  535:  return vio->timeout ? vio->timeout(vio, which, old_mode) : 0;
        -:  536:}
        -:  537:
       17:  538:void internal_vio_delete(Vio *vio) {
      17*:  539:  if (!vio) return; /* It must be safe to delete null pointers. */
       17:  540:  if (vio->inactive == false) vio->vioshutdown(vio);
       17:  541:  vio->~Vio();
       17:  542:  my_free(vio);
        -:  543:}
        -:  544:
       17:  545:void vio_delete(Vio *vio) { internal_vio_delete(vio); }
        -:  546:
        -:  547:/*
        -:  548:  Cleanup memory allocated by vio or the
        -:  549:  components below it when application finish
        -:  550:
        -:  551:*/
        4:  552:void vio_end(void) { vio_ssl_end(); }
        -:  553:
        -:  554:struct vio_string {
        -:  555:  const char *m_str;
        -:  556:  int m_len;
        -:  557:};
        -:  558:
        -:  559:/**
        -:  560:  Names for each VIO TYPE.
        -:  561:  Indexed by enum_vio_type.
        -:  562:  If you add more, please update audit_log.cc
        -:  563:*/
        -:  564:static const vio_string vio_type_names[] = {{"", 0},
        -:  565:                                            {STRING_WITH_LEN("TCP/IP")},
        -:  566:                                            {STRING_WITH_LEN("Socket")},
        -:  567:                                            {STRING_WITH_LEN("Named Pipe")},
        -:  568:                                            {STRING_WITH_LEN("SSL/TLS")},
        -:  569:                                            {STRING_WITH_LEN("Shared Memory")},
        -:  570:                                            {STRING_WITH_LEN("Internal")},
        -:  571:                                            {STRING_WITH_LEN("Plugin")}};
        -:  572:
    #####:  573:void get_vio_type_name(enum enum_vio_type vio_type, const char **str,
        -:  574:                       int *len) {
        -:  575:  int index;
        -:  576:
    #####:  577:  if ((vio_type >= FIRST_VIO_TYPE) && (vio_type <= LAST_VIO_TYPE)) {
    #####:  578:    index = vio_type;
        -:  579:  } else {
    #####:  580:    index = 0;
        -:  581:  }
    #####:  582:  *str = vio_type_names[index].m_str;
    #####:  583:  *len = vio_type_names[index].m_len;
    #####:  584:  return;
        -:  585:}
