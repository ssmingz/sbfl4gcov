        -:    0:Source:/mnt/hwshare/gcov_mysql/mysql_9_dfb4f427442f5fc4112a4847c09e1c51e420077c_pre/vio/viossl.cc
        -:    0:Graph:viossl.cc.gcno
        -:    0:Data:viossl.cc.gcda
        -:    0:Runs:4
        -:    0:Programs:2
        -:    1:/* Copyright (c) 2000, 2021, Oracle and/or its affiliates.
        -:    2:
        -:    3:   This program is free software; you can redistribute it and/or modify
        -:    4:   it under the terms of the GNU General Public License, version 2.0,
        -:    5:   as published by the Free Software Foundation.
        -:    6:
        -:    7:   This program is also distributed with certain software (including
        -:    8:   but not limited to OpenSSL) that is licensed under separate terms,
        -:    9:   as designated in a particular file or component or in included license
        -:   10:   documentation.  The authors of MySQL hereby grant you an additional
        -:   11:   permission to link the program and your derivative works with the
        -:   12:   separately licensed software that they have included with MySQL.
        -:   13:
        -:   14:   Without limiting anything contained in the foregoing, this file,
        -:   15:   which is part of C Driver for MySQL (Connector/C), is also subject to the
        -:   16:   Universal FOSS Exception, version 1.0, a copy of which can be found at
        -:   17:   http://oss.oracle.com/licenses/universal-foss-exception.
        -:   18:
        -:   19:   This program is distributed in the hope that it will be useful,
        -:   20:   but WITHOUT ANY WARRANTY; without even the implied warranty of
        -:   21:   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
        -:   22:   GNU General Public License, version 2.0, for more details.
        -:   23:
        -:   24:   You should have received a copy of the GNU General Public License
        -:   25:   along with this program; if not, write to the Free Software
        -:   26:   Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301  USA */
        -:   27:
        -:   28:/*
        -:   29:  Note that we can't have assertion on file descriptors;  The reason for
        -:   30:  this is that during mysql shutdown, another thread can close a file
        -:   31:  we are working on.  In this case we should just return read errors from
        -:   32:  the file descriptior.
        -:   33:*/
        -:   34:
        -:   35:#include <errno.h>
        -:   36:#include <stddef.h>
        -:   37:
        -:   38:#include "my_dbug.h"
        -:   39:#include "my_inttypes.h"
        -:   40:#include "my_io.h"
        -:   41:#include "mysql/psi/mysql_socket.h"
        -:   42:#include "vio/vio_priv.h"
        -:   43:
        -:   44:/*
        -:   45:  BIO_set_callback_ex was added in openSSL 1.1.1
        -:   46:  For older openSSL, use the deprecated BIO_set_callback.
        -:   47:*/
        -:   48:#if OPENSSL_VERSION_NUMBER >= 0x10101000L
        -:   49:#define HAVE_BIO_SET_CALLBACK_EX
        -:   50:#endif
        -:   51:
        -:   52:/* clang-format off */
        -:   53:/**
        -:   54:  @page page_protocol_basic_tls TLS
        -:   55:
        -:   56:  The MySQL Protocol also supports encryption and authentication via TLS.
        -:   57:  The encryption is transparent to the rest of the protocol and is applied
        -:   58:  after the data is compressed right before the data is written to
        -:   59:  the network layer.
        -:   60:
        -:   61:  The TLS suppport is announced in
        -:   62:  @ref page_protocol_connection_phase_packets_protocol_handshake sent by the
        -:   63:  server via ::CLIENT_SSL and is enabled if the client returns the same
        -:   64:  capability.
        -:   65:
        -:   66:  For an unencrypted connection the server starts with its
        -:   67:  @ref page_protocol_connection_phase_packets_protocol_handshake :
        -:   68:
        -:   69:  ~~~~~~~
        -:   70:  36 00 00 00 0a 35 2e 35    2e 32 2d 6d 32 00 52 00    6....5.5.2-m2.R.
        -:   71:  00 00 22 3d 4e 50 29 75    39 56 00 ff ff 08 02 00    .."=NP)u9V......
        -:   72:  00 00 00 00 00 00 00 00    00 00 00 00 00 29 64 40    .............)d@
        -:   73:  52 5c 55 78 7a 7c 21 29    4b 00                      R\Uxz|!)K.
        -:   74:  ~~~~~~~
        -:   75:
        -:   76:  ... and the client returns its
        -:   77:  @ref page_protocol_connection_phase_packets_protocol_handshake_response
        -:   78:
        -:   79:  ~~~~~~~
        -:   80:  3a 00 00 01 05 a6 03 00    00 00 00 01 08 00 00 00    :...............
        -:   81:  00 00 00 00 00 00 00 00    00 00 00 00 00 00 00 00    ................
        -:   82:  00 00 00 00 72 6f 6f 74    00 14 14 63 6b 70 99 8a    ....root...ckp..
        -:   83:  b6 9e 96 87 a2 30 9a 40    67 2b 83 38 85 4b          .....0.@g+.8.K
        -:   84:  ~~~~~~~
        -:   85:
        -:   86:  If client wants to do TLS and the server supports it, it would send a
        -:   87:  @ref page_protocol_connection_phase_packets_protocol_ssl_request with
        -:   88:  ::CLIENT_SSL capability enabled.
        -:   89:
        -:   90:  ~~~~~~~
        -:   91:  20 00 00 01 05 ae 03 00    00 00 00 01 08 00 00 00     ...............
        -:   92:  00 00 00 00 00 00 00 00    00 00 00 00 00 00 00 00    ................
        -:   93:  00 00 00 00                                           ....
        -:   94:  ~~~~~~~
        -:   95:
        -:   96:  Then the rest of the communication is switched to TLS:
        -:   97:  ~~~~~~~
        -:   98:  16 03 01 00 5e 01 00 00    5a 03 01 4c a3 49 2e 7a    ....^...Z..L.I.z
        -:   99:  b5 06 75 68 5c 30 36 73    f1 82 79 70 58 4c 64 bb    ..uh\06s..ypXLd.
        -:  100:  47 7e 90 cd 9b 30 c5 66    65 da 35 00 00 2c 00 39    G~...0.fe.5..,.9
        -:  101:  00 38 00 35 00 16 00 13    00 0a 00 33 00 32 00 2f    .8.5.......3.2./
        -:  102:  00 9a 00 99 00 96 00 05    00 04 00 15 00 12 00 09    ................
        -:  103:  00 14 00 11 00 08 00 06    00 03 02 01 00 00 04 00    ................
        -:  104:  23 00 00                                              #..
        -:  105:  ~~~~~~~
        -:  106:
        -:  107:  The preceding packet is from SSL_connect() which does the
        -:  108:  [TLS handshake](https://en.wikipedia.org/wiki/Transport_Layer_Security#TLS_handshake)
        -:  109:
        -:  110:  Once the TLS tunnel is established the normal communication continues
        -:  111:  starting with the client sending the
        -:  112:  @ref page_protocol_connection_phase_packets_protocol_handshake_response
        -:  113:
        -:  114:  See @ref sect_protocol_connection_phase_initial_handshake_ssl_handshake
        -:  115:  for a diagram of the exchange.
        -:  116:
        -:  117:  @sa cli_establish_ssl, parse_client_handshake_packet
        -:  118:*/
        -:  119:/* clang-format on */
        -:  120:
        -:  121:#ifndef NDEBUG
        -:  122:
    #####:  123:static void report_errors(SSL *ssl) {
        -:  124:  unsigned long l;
        -:  125:  const char *file;
        -:  126:  const char *data;
    #####:  127:  int line, flags = 0;
        -:  128:  char buf[512];
        -:  129:
    #####:  130:  DBUG_TRACE;
        -:  131:
    #####:  132:  while ((l = ERR_get_error_line_data(&file, &line, &data, &flags))) {
    #####:  133:    DBUG_PRINT("error", ("OpenSSL: %s:%s:%d:%s\n", ERR_error_string(l, buf),
        -:  134:                         file, line, (flags & ERR_TXT_STRING) ? data : ""));
        -:  135:  }
        -:  136:
    #####:  137:  if (ssl)
    #####:  138:    DBUG_PRINT("error",
        -:  139:               ("error: %s", ERR_error_string(SSL_get_error(ssl, l), buf)));
        -:  140:
    #####:  141:  DBUG_PRINT("info", ("socket_errno: %d", socket_errno));
    #####:  142:}
        -:  143:
        -:  144:#endif
        -:  145:
        -:  146:/**
        -:  147:  Obtain the equivalent system error status for the last SSL I/O operation.
        -:  148:
        -:  149:  @param ssl_error  The result code of the failed TLS/SSL I/O operation.
        -:  150:*/
        -:  151:
    #####:  152:static void ssl_set_sys_error(int ssl_error) {
    #####:  153:  int error = 0;
        -:  154:
    #####:  155:  switch (ssl_error) {
    #####:  156:    case SSL_ERROR_ZERO_RETURN:
    #####:  157:      error = SOCKET_ECONNRESET;
    #####:  158:      break;
    #####:  159:    case SSL_ERROR_WANT_READ:
        -:  160:    case SSL_ERROR_WANT_WRITE:
        -:  161:#ifdef SSL_ERROR_WANT_CONNECT
        -:  162:    case SSL_ERROR_WANT_CONNECT:
        -:  163:#endif
        -:  164:#ifdef SSL_ERROR_WANT_ACCEPT
        -:  165:    case SSL_ERROR_WANT_ACCEPT:
        -:  166:#endif
    #####:  167:      error = SOCKET_EWOULDBLOCK;
    #####:  168:      break;
    #####:  169:    case SSL_ERROR_SSL:
        -:  170:      /* Protocol error. */
        -:  171:#ifdef EPROTO
    #####:  172:      error = EPROTO;
        -:  173:#else
        -:  174:      error = SOCKET_ECONNRESET;
        -:  175:#endif
    #####:  176:      break;
    #####:  177:    case SSL_ERROR_SYSCALL:
        -:  178:    case SSL_ERROR_NONE:
        -:  179:    default:
    #####:  180:      break;
        -:  181:  };
        -:  182:
        -:  183:  /* Set error status to a equivalent of the SSL error. */
    #####:  184:  if (error) {
        -:  185:#ifdef _WIN32
        -:  186:    WSASetLastError(error);
        -:  187:#else
    #####:  188:    errno = error;
        -:  189:#endif
        -:  190:  }
    #####:  191:}
        -:  192:
        -:  193:/**
        -:  194:  Check if an operation should be retried and handle errors
        -:  195:
        -:  196:  This function does the following:
        -:  197:    - it indicates whether a SSL I/O operation must be retried later;
        -:  198:    - if DBUG is enabled it prints all the errors in the thread's queue to DBUG
        -:  199:    - it clears the OpenSSL error queue, thus the next OpenSSL-operation can be
        -:  200:      performed even after failed OpenSSL-call.
        -:  201:
        -:  202:  Note that this is not done for SSL_ERROR_WANT_READ/SSL_ERROR_WANT_WRITE
        -:  203:  since these are not treated as errors and a call to the function is retried.
        -:  204:
        -:  205:  When SSL_ERROR_SSL is returned the ERR code of the top error in the queue is
        -:  206:  peeked and returned to the caller so they can call ERR_error_string_n() and
        -:  207:  retrieve the right error message.
        -:  208:
        -:  209:  @param vio  VIO object representing a SSL connection.
        -:  210:  @param ret  Value returned by a SSL I/O function.
        -:  211:  @param [out] event             The type of I/O event to wait/retry.
        -:  212:  @param [out] ssl_errno_holder  The SSL error code.
        -:  213:
        -:  214:  @return Whether a SSL I/O operation should be deferred.
        -:  215:  @retval true    Temporary failure, retry operation.
        -:  216:  @retval false   Indeterminate failure.
        -:  217:*/
        -:  218:
    #####:  219:static bool ssl_should_retry(Vio *vio, int ret, enum enum_vio_io_event *event,
        -:  220:                             unsigned long *ssl_errno_holder) {
        -:  221:  int ssl_error, err_error;
    #####:  222:  SSL *ssl = static_cast<SSL *>(vio->ssl_arg);
    #####:  223:  bool should_retry = true;
        -:  224:
        -:  225:  /* Retrieve the result for the SSL I/O operation. */
    #####:  226:  ssl_error = SSL_get_error(ssl, ret);
        -:  227:
        -:  228:  /* Retrieve the result for the SSL I/O operation. */
    #####:  229:  switch (ssl_error) {
    #####:  230:    case SSL_ERROR_WANT_READ:
    #####:  231:      err_error = ssl_error;  // for backward compatibility.
    #####:  232:      *event = VIO_IO_EVENT_READ;
    #####:  233:      break;
    #####:  234:    case SSL_ERROR_WANT_WRITE:
    #####:  235:      err_error = ssl_error;  // for backward compatibility.
    #####:  236:      *event = VIO_IO_EVENT_WRITE;
    #####:  237:      break;
    #####:  238:    default:
        -:  239:      /* first save the top ERR error */
    #####:  240:      err_error = ERR_get_error();
        -:  241:      /* now report all remaining errors on and/or clear the error stack */
        -:  242:#ifndef NDEBUG /* Debug build */
        -:  243:      /* Note: the OpenSSL error queue gets cleared in report_errors(). */
    #####:  244:      report_errors(ssl);
        -:  245:#else /* Release build */
        -:  246:      ERR_clear_error();
        -:  247:#endif
    #####:  248:      should_retry = false;
    #####:  249:      ssl_set_sys_error(ssl_error);
    #####:  250:      break;
        -:  251:  }
        -:  252:
    #####:  253:  *ssl_errno_holder = err_error;
        -:  254:
    #####:  255:  return should_retry;
        -:  256:}
        -:  257:
    #####:  258:size_t vio_ssl_read(Vio *vio, uchar *buf, size_t size) {
        -:  259:  int ret;
    #####:  260:  SSL *ssl = static_cast<SSL *>(vio->ssl_arg);
        -:  261:  unsigned long ssl_errno_not_used;
        -:  262:
    #####:  263:  DBUG_TRACE;
        -:  264:
        -:  265:  while (true) {
        -:  266:    enum enum_vio_io_event event;
        -:  267:
        -:  268:    /*
        -:  269:      Check that the SSL thread's error queue is cleared. Otherwise
        -:  270:      SSL_read() returns an error from the error queue, when SSL_read() failed
        -:  271:      because it would block.
        -:  272:    */
    #####:  273:    assert(ERR_peek_error() == 0);
        -:  274:
    #####:  275:    ret = SSL_read(ssl, buf, (int)size);
        -:  276:
    #####:  277:    if (ret >= 0) break;
        -:  278:
        -:  279:    /* Process the SSL I/O error. */
    #####:  280:    if (!ssl_should_retry(vio, ret, &event, &ssl_errno_not_used)) break;
        -:  281:
    #####:  282:    if (!vio->is_blocking_flag) {
    #####:  283:      switch (event) {
    #####:  284:        case VIO_IO_EVENT_READ:
    #####:  285:          return VIO_SOCKET_WANT_READ;
    #####:  286:        case VIO_IO_EVENT_WRITE:
    #####:  287:          return VIO_SOCKET_WANT_WRITE;
    #####:  288:        default:
    #####:  289:          return VIO_SOCKET_ERROR;
        -:  290:      }
        -:  291:    }
        -:  292:
        -:  293:    /* Attempt to wait for an I/O event. */
    #####:  294:    if (vio_socket_io_wait(vio, event)) break;
    #####:  295:  }
        -:  296:
    #####:  297:  return ret < 0 ? -1 : ret;
        -:  298:}
        -:  299:
    #####:  300:size_t vio_ssl_write(Vio *vio, const uchar *buf, size_t size) {
        -:  301:  int ret;
    #####:  302:  SSL *ssl = static_cast<SSL *>(vio->ssl_arg);
        -:  303:  unsigned long ssl_errno_not_used;
        -:  304:
    #####:  305:  DBUG_TRACE;
        -:  306:
        -:  307:  while (true) {
        -:  308:    enum enum_vio_io_event event;
        -:  309:
        -:  310:    /*
        -:  311:      check that the SSL thread's error queue is cleared. Otherwise
        -:  312:      SSL_write() returns an error from the error queue, when SSL_write() failed
        -:  313:      because it would block.
        -:  314:    */
    #####:  315:    assert(ERR_peek_error() == 0);
        -:  316:
    #####:  317:    ret = SSL_write(ssl, buf, (int)size);
        -:  318:
    #####:  319:    if (ret >= 0) break;
        -:  320:
        -:  321:    /* Process the SSL I/O error. */
    #####:  322:    if (!ssl_should_retry(vio, ret, &event, &ssl_errno_not_used)) break;
        -:  323:
    #####:  324:    if (!vio->is_blocking_flag) {
    #####:  325:      switch (event) {
    #####:  326:        case VIO_IO_EVENT_READ:
    #####:  327:          return VIO_SOCKET_WANT_READ;
    #####:  328:        case VIO_IO_EVENT_WRITE:
    #####:  329:          return VIO_SOCKET_WANT_WRITE;
    #####:  330:        default:
    #####:  331:          return VIO_SOCKET_ERROR;
        -:  332:      }
        -:  333:    }
        -:  334:
        -:  335:    /* Attempt to wait for an I/O event. */
    #####:  336:    if (vio_socket_io_wait(vio, event)) break;
    #####:  337:  }
        -:  338:
    #####:  339:  return ret < 0 ? -1 : ret;
        -:  340:}
        -:  341:
    #####:  342:int vio_ssl_shutdown(Vio *vio) {
    #####:  343:  int r = 0;
    #####:  344:  SSL *ssl = (SSL *)vio->ssl_arg;
    #####:  345:  DBUG_TRACE;
        -:  346:
    #####:  347:  if (ssl) {
        -:  348:    /*
        -:  349:    THE SSL standard says that SSL sockets must send and receive a close_notify
        -:  350:    alert on socket shutdown to avoid truncation attacks. However, this can
        -:  351:    cause problems since we often hold a lock during shutdown and this IO can
        -:  352:    take an unbounded amount of time to complete. Since our packets are self
        -:  353:    describing with length, we aren't vunerable to these attacks. Therefore,
        -:  354:    we just shutdown by closing the socket (quiet shutdown).
        -:  355:    */
    #####:  356:    SSL_set_quiet_shutdown(ssl, 1);
        -:  357:
    #####:  358:    switch ((r = SSL_shutdown(ssl))) {
    #####:  359:      case 1:
        -:  360:        /* Shutdown successful */
    #####:  361:        break;
    #####:  362:      case 0:
        -:  363:        /*
        -:  364:          Shutdown not yet finished - since the socket is going to
        -:  365:          be closed there is no need to call SSL_shutdown() a second
        -:  366:          time to wait for the other side to respond
        -:  367:        */
    #####:  368:        break;
    #####:  369:      default: /* Shutdown failed */
    #####:  370:        DBUG_PRINT("vio_error",
        -:  371:                   ("SSL_shutdown() failed, error: %d", SSL_get_error(ssl, r)));
    #####:  372:        break;
        -:  373:    }
        -:  374:  }
    #####:  375:  return vio_shutdown(vio);
        -:  376:}
        -:  377:
    #####:  378:void vio_ssl_delete(Vio *vio) {
    #####:  379:  if (!vio) return; /* It must be safe to delete null pointer */
        -:  380:
    #####:  381:  if (vio->inactive == false)
    #####:  382:    vio_ssl_shutdown(vio); /* Still open, close connection first */
        -:  383:
    #####:  384:  if (vio->ssl_arg) {
    #####:  385:    SSL_free((SSL *)vio->ssl_arg);
    #####:  386:    vio->ssl_arg = nullptr;
        -:  387:  }
        -:  388:
        -:  389:#if OPENSSL_VERSION_NUMBER < 0x10100000L
        -:  390:  ERR_remove_thread_state(0);
        -:  391:#endif /* OPENSSL_VERSION_NUMBER < 0x10100000L */
        -:  392:
    #####:  393:  vio_delete(vio);
        -:  394:}
        -:  395:
        -:  396:/** SSL handshake handler. */
        -:  397:extern "C" {
        -:  398:typedef int (*ssl_handshake_func_t)(SSL *);
        -:  399:}
        -:  400:
        -:  401:/**
        -:  402:  Loop and wait until a SSL handshake is completed.
        -:  403:
        -:  404:  @param vio    VIO object representing a SSL connection.
        -:  405:  @param ssl    SSL structure for the connection.
        -:  406:  @param func   SSL handshake handler.
        -:  407:  @param [out] ssl_errno_holder  The SSL error code.
        -:  408:
        -:  409:  @return Return value is 1 on success.
        -:  410:*/
        -:  411:
    #####:  412:static size_t ssl_handshake_loop(Vio *vio, SSL *ssl, ssl_handshake_func_t func,
        -:  413:                                 unsigned long *ssl_errno_holder) {
    #####:  414:  DBUG_TRACE;
    #####:  415:  size_t ret = -1;
        -:  416:
    #####:  417:  vio->ssl_arg = ssl;
        -:  418:
        -:  419:  /* Initiate the SSL handshake. */
        -:  420:  while (true) {
        -:  421:    enum enum_vio_io_event event;
        -:  422:
        -:  423:    /*
        -:  424:      check that the SSL thread's error queue is cleared. Otherwise
        -:  425:      SSL-handshake-function returns an error from the error queue, when the
        -:  426:      function failed because it would block.
        -:  427:    */
    #####:  428:    assert(ERR_peek_error() == 0);
        -:  429:
        -:  430:    int handshake_ret;
    #####:  431:    handshake_ret = func(ssl);
        -:  432:
    #####:  433:    if (handshake_ret >= 1) {
    #####:  434:      ret = 0;
    #####:  435:      break;
        -:  436:    }
        -:  437:
        -:  438:    /* Process the SSL I/O error. */
    #####:  439:    if (!ssl_should_retry(vio, handshake_ret, &event, ssl_errno_holder)) break;
        -:  440:
    #####:  441:    DBUG_EXECUTE_IF("bug32372038", {
        -:  442:      DBUG_SET("+d,bug32372038_ssl_started");
        -:  443:      return VIO_SOCKET_WANT_READ;
        -:  444:    };);
        -:  445:
    #####:  446:    if (!vio->is_blocking_flag) {
    #####:  447:      switch (event) {
    #####:  448:        case VIO_IO_EVENT_READ:
    #####:  449:          return VIO_SOCKET_WANT_READ;
    #####:  450:        case VIO_IO_EVENT_WRITE:
    #####:  451:          return VIO_SOCKET_WANT_WRITE;
    #####:  452:        default:
    #####:  453:          return VIO_SOCKET_ERROR;
        -:  454:      }
        -:  455:    }
        -:  456:
        -:  457:    /* Wait for I/O so that the handshake can proceed. */
    #####:  458:    if (vio_socket_io_wait(vio, event)) break;
    #####:  459:  }
        -:  460:
    #####:  461:  vio->ssl_arg = nullptr;
        -:  462:
    #####:  463:  return ret;
        -:  464:}
        -:  465:
        -:  466:#ifdef HAVE_PSI_SOCKET_INTERFACE
    #####:  467:long pfs_ssl_bio_callback_ex(BIO *b, int oper, const char * /* argp */,
        -:  468:                             size_t len, int /* argi */, long /* argl */,
        -:  469:                             int ret, size_t *processed) {
        -:  470:  Vio *vio;
        -:  471:  static const char *method_name = "open_ssl::bio::socket";
        -:  472:
        -:  473:  /*
        -:  474:    Note:
        -:  475:    Normally, typical instrumentation for the performance schema would
        -:  476:    - define a local PSI_socket_locker_state variable
        -:  477:    - define a local PSI_socket_locker pointer
        -:  478:    - call PSI_SOCKET_CALL(start_socket_wait)
        -:  479:    - perform the operation
        -:  480:    - call PSI_SOCKET_CALL(end_socket_wait)
        -:  481:
        -:  482:    Now, because this is done in a function callback attached to SSL itself,
        -:  483:    invocation of the start and end event are done in different invocations,
        -:  484:    so some state needs to be preserved between:
        -:  485:    - BIO_CB_READ and BIO_CB_READ|BIO_CB_RETURN,
        -:  486:    - BIO_CB_WRITE and BIO_CB_WRITE|BIO_CB_RETURN
        -:  487:
        -:  488:    This state is preserved in attributes of vio:
        -:  489:    - m_psi_read_state and m_psi_read_locker for BIO_CB_READ
        -:  490:    - m_psi_write_state and m_psi_write_locker for BIO_CB_WRITE
        -:  491:
        -:  492:    Raw socket operations are not supposed to be re-entrant,
        -:  493:    so we assert here that:
        -:  494:    - there is not a current read operation when performing a read
        -:  495:    - there is not a current write operation when performing a write.
        -:  496:    for extra safety.
        -:  497:  */
    #####:  498:  switch (oper) {
    #####:  499:    case BIO_CB_READ:
    #####:  500:      vio = reinterpret_cast<Vio *>(BIO_get_callback_arg(b));
    #####:  501:      assert(vio->m_psi_read_locker == nullptr);
    #####:  502:      if (vio->mysql_socket.m_psi != nullptr) {
    #####:  503:        vio->m_psi_read_locker = PSI_SOCKET_CALL(start_socket_wait)(
        -:  504:            &vio->m_psi_read_state, vio->mysql_socket.m_psi, PSI_SOCKET_RECV,
        -:  505:            len, method_name, oper);
        -:  506:      }
    #####:  507:      break;
    #####:  508:    case BIO_CB_READ | BIO_CB_RETURN:
    #####:  509:      vio = reinterpret_cast<Vio *>(BIO_get_callback_arg(b));
    #####:  510:      if (vio->m_psi_read_locker != nullptr) {
    #####:  511:        PSI_SOCKET_CALL(end_socket_wait)(vio->m_psi_read_locker, *processed);
    #####:  512:        vio->m_psi_read_locker = nullptr;
        -:  513:      }
    #####:  514:      break;
    #####:  515:    case BIO_CB_WRITE:
    #####:  516:      vio = reinterpret_cast<Vio *>(BIO_get_callback_arg(b));
    #####:  517:      assert(vio->m_psi_write_locker == nullptr);
    #####:  518:      if (vio->mysql_socket.m_psi != nullptr) {
    #####:  519:        vio->m_psi_write_locker = PSI_SOCKET_CALL(start_socket_wait)(
        -:  520:            &vio->m_psi_write_state, vio->mysql_socket.m_psi, PSI_SOCKET_SEND,
        -:  521:            len, method_name, oper);
        -:  522:      }
    #####:  523:      break;
    #####:  524:    case BIO_CB_WRITE | BIO_CB_RETURN:
    #####:  525:      vio = reinterpret_cast<Vio *>(BIO_get_callback_arg(b));
    #####:  526:      if (vio->m_psi_write_locker != nullptr) {
    #####:  527:        PSI_SOCKET_CALL(end_socket_wait)(vio->m_psi_write_locker, *processed);
    #####:  528:        vio->m_psi_write_locker = nullptr;
        -:  529:      }
    #####:  530:      break;
    #####:  531:    case BIO_CB_CTRL:
        -:  532:    case BIO_CB_CTRL | BIO_CB_RETURN:
        -:  533:    case BIO_CB_FREE:
        -:  534:    case BIO_CB_FREE | BIO_CB_RETURN:
    #####:  535:      break;
    #####:  536:    case BIO_CB_PUTS:
        -:  537:    case BIO_CB_PUTS | BIO_CB_RETURN:
        -:  538:    case BIO_CB_GETS:
        -:  539:    case BIO_CB_GETS | BIO_CB_RETURN:
        -:  540:    default:
    #####:  541:      assert(false);
        -:  542:  }
        -:  543:
    #####:  544:  return ret;
        -:  545:}
        -:  546:#endif /* HAVE_PSI_SOCKET_INTERFACE */
        -:  547:
        -:  548:#ifdef HAVE_PSI_SOCKET_INTERFACE
        -:  549:#ifndef HAVE_BIO_SET_CALLBACK_EX
        -:  550:/**
        -:  551:  Forward openSSL old style callback to openSSL 1.1.1 style callback.
        -:  552:*/
        -:  553:long pfs_ssl_bio_callback(BIO *b, int oper, const char *argp, int argi,
        -:  554:                          long argl, long ret) {
        -:  555:  size_t len = argi;
        -:  556:  /*
        -:  557:    For pre events:
        -:  558:    - irrelevant (not used in pfs_ssl_bio_callback_ex)
        -:  559:    For post (BIO_CB_RETURN) events,
        -:  560:    the number of bytes:
        -:  561:    - actually read, per the return value of recv()
        -:  562:    - actually written, per the return value of send()
        -:  563:  */
        -:  564:  size_t processed = (ret >= 0) ? ret : 0;
        -:  565:
        -:  566:  return pfs_ssl_bio_callback_ex(b, oper, argp, len, argi, argl, ret,
        -:  567:                                 &processed);
        -:  568:}
        -:  569:#endif /* HAVE_BIO_SET_CALLBACK_EX */
        -:  570:#endif /* HAVE_PSI_SOCKET_INTERFACE */
        -:  571:
        -:  572:#ifdef HAVE_PSI_SOCKET_INTERFACE
    #####:  573:static void pfs_ssl_setup_instrumentation(Vio *vio, const SSL *ssl) {
    #####:  574:  BIO *rbio = SSL_get_rbio(ssl);
    #####:  575:  assert(rbio != nullptr);
    #####:  576:  assert(BIO_method_type(rbio) == BIO_TYPE_SOCKET);
        -:  577:
    #####:  578:  BIO *wbio = SSL_get_wbio(ssl);
    #####:  579:  assert(wbio != nullptr);
    #####:  580:  assert(BIO_method_type(wbio) == BIO_TYPE_SOCKET);
        -:  581:
    #####:  582:  char *cb_arg = reinterpret_cast<char *>(vio);
    #####:  583:  assert(cb_arg != nullptr);
        -:  584:
    #####:  585:  BIO_set_callback_arg(rbio, cb_arg);
        -:  586:
        -:  587:#ifdef HAVE_BIO_SET_CALLBACK_EX
    #####:  588:  BIO_set_callback_ex(rbio, pfs_ssl_bio_callback_ex);
        -:  589:#else
        -:  590:  BIO_set_callback(rbio, pfs_ssl_bio_callback);
        -:  591:#endif
        -:  592:
    #####:  593:  if (rbio != wbio) {
    #####:  594:    BIO_set_callback_arg(wbio, cb_arg);
        -:  595:
        -:  596:#ifdef HAVE_BIO_SET_CALLBACK_EX
    #####:  597:    BIO_set_callback_ex(wbio, pfs_ssl_bio_callback_ex);
        -:  598:#else
        -:  599:    BIO_set_callback(wbio, pfs_ssl_bio_callback);
        -:  600:#endif
        -:  601:  }
    #####:  602:}
        -:  603:#endif /* HAVE_PSI_SOCKET_INTERFACE */
        -:  604:
    #####:  605:static int ssl_do(struct st_VioSSLFd *ptr, Vio *vio, long timeout,
        -:  606:                  ssl_handshake_func_t func, unsigned long *ssl_errno_holder,
        -:  607:                  SSL **sslptr) {
    #####:  608:  SSL *ssl = nullptr;
    #####:  609:  my_socket sd = mysql_socket_getfd(vio->mysql_socket);
        -:  610:
        -:  611:  /* Declared here to make compiler happy */
        -:  612:#if !defined(NDEBUG)
        -:  613:  int j, n;
        -:  614:#endif
        -:  615:
    #####:  616:  DBUG_TRACE;
    #####:  617:  DBUG_PRINT("enter", ("ptr: %p, sd: %d  ctx: %p", ptr, sd, ptr->ssl_context));
        -:  618:
    #####:  619:  if (!sslptr) {
    #####:  620:    sslptr = &ssl;
        -:  621:  }
        -:  622:
    #####:  623:  if (*sslptr == nullptr) {
    #####:  624:    if (!(ssl = SSL_new(ptr->ssl_context))) {
    #####:  625:      DBUG_PRINT("error", ("SSL_new failure"));
    #####:  626:      *ssl_errno_holder = ERR_get_error();
    #####:  627:      return 1;
        -:  628:    }
        -:  629:
    #####:  630:    DBUG_PRINT("info", ("ssl: %p timeout: %ld", ssl, timeout));
    #####:  631:    SSL_clear(ssl);
    #####:  632:    SSL_SESSION_set_timeout(SSL_get_session(ssl), timeout);
    #####:  633:    SSL_set_fd(ssl, sd);
        -:  634:#if defined(SSL_OP_NO_COMPRESSION)
    #####:  635:    SSL_set_options(ssl, SSL_OP_NO_COMPRESSION); /* OpenSSL >= 1.0 only */
        -:  636:#elif OPENSSL_VERSION_NUMBER >= 0x00908000L /* workaround for OpenSSL 0.9.8 */
        -:  637:    sk_SSL_COMP_zero(SSL_COMP_get_compression_methods());
        -:  638:#endif
        -:  639:
        -:  640:#if !defined(NDEBUG)
        -:  641:    {
    #####:  642:      STACK_OF(SSL_COMP) *ssl_comp_methods = nullptr;
    #####:  643:      ssl_comp_methods = SSL_COMP_get_compression_methods();
    #####:  644:      n = sk_SSL_COMP_num(ssl_comp_methods);
    #####:  645:      DBUG_PRINT("info", ("Available compression methods:\n"));
    #####:  646:      if (n == 0)
    #####:  647:        DBUG_PRINT("info", ("NONE\n"));
        -:  648:      else
    #####:  649:        for (j = 0; j < n; j++) {
    #####:  650:          SSL_COMP *c = sk_SSL_COMP_value(ssl_comp_methods, j);
        -:  651:#if OPENSSL_VERSION_NUMBER < 0x10100000L
        -:  652:          DBUG_PRINT("info", ("  %d: %s\n", c->id, c->name));
        -:  653:#else  /* OPENSSL_VERSION_NUMBER < 0x10100000L */
    #####:  654:          DBUG_PRINT("info",
        -:  655:                     ("  %d: %s\n", SSL_COMP_get_id(c), SSL_COMP_get0_name(c)));
        -:  656:#endif /* OPENSSL_VERSION_NUMBER < 0x10100000L */
        -:  657:        }
        -:  658:    }
        -:  659:#endif
        -:  660:
    #####:  661:    *sslptr = ssl;
        -:  662:
        -:  663:#ifdef HAVE_PSI_SOCKET_INTERFACE
    #####:  664:    pfs_ssl_setup_instrumentation(vio, ssl);
        -:  665:#endif /* HAVE_PSI_SOCKET_INTERFACE */
        -:  666:
        -:  667:  } else {
    #####:  668:    ssl = *sslptr;
        -:  669:  }
        -:  670:
        -:  671:  size_t loop_ret;
    #####:  672:  if ((loop_ret = ssl_handshake_loop(vio, ssl, func, ssl_errno_holder))) {
    #####:  673:    if (loop_ret != VIO_SOCKET_ERROR) {
    #####:  674:      return (int)loop_ret;  // Don't free SSL
        -:  675:    }
        -:  676:
    #####:  677:    DBUG_PRINT("error", ("SSL_connect/accept failure"));
    #####:  678:    SSL_free(ssl);
    #####:  679:    *sslptr = nullptr;
    #####:  680:    return (int)VIO_SOCKET_ERROR;
        -:  681:  }
        -:  682:
        -:  683:  /*
        -:  684:    Connection succeeded. Install new function handlers,
        -:  685:    change type, set sd to the fd used when connecting
        -:  686:    and set pointer to the SSL structure
        -:  687:  */
    #####:  688:  if (vio_reset(vio, VIO_TYPE_SSL, SSL_get_fd(ssl), ssl, 0)) return 1;
    #####:  689:  if (sslptr != &ssl) {
    #####:  690:    *sslptr = nullptr;
        -:  691:  }
        -:  692:
        -:  693:#ifndef NDEBUG
        -:  694:  {
        -:  695:    /* Print some info about the peer */
        -:  696:    X509 *cert;
        -:  697:    char buf[512];
        -:  698:
    #####:  699:    DBUG_PRINT("info", ("SSL connection succeeded"));
    #####:  700:    DBUG_PRINT("info", ("Using cipher: '%s'", SSL_get_cipher_name(ssl)));
        -:  701:
    #####:  702:    if ((cert = SSL_get_peer_certificate(ssl))) {
    #####:  703:      DBUG_PRINT("info", ("Peer certificate:"));
    #####:  704:      X509_NAME_oneline(X509_get_subject_name(cert), buf, sizeof(buf));
    #####:  705:      DBUG_PRINT("info", ("\t subject: '%s'", buf));
    #####:  706:      X509_NAME_oneline(X509_get_issuer_name(cert), buf, sizeof(buf));
    #####:  707:      DBUG_PRINT("info", ("\t issuer: '%s'", buf));
    #####:  708:      X509_free(cert);
        -:  709:    } else
    #####:  710:      DBUG_PRINT("info", ("Peer does not have certificate."));
        -:  711:
    #####:  712:    if (SSL_get_shared_ciphers(ssl, buf, sizeof(buf))) {
    #####:  713:      DBUG_PRINT("info", ("shared_ciphers: '%s'", buf));
        -:  714:    } else
    #####:  715:      DBUG_PRINT("info", ("no shared ciphers!"));
        -:  716:  }
        -:  717:#endif
        -:  718:
    #####:  719:  return 0;
        -:  720:}
        -:  721:
    #####:  722:int sslaccept(struct st_VioSSLFd *ptr, Vio *vio, long timeout,
        -:  723:              unsigned long *ssl_errno_holder) {
    #####:  724:  DBUG_TRACE;
    #####:  725:  int ret = ssl_do(ptr, vio, timeout, SSL_accept, ssl_errno_holder, nullptr);
    #####:  726:  return ret;
        -:  727:}
        -:  728:
    #####:  729:int sslconnect(struct st_VioSSLFd *ptr, Vio *vio, long timeout,
        -:  730:               unsigned long *ssl_errno_holder, SSL **ssl) {
    #####:  731:  DBUG_TRACE;
    #####:  732:  int ret = ssl_do(ptr, vio, timeout, SSL_connect, ssl_errno_holder, ssl);
    #####:  733:  return ret;
        -:  734:}
        -:  735:
    #####:  736:bool vio_ssl_has_data(Vio *vio) {
    #####:  737:  return SSL_pending(static_cast<SSL *>(vio->ssl_arg)) > 0 ? true : false;
        -:  738:}
